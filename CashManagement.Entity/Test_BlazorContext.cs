// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace CashManagement.Entity
{
    public partial class Test_BlazorContext : DbContext
    {
        public Test_BlazorContext()
        {
        }

        public Test_BlazorContext(DbContextOptions<Test_BlazorContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AML_Mapping> AML_Mapping { get; set; }
        public virtual DbSet<Audit_bd_base> Audit_bd_base { get; set; }
        public virtual DbSet<Audit_bd_ex_rate> Audit_bd_ex_rate { get; set; }
        public virtual DbSet<Audit_bd_list> Audit_bd_list { get; set; }
        public virtual DbSet<Audit_bd_trans_hist> Audit_bd_trans_hist { get; set; }
        public virtual DbSet<Audit_ca_broker> Audit_ca_broker { get; set; }
        public virtual DbSet<Audit_code_file> Audit_code_file { get; set; }
        public virtual DbSet<Audit_fn_base> Audit_fn_base { get; set; }
        public virtual DbSet<Audit_fn_co> Audit_fn_co { get; set; }
        public virtual DbSet<Audit_fn_trans> Audit_fn_trans { get; set; }
        public virtual DbSet<Audit_fund_file> Audit_fund_file { get; set; }
        public virtual DbSet<Audit_fx_account_file> Audit_fx_account_file { get; set; }
        public virtual DbSet<Audit_fx_base> Audit_fx_base { get; set; }
        public virtual DbSet<Audit_fx_code_File> Audit_fx_code_File { get; set; }
        public virtual DbSet<Audit_fx_deal_hist> Audit_fx_deal_hist { get; set; }
        public virtual DbSet<Audit_sb_broker> Audit_sb_broker { get; set; }
        public virtual DbSet<Audit_sk_base> Audit_sk_base { get; set; }
        public virtual DbSet<Audit_sk_capital> Audit_sk_capital { get; set; }
        public virtual DbSet<Audit_sk_hist> Audit_sk_hist { get; set; }
        public virtual DbSet<Audit_sk_price> Audit_sk_price { get; set; }
        public virtual DbSet<Audit_sk_total> Audit_sk_total { get; set; }
        public virtual DbSet<Audit_sk_total_hist> Audit_sk_total_hist { get; set; }
        public virtual DbSet<Audit_sk_trans> Audit_sk_trans { get; set; }
        public virtual DbSet<Audit_td_dtl> Audit_td_dtl { get; set; }
        public virtual DbSet<Audit_td_int_file> Audit_td_int_file { get; set; }
        public virtual DbSet<Audit_td_mast> Audit_td_mast { get; set; }
        public virtual DbSet<Book> Book { get; set; }
        public virtual DbSet<Book1> Book1 { get; set; }
        public virtual DbSet<Book2> Book2 { get; set; }
        public virtual DbSet<CAT080_Acct> CAT080_Acct { get; set; }
        public virtual DbSet<CAT080_Bank> CAT080_Bank { get; set; }
        public virtual DbSet<Check_detail_no> Check_detail_no { get; set; }
        public virtual DbSet<Check_detail_yes> Check_detail_yes { get; set; }
        public virtual DbSet<Fn_PaperData> Fn_PaperData { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<_SQL_Results__> _SQL_Results__ { get; set; }
        public virtual DbSet<acct_dtl> acct_dtl { get; set; }
        public virtual DbSet<acct_dtl_bank> acct_dtl_bank { get; set; }
        public virtual DbSet<acct_dtl_tmp2> acct_dtl_tmp2 { get; set; }
        public virtual DbSet<acct_dtl_vlife> acct_dtl_vlife { get; set; }
        public virtual DbSet<bank_account> bank_account { get; set; }
        public virtual DbSet<bank_acct> bank_acct { get; set; }
        public virtual DbSet<bank_acct_agent> bank_acct_agent { get; set; }
        public virtual DbSet<bank_acct_bk> bank_acct_bk { get; set; }
        public virtual DbSet<bank_acct_limit> bank_acct_limit { get; set; }
        public virtual DbSet<bank_acct_log> bank_acct_log { get; set; }
        public virtual DbSet<bank_acct_predesign> bank_acct_predesign { get; set; }
        public virtual DbSet<bank_acct_rate> bank_acct_rate { get; set; }
        public virtual DbSet<bank_base> bank_base { get; set; }
        public virtual DbSet<bank_base_aml_nation> bank_base_aml_nation { get; set; }
        public virtual DbSet<bank_bk_endbal> bank_bk_endbal { get; set; }
        public virtual DbSet<bank_bk_endbal_fc> bank_bk_endbal_fc { get; set; }
        public virtual DbSet<bank_disk_l> bank_disk_l { get; set; }
        public virtual DbSet<bank_disk_r> bank_disk_r { get; set; }
        public virtual DbSet<bank_endbal> bank_endbal { get; set; }
        public virtual DbSet<bank_endbal_hist> bank_endbal_hist { get; set; }
        public virtual DbSet<bank_inout_dtl> bank_inout_dtl { get; set; }
        public virtual DbSet<bank_int> bank_int { get; set; }
        public virtual DbSet<bank_temp_trans> bank_temp_trans { get; set; }
        public virtual DbSet<bank_temp_trans_log> bank_temp_trans_log { get; set; }
        public virtual DbSet<bd_base> bd_base { get; set; }
        public virtual DbSet<bd_base_backup> bd_base_backup { get; set; }
        public virtual DbSet<bd_bdr002d> bd_bdr002d { get; set; }
        public virtual DbSet<bd_bdr011> bd_bdr011 { get; set; }
        public virtual DbSet<bd_cash> bd_cash { get; set; }
        public virtual DbSet<bd_change> bd_change { get; set; }
        public virtual DbSet<bd_change_hist> bd_change_hist { get; set; }
        public virtual DbSet<bd_change_hist2023> bd_change_hist2023 { get; set; }
        public virtual DbSet<bd_changefund> bd_changefund { get; set; }
        public virtual DbSet<bd_chgtype> bd_chgtype { get; set; }
        public virtual DbSet<bd_chk_oversell> bd_chk_oversell { get; set; }
        public virtual DbSet<bd_ex_rate> bd_ex_rate { get; set; }
        public virtual DbSet<bd_exclude_list> bd_exclude_list { get; set; }
        public virtual DbSet<bd_int> bd_int { get; set; }
        public virtual DbSet<bd_inv> bd_inv { get; set; }
        public virtual DbSet<bd_inv_hist> bd_inv_hist { get; set; }
        public virtual DbSet<bd_issueco> bd_issueco { get; set; }
        public virtual DbSet<bd_list> bd_list { get; set; }
        public virtual DbSet<bd_list_bk_A03106> bd_list_bk_A03106 { get; set; }
        public virtual DbSet<bd_newdeal> bd_newdeal { get; set; }
        public virtual DbSet<bd_price> bd_price { get; set; }
        public virtual DbSet<bd_reccash> bd_reccash { get; set; }
        public virtual DbSet<bd_reccash_backup> bd_reccash_backup { get; set; }
        public virtual DbSet<bd_reccash_trans> bd_reccash_trans { get; set; }
        public virtual DbSet<bd_report> bd_report { get; set; }
        public virtual DbSet<bd_sheet_inv> bd_sheet_inv { get; set; }
        public virtual DbSet<bd_sheet_inv_hist> bd_sheet_inv_hist { get; set; }
        public virtual DbSet<bd_sheet_trans> bd_sheet_trans { get; set; }
        public virtual DbSet<bd_sheet_trans_hist> bd_sheet_trans_hist { get; set; }
        public virtual DbSet<bd_tanbase> bd_tanbase { get; set; }
        public virtual DbSet<bd_tanbase_beeline> bd_tanbase_beeline { get; set; }
        public virtual DbSet<bd_tmpbdr23> bd_tmpbdr23 { get; set; }
        public virtual DbSet<bd_total> bd_total { get; set; }
        public virtual DbSet<bd_total_hist> bd_total_hist { get; set; }
        public virtual DbSet<bd_total_hist20230110> bd_total_hist20230110 { get; set; }
        public virtual DbSet<bd_trans> bd_trans { get; set; }
        public virtual DbSet<bd_trans_hist> bd_trans_hist { get; set; }
        public virtual DbSet<bd_trans_hist_backup> bd_trans_hist_backup { get; set; }
        public virtual DbSet<bd_transtempCB> bd_transtempCB { get; set; }
        public virtual DbSet<bdrs_account> bdrs_account { get; set; }
        public virtual DbSet<bdrs_cal> bdrs_cal { get; set; }
        public virtual DbSet<bdrs_cal_hist> bdrs_cal_hist { get; set; }
        public virtual DbSet<bdrs_fundacct> bdrs_fundacct { get; set; }
        public virtual DbSet<bdrs_inventory> bdrs_inventory { get; set; }
        public virtual DbSet<bdrs_inventory_log> bdrs_inventory_log { get; set; }
        public virtual DbSet<bdrs_relation> bdrs_relation { get; set; }
        public virtual DbSet<bdrs_trans> bdrs_trans { get; set; }
        public virtual DbSet<bdrs_trans_new> bdrs_trans_new { get; set; }
        public virtual DbSet<bdrs_trans_ref> bdrs_trans_ref { get; set; }
        public virtual DbSet<ca_broker> ca_broker { get; set; }
        public virtual DbSet<ca_brokerpay> ca_brokerpay { get; set; }
        public virtual DbSet<ca_car051_memo> ca_car051_memo { get; set; }
        public virtual DbSet<ca_car051_memo_bk> ca_car051_memo_bk { get; set; }
        public virtual DbSet<ca_cashitem> ca_cashitem { get; set; }
        public virtual DbSet<ca_cat008_log> ca_cat008_log { get; set; }
        public virtual DbSet<ca_cat018_log> ca_cat018_log { get; set; }
        public virtual DbSet<ca_cat030_log> ca_cat030_log { get; set; }
        public virtual DbSet<ca_cat079_log> ca_cat079_log { get; set; }
        public virtual DbSet<ca_category> ca_category { get; set; }
        public virtual DbSet<ca_check_gl_dtl> ca_check_gl_dtl { get; set; }
        public virtual DbSet<ca_group> ca_group { get; set; }
        public virtual DbSet<ca_group_car052> ca_group_car052 { get; set; }
        public virtual DbSet<ca_group_exp_amt> ca_group_exp_amt { get; set; }
        public virtual DbSet<ca_item_base> ca_item_base { get; set; }
        public virtual DbSet<ca_remit_info> ca_remit_info { get; set; }
        public virtual DbSet<ca_restdate> ca_restdate { get; set; }
        public virtual DbSet<ca_source_item_mapping> ca_source_item_mapping { get; set; }
        public virtual DbSet<ca_unlock_log> ca_unlock_log { get; set; }
        public virtual DbSet<car009memo> car009memo { get; set; }
        public virtual DbSet<car020_map> car020_map { get; set; }
        public virtual DbSet<cash_item_mapping> cash_item_mapping { get; set; }
        public virtual DbSet<cash_plan> cash_plan { get; set; }
        public virtual DbSet<cash_status> cash_status { get; set; }
        public virtual DbSet<ccy_base> ccy_base { get; set; }
        public virtual DbSet<ccy_rate_list> ccy_rate_list { get; set; }
        public virtual DbSet<check_add> check_add { get; set; }
        public virtual DbSet<check_chgblock> check_chgblock { get; set; }
        public virtual DbSet<check_detail> check_detail { get; set; }
        public virtual DbSet<check_detail_change> check_detail_change { get; set; }
        public virtual DbSet<check_detail_voidrecovery> check_detail_voidrecovery { get; set; }
        public virtual DbSet<check_tmp_1> check_tmp_1 { get; set; }
        public virtual DbSet<chgtype_tranhist> chgtype_tranhist { get; set; }
        public virtual DbSet<chgtypetest> chgtypetest { get; set; }
        public virtual DbSet<code_base> code_base { get; set; }
        public virtual DbSet<code_file> code_file { get; set; }
        public virtual DbSet<columns_define> columns_define { get; set; }
        public virtual DbSet<cs_total> cs_total { get; set; }
        public virtual DbSet<cs_total_hist> cs_total_hist { get; set; }
        public virtual DbSet<cs_trans> cs_trans { get; set; }
        public virtual DbSet<da_acct_dtl> da_acct_dtl { get; set; }
        public virtual DbSet<da_bank_endbal> da_bank_endbal { get; set; }
        public virtual DbSet<da_bank_endbal_hist> da_bank_endbal_hist { get; set; }
        public virtual DbSet<da_contract_base> da_contract_base { get; set; }
        public virtual DbSet<da_sb_dtl> da_sb_dtl { get; set; }
        public virtual DbSet<da_sb_register> da_sb_register { get; set; }
        public virtual DbSet<da_sb_total_hist> da_sb_total_hist { get; set; }
        public virtual DbSet<da_sb_trans> da_sb_trans { get; set; }
        public virtual DbSet<da_td_int_file> da_td_int_file { get; set; }
        public virtual DbSet<da_td_int_rec> da_td_int_rec { get; set; }
        public virtual DbSet<da_td_register> da_td_register { get; set; }
        public virtual DbSet<da_td_total_hist> da_td_total_hist { get; set; }
        public virtual DbSet<da_td_trans> da_td_trans { get; set; }
        public virtual DbSet<dafn_divid> dafn_divid { get; set; }
        public virtual DbSet<dafn_taxfree> dafn_taxfree { get; set; }
        public virtual DbSet<dafn_total> dafn_total { get; set; }
        public virtual DbSet<dafn_trans> dafn_trans { get; set; }
        public virtual DbSet<dask_divid> dask_divid { get; set; }
        public virtual DbSet<dask_taxfree> dask_taxfree { get; set; }
        public virtual DbSet<dask_total> dask_total { get; set; }
        public virtual DbSet<dask_trans> dask_trans { get; set; }
        public virtual DbSet<daskr055_hist> daskr055_hist { get; set; }
        public virtual DbSet<daskr055_total> daskr055_total { get; set; }
        public virtual DbSet<daskr055_total_hist> daskr055_total_hist { get; set; }
        public virtual DbSet<daskr055_trans> daskr055_trans { get; set; }
        public virtual DbSet<dept_base> dept_base { get; set; }
        public virtual DbSet<disposable_bd_tanbase> disposable_bd_tanbase { get; set; }
        public virtual DbSet<dm_tra_fo_deal> dm_tra_fo_deal { get; set; }
        public virtual DbSet<dm_tra_td_pledge_chg> dm_tra_td_pledge_chg { get; set; }
        public virtual DbSet<emp_base> emp_base { get; set; }
        public virtual DbSet<f_acct> f_acct { get; set; }
        public virtual DbSet<fas_no_tmp> fas_no_tmp { get; set; }
        public virtual DbSet<fc_exchange_tran> fc_exchange_tran { get; set; }
        public virtual DbSet<fn_Announce> fn_Announce { get; set; }
        public virtual DbSet<fn_ImportLog> fn_ImportLog { get; set; }
        public virtual DbSet<fn_Issuer_rating> fn_Issuer_rating { get; set; }
        public virtual DbSet<fn_alarm> fn_alarm { get; set; }
        public virtual DbSet<fn_base> fn_base { get; set; }
        public virtual DbSet<fn_bd_data> fn_bd_data { get; set; }
        public virtual DbSet<fn_bk_hold> fn_bk_hold { get; set; }
        public virtual DbSet<fn_bk_hold_hist> fn_bk_hold_hist { get; set; }
        public virtual DbSet<fn_bk_hold_hist_tmp> fn_bk_hold_hist_tmp { get; set; }
        public virtual DbSet<fn_co> fn_co { get; set; }
        public virtual DbSet<fn_compare_list> fn_compare_list { get; set; }
        public virtual DbSet<fn_dealer_etf> fn_dealer_etf { get; set; }
        public virtual DbSet<fn_dealer_fn> fn_dealer_fn { get; set; }
        public virtual DbSet<fn_divid> fn_divid { get; set; }
        public virtual DbSet<fn_divid_p> fn_divid_p { get; set; }
        public virtual DbSet<fn_dividinfo> fn_dividinfo { get; set; }
        public virtual DbSet<fn_holding_CNY> fn_holding_CNY { get; set; }
        public virtual DbSet<fn_inout_dtl> fn_inout_dtl { get; set; }
        public virtual DbSet<fn_invest_list> fn_invest_list { get; set; }
        public virtual DbSet<fn_ipo_advance> fn_ipo_advance { get; set; }
        public virtual DbSet<fn_plan> fn_plan { get; set; }
        public virtual DbSet<fn_price> fn_price { get; set; }
        public virtual DbSet<fn_report> fn_report { get; set; }
        public virtual DbSet<fn_swap> fn_swap { get; set; }
        public virtual DbSet<fn_taxfree> fn_taxfree { get; set; }
        public virtual DbSet<fn_total> fn_total { get; set; }
        public virtual DbSet<fn_total_chg_d> fn_total_chg_d { get; set; }
        public virtual DbSet<fn_total_chg_p> fn_total_chg_p { get; set; }
        public virtual DbSet<fn_total_chg_t> fn_total_chg_t { get; set; }
        public virtual DbSet<fn_total_d> fn_total_d { get; set; }
        public virtual DbSet<fn_total_hist> fn_total_hist { get; set; }
        public virtual DbSet<fn_total_hist_d> fn_total_hist_d { get; set; }
        public virtual DbSet<fn_total_hist_p> fn_total_hist_p { get; set; }
        public virtual DbSet<fn_total_hist_t> fn_total_hist_t { get; set; }
        public virtual DbSet<fn_total_p> fn_total_p { get; set; }
        public virtual DbSet<fn_total_t> fn_total_t { get; set; }
        public virtual DbSet<fn_trans> fn_trans { get; set; }
        public virtual DbSet<fn_trans1> fn_trans1 { get; set; }
        public virtual DbSet<ft_account> ft_account { get; set; }
        public virtual DbSet<ft_account_hist> ft_account_hist { get; set; }
        public virtual DbSet<ft_account_list> ft_account_list { get; set; }
        public virtual DbSet<ft_base> ft_base { get; set; }
        public virtual DbSet<ft_broker> ft_broker { get; set; }
        public virtual DbSet<ft_daily_margin> ft_daily_margin { get; set; }
        public virtual DbSet<ft_margin_tran> ft_margin_tran { get; set; }
        public virtual DbSet<ft_price> ft_price { get; set; }
        public virtual DbSet<ft_total> ft_total { get; set; }
        public virtual DbSet<ft_total_hist> ft_total_hist { get; set; }
        public virtual DbSet<ft_tran> ft_tran { get; set; }
        public virtual DbSet<ft_trandtl> ft_trandtl { get; set; }
        public virtual DbSet<ftp_upload_log> ftp_upload_log { get; set; }
        public virtual DbSet<fu_restdate> fu_restdate { get; set; }
        public virtual DbSet<fund_base> fund_base { get; set; }
        public virtual DbSet<fund_charge> fund_charge { get; set; }
        public virtual DbSet<fund_file> fund_file { get; set; }
        public virtual DbSet<fund_portfolio> fund_portfolio { get; set; }
        public virtual DbSet<fund_price> fund_price { get; set; }
        public virtual DbSet<fx_ExchRate> fx_ExchRate { get; set; }
        public virtual DbSet<fx_ImportLog> fx_ImportLog { get; set; }
        public virtual DbSet<fx_Purchase_Transactions> fx_Purchase_Transactions { get; set; }
        public virtual DbSet<fx_Purchase_Transactions_hist> fx_Purchase_Transactions_hist { get; set; }
        public virtual DbSet<fx_Sale_Transactions> fx_Sale_Transactions { get; set; }
        public virtual DbSet<fx_Sale_Transactions_hist> fx_Sale_Transactions_hist { get; set; }
        public virtual DbSet<fx_Trade_Receivables_Payables> fx_Trade_Receivables_Payables { get; set; }
        public virtual DbSet<fx_Trade_Receivables_Payables_hist> fx_Trade_Receivables_Payables_hist { get; set; }
        public virtual DbSet<fx_account> fx_account { get; set; }
        public virtual DbSet<fx_account_execute> fx_account_execute { get; set; }
        public virtual DbSet<fx_account_file> fx_account_file { get; set; }
        public virtual DbSet<fx_bank_acc> fx_bank_acc { get; set; }
        public virtual DbSet<fx_base> fx_base { get; set; }
        public virtual DbSet<fx_base_back> fx_base_back { get; set; }
        public virtual DbSet<fx_category> fx_category { get; set; }
        public virtual DbSet<fx_chg_security_id> fx_chg_security_id { get; set; }
        public virtual DbSet<fx_code_file> fx_code_file { get; set; }
        public virtual DbSet<fx_deal> fx_deal { get; set; }
        public virtual DbSet<fx_deal_hist> fx_deal_hist { get; set; }
        public virtual DbSet<fx_deal_hist_aa> fx_deal_hist_aa { get; set; }
        public virtual DbSet<fx_derivatives> fx_derivatives { get; set; }
        public virtual DbSet<fx_derivatives_hist> fx_derivatives_hist { get; set; }
        public virtual DbSet<fx_diff_temp> fx_diff_temp { get; set; }
        public virtual DbSet<fx_eval_info> fx_eval_info { get; set; }
        public virtual DbSet<fx_file> fx_file { get; set; }
        public virtual DbSet<fx_fund_file> fx_fund_file { get; set; }
        public virtual DbSet<fx_gl_setup> fx_gl_setup { get; set; }
        public virtual DbSet<fx_hist> fx_hist { get; set; }
        public virtual DbSet<fx_holding> fx_holding { get; set; }
        public virtual DbSet<fx_holding_hist> fx_holding_hist { get; set; }
        public virtual DbSet<fx_int_file> fx_int_file { get; set; }
        public virtual DbSet<fx_international> fx_international { get; set; }
        public virtual DbSet<fx_mapping_tmp> fx_mapping_tmp { get; set; }
        public virtual DbSet<fx_market_fair> fx_market_fair { get; set; }
        public virtual DbSet<fx_overdue_income> fx_overdue_income { get; set; }
        public virtual DbSet<fx_security> fx_security { get; set; }
        public virtual DbSet<fx_security_hist> fx_security_hist { get; set; }
        public virtual DbSet<fx_total> fx_total { get; set; }
        public virtual DbSet<fx_total_delete> fx_total_delete { get; set; }
        public virtual DbSet<fx_total_hist> fx_total_hist { get; set; }
        public virtual DbSet<fx_tran_delete> fx_tran_delete { get; set; }
        public virtual DbSet<fx_trans> fx_trans { get; set; }
        public virtual DbSet<fx_transaction> fx_transaction { get; set; }
        public virtual DbSet<fx_transaction_delete> fx_transaction_delete { get; set; }
        public virtual DbSet<fx_transaction_hist> fx_transaction_hist { get; set; }
        public virtual DbSet<ics_cash_upload> ics_cash_upload { get; set; }
        public virtual DbSet<il_ILT010> il_ILT010 { get; set; }
        public virtual DbSet<il_action_info> il_action_info { get; set; }
        public virtual DbSet<il_ex_rate> il_ex_rate { get; set; }
        public virtual DbSet<il_ex_rate_bak> il_ex_rate_bak { get; set; }
        public virtual DbSet<il_fund_base> il_fund_base { get; set; }
        public virtual DbSet<il_fund_bp_rate> il_fund_bp_rate { get; set; }
        public virtual DbSet<il_fund_co> il_fund_co { get; set; }
        public virtual DbSet<il_fund_mng_rate> il_fund_mng_rate { get; set; }
        public virtual DbSet<il_fund_price> il_fund_price { get; set; }
        public virtual DbSet<il_fund_total> il_fund_total { get; set; }
        public virtual DbSet<il_fund_total_adj> il_fund_total_adj { get; set; }
        public virtual DbSet<il_fund_total_hist> il_fund_total_hist { get; set; }
        public virtual DbSet<il_fund_total_tmp> il_fund_total_tmp { get; set; }
        public virtual DbSet<il_fund_total_vlife> il_fund_total_vlife { get; set; }
        public virtual DbSet<il_fund_trans> il_fund_trans { get; set; }
        public virtual DbSet<il_pool_base> il_pool_base { get; set; }
        public virtual DbSet<il_pool_map> il_pool_map { get; set; }
        public virtual DbSet<inv_bnd_bal> inv_bnd_bal { get; set; }
        public virtual DbSet<inv_equ_bal> inv_equ_bal { get; set; }
        public virtual DbSet<inv_equ_bal_dt> inv_equ_bal_dt { get; set; }
        public virtual DbSet<inv_fnd_bal> inv_fnd_bal { get; set; }
        public virtual DbSet<inv_fnd_bal_dt> inv_fnd_bal_dt { get; set; }
        public virtual DbSet<level_change> level_change { get; set; }
        public virtual DbSet<lk_bank> lk_bank { get; set; }
        public virtual DbSet<lk_chang> lk_chang { get; set; }
        public virtual DbSet<lk_hist> lk_hist { get; set; }
        public virtual DbSet<lk_interest> lk_interest { get; set; }
        public virtual DbSet<lk_list> lk_list { get; set; }
        public virtual DbSet<lk_total> lk_total { get; set; }
        public virtual DbSet<lk_total_chg> lk_total_chg { get; set; }
        public virtual DbSet<lk_total_hist> lk_total_hist { get; set; }
        public virtual DbSet<lk_trans> lk_trans { get; set; }
        public virtual DbSet<lk_trans_divid_count> lk_trans_divid_count { get; set; }
        public virtual DbSet<no34_chg_record> no34_chg_record { get; set; }
        public virtual DbSet<no34_chgtype> no34_chgtype { get; set; }
        public virtual DbSet<odbc_info> odbc_info { get; set; }
        public virtual DbSet<op_brokerpay> op_brokerpay { get; set; }
        public virtual DbSet<op_change> op_change { get; set; }
        public virtual DbSet<op_dtl> op_dtl { get; set; }
        public virtual DbSet<op_inv_hist> op_inv_hist { get; set; }
        public virtual DbSet<op_predata> op_predata { get; set; }
        public virtual DbSet<op_rate> op_rate { get; set; }
        public virtual DbSet<op_rate1> op_rate1 { get; set; }
        public virtual DbSet<op_total> op_total { get; set; }
        public virtual DbSet<op_total_hist> op_total_hist { get; set; }
        public virtual DbSet<op_tran> op_tran { get; set; }
        public virtual DbSet<op_tran_bk> op_tran_bk { get; set; }
        public virtual DbSet<portia_code> portia_code { get; set; }
        public virtual DbSet<prog_base> prog_base { get; set; }
        public virtual DbSet<reserch_source> reserch_source { get; set; }
        public virtual DbSet<result> result { get; set; }
        public virtual DbSet<role_base> role_base { get; set; }
        public virtual DbSet<role_prog> role_prog { get; set; }
        public virtual DbSet<rp_base> rp_base { get; set; }
        public virtual DbSet<rp_base_cb> rp_base_cb { get; set; }
        public virtual DbSet<rp_cash> rp_cash { get; set; }
        public virtual DbSet<rp_int> rp_int { get; set; }
        public virtual DbSet<rpt_daily> rpt_daily { get; set; }
        public virtual DbSet<rs_identable> rs_identable { get; set; }
        public virtual DbSet<sb_billname> sb_billname { get; set; }
        public virtual DbSet<sb_broker> sb_broker { get; set; }
        public virtual DbSet<sb_broker_list> sb_broker_list { get; set; }
        public virtual DbSet<sb_broker_td> sb_broker_td { get; set; }
        public virtual DbSet<sb_dtl> sb_dtl { get; set; }
        public virtual DbSet<sb_hold> sb_hold { get; set; }
        public virtual DbSet<sb_int> sb_int { get; set; }
        public virtual DbSet<sb_mast> sb_mast { get; set; }
        public virtual DbSet<sb_rate> sb_rate { get; set; }
        public virtual DbSet<sb_register> sb_register { get; set; }
        public virtual DbSet<sb_total_hist> sb_total_hist { get; set; }
        public virtual DbSet<sb_trans> sb_trans { get; set; }
        public virtual DbSet<sk_accountset> sk_accountset { get; set; }
        public virtual DbSet<sk_base> sk_base { get; set; }
        public virtual DbSet<sk_capital> sk_capital { get; set; }
        public virtual DbSet<sk_chgtype> sk_chgtype { get; set; }
        public virtual DbSet<sk_chgtype_p> sk_chgtype_p { get; set; }
        public virtual DbSet<sk_divid> sk_divid { get; set; }
        public virtual DbSet<sk_divid_dtl> sk_divid_dtl { get; set; }
        public virtual DbSet<sk_divid_dtl_p> sk_divid_dtl_p { get; set; }
        public virtual DbSet<sk_dividdate> sk_dividdate { get; set; }
        public virtual DbSet<sk_dividinfo> sk_dividinfo { get; set; }
        public virtual DbSet<sk_dividpay> sk_dividpay { get; set; }
        public virtual DbSet<sk_hist> sk_hist { get; set; }
        public virtual DbSet<sk_id> sk_id { get; set; }
        public virtual DbSet<sk_ifrs_trans> sk_ifrs_trans { get; set; }
        public virtual DbSet<sk_inv> sk_inv { get; set; }
        public virtual DbSet<sk_inv_hist> sk_inv_hist { get; set; }
        public virtual DbSet<sk_inv_odd> sk_inv_odd { get; set; }
        public virtual DbSet<sk_master> sk_master { get; set; }
        public virtual DbSet<sk_plan> sk_plan { get; set; }
        public virtual DbSet<sk_point> sk_point { get; set; }
        public virtual DbSet<sk_price> sk_price { get; set; }
        public virtual DbSet<sk_projectdividinfo> sk_projectdividinfo { get; set; }
        public virtual DbSet<sk_report> sk_report { get; set; }
        public virtual DbSet<sk_skr009> sk_skr009 { get; set; }
        public virtual DbSet<sk_skr009b> sk_skr009b { get; set; }
        public virtual DbSet<sk_taxfree> sk_taxfree { get; set; }
        public virtual DbSet<sk_total> sk_total { get; set; }
        public virtual DbSet<sk_total_chg_d> sk_total_chg_d { get; set; }
        public virtual DbSet<sk_total_chg_p> sk_total_chg_p { get; set; }
        public virtual DbSet<sk_total_chg_t> sk_total_chg_t { get; set; }
        public virtual DbSet<sk_total_d> sk_total_d { get; set; }
        public virtual DbSet<sk_total_hist> sk_total_hist { get; set; }
        public virtual DbSet<sk_total_hist_d> sk_total_hist_d { get; set; }
        public virtual DbSet<sk_total_hist_p> sk_total_hist_p { get; set; }
        public virtual DbSet<sk_total_hist_t> sk_total_hist_t { get; set; }
        public virtual DbSet<sk_total_ifrs9> sk_total_ifrs9 { get; set; }
        public virtual DbSet<sk_total_p> sk_total_p { get; set; }
        public virtual DbSet<sk_total_t> sk_total_t { get; set; }
        public virtual DbSet<sk_tranerr> sk_tranerr { get; set; }
        public virtual DbSet<sk_tranerr_memo> sk_tranerr_memo { get; set; }
        public virtual DbSet<sk_tranerr_p> sk_tranerr_p { get; set; }
        public virtual DbSet<sk_trans> sk_trans { get; set; }
        public virtual DbSet<sk_trans_log> sk_trans_log { get; set; }
        public virtual DbSet<skr055_hist> skr055_hist { get; set; }
        public virtual DbSet<skr055_total> skr055_total { get; set; }
        public virtual DbSet<skr055_total_hist> skr055_total_hist { get; set; }
        public virtual DbSet<skr055_trans> skr055_trans { get; set; }
        public virtual DbSet<sys_base> sys_base { get; set; }
        public virtual DbSet<sys_baseBK> sys_baseBK { get; set; }
        public virtual DbSet<sys_calendar> sys_calendar { get; set; }
        public virtual DbSet<sys_demand> sys_demand { get; set; }
        public virtual DbSet<sys_ftpconnect> sys_ftpconnect { get; set; }
        public virtual DbSet<sys_proxy> sys_proxy { get; set; }
        public virtual DbSet<sys_relationship> sys_relationship { get; set; }
        public virtual DbSet<system_File_fx> system_File_fx { get; set; }
        public virtual DbSet<system_caw_transfer> system_caw_transfer { get; set; }
        public virtual DbSet<system_file> system_file { get; set; }
        public virtual DbSet<system_file2> system_file2 { get; set; }
        public virtual DbSet<system_file_backup> system_file_backup { get; set; }
        public virtual DbSet<system_file_log> system_file_log { get; set; }
        public virtual DbSet<system_log> system_log { get; set; }
        public virtual DbSet<system_request> system_request { get; set; }
        public virtual DbSet<tables_define> tables_define { get; set; }
        public virtual DbSet<tas_lk_total_hist> tas_lk_total_hist { get; set; }
        public virtual DbSet<tas_lk_trans> tas_lk_trans { get; set; }
        public virtual DbSet<td_bkamt> td_bkamt { get; set; }
        public virtual DbSet<td_brokerpay> td_brokerpay { get; set; }
        public virtual DbSet<td_dtl> td_dtl { get; set; }
        public virtual DbSet<td_int_file> td_int_file { get; set; }
        public virtual DbSet<td_mast> td_mast { get; set; }
        public virtual DbSet<td_register> td_register { get; set; }
        public virtual DbSet<td_report> td_report { get; set; }
        public virtual DbSet<tmpCNY> tmpCNY { get; set; }
        public virtual DbSet<tmp_FundData> tmp_FundData { get; set; }
        public virtual DbSet<tmp_FundIssuer> tmp_FundIssuer { get; set; }
        public virtual DbSet<tmp_FundIssuerRating> tmp_FundIssuerRating { get; set; }
        public virtual DbSet<tmp_FundUnitsData> tmp_FundUnitsData { get; set; }
        public virtual DbSet<tmp_Portfolio> tmp_Portfolio { get; set; }
        public virtual DbSet<tmp_acdesc> tmp_acdesc { get; set; }
        public virtual DbSet<tmp_check_000> tmp_check_000 { get; set; }
        public virtual DbSet<tmp_cm_fund_dividend> tmp_cm_fund_dividend { get; set; }
        public virtual DbSet<tmp_cm_fund_nav> tmp_cm_fund_nav { get; set; }
        public virtual DbSet<tmp_cm_fund_scalemper> tmp_cm_fund_scalemper { get; set; }
        public virtual DbSet<tmp_div1> tmp_div1 { get; set; }
        public virtual DbSet<tmp_ets_fnd_trade> tmp_ets_fnd_trade { get; set; }
        public virtual DbSet<tmp_ets_stk_trade> tmp_ets_stk_trade { get; set; }
        public virtual DbSet<tmp_fn_price> tmp_fn_price { get; set; }
        public virtual DbSet<tmp_fn_total_hist> tmp_fn_total_hist { get; set; }
        public virtual DbSet<tmp_fn_trans> tmp_fn_trans { get; set; }
        public virtual DbSet<tmp_fx_base> tmp_fx_base { get; set; }
        public virtual DbSet<tmp_lend_portia> tmp_lend_portia { get; set; }
        public virtual DbSet<tmp_r11> tmp_r11 { get; set; }
        public virtual DbSet<tmp_tb> tmp_tb { get; set; }
        public virtual DbSet<tmp_test_id> tmp_test_id { get; set; }
        public virtual DbSet<tmpfn_tran_0301> tmpfn_tran_0301 { get; set; }
        public virtual DbSet<tmpg1> tmpg1 { get; set; }
        public virtual DbSet<tmph1> tmph1 { get; set; }
        public virtual DbSet<tra_bnd_baladj> tra_bnd_baladj { get; set; }
        public virtual DbSet<tra_bnd_deal_rating> tra_bnd_deal_rating { get; set; }
        public virtual DbSet<tra_fx_deal_acc> tra_fx_deal_acc { get; set; }
        public virtual DbSet<user_act_log> user_act_log { get; set; }
        public virtual DbSet<user_prog> user_prog { get; set; }
        public virtual DbSet<user_prog_log> user_prog_log { get; set; }
        public virtual DbSet<user_pwd_log> user_pwd_log { get; set; }
        public virtual DbSet<user_sys> user_sys { get; set; }
        public virtual DbSet<user_sys_log> user_sys_log { get; set; }
        public virtual DbSet<vl_bankacct_sl2> vl_bankacct_sl2 { get; set; }
        public virtual DbSet<vl_fee_base> vl_fee_base { get; set; }
        public virtual DbSet<vl_gl_group> vl_gl_group { get; set; }
        public virtual DbSet<vl_gl_setup> vl_gl_setup { get; set; }
        public virtual DbSet<vl_gl_trans> vl_gl_trans { get; set; }
        public virtual DbSet<vl_maf01> vl_maf01 { get; set; }
        public virtual DbSet<vl_maf01_ifrs9> vl_maf01_ifrs9 { get; set; }
        public virtual DbSet<vl_maf01_len8> vl_maf01_len8 { get; set; }
        public virtual DbSet<vl_maf10> vl_maf10 { get; set; }
        public virtual DbSet<vl_maf10_fxbackup> vl_maf10_fxbackup { get; set; }
        public virtual DbSet<vl_maf10_upload> vl_maf10_upload { get; set; }
        public virtual DbSet<vl_mafAR> vl_mafAR { get; set; }
        public virtual DbSet<vl_mafAR_Fx> vl_mafAR_Fx { get; set; }
        public virtual DbSet<vl_mafAR_Fx_tmp> vl_mafAR_Fx_tmp { get; set; }
        public virtual DbSet<vl_mafAR_detail> vl_mafAR_detail { get; set; }
        public virtual DbSet<vl_mafAR_detail_2016> vl_mafAR_detail_2016 { get; set; }
        public virtual DbSet<vl_總帳科目停用清單> vl_總帳科目停用清單 { get; set; }
        public virtual DbSet<vl_總帳調整科目對照> vl_總帳調整科目對照 { get; set; }
        public virtual DbSet<wk_FundData> wk_FundData { get; set; }
        public virtual DbSet<wk_Portfolio> wk_Portfolio { get; set; }
        public virtual DbSet<wk_ets_fnd_trade> wk_ets_fnd_trade { get; set; }
        public virtual DbSet<wk_ets_stk_trade> wk_ets_stk_trade { get; set; }
        public virtual DbSet<wk_sb_trans> wk_sb_trans { get; set; }
        public virtual DbSet<wk_td_mast> wk_td_mast { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AML_Mapping>(entity =>
            {
                entity.HasKey(e => new { e.Source, e.code });

                entity.Property(e => e.Source)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<Audit_bd_base>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate).HasMaxLength(2);

                entity.Property(e => e.bond_alias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.bond_kind)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.bond_kind2).HasMaxLength(1);

                entity.Property(e => e.bond_name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.bond_name2).HasMaxLength(100);

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.bond_no2).HasMaxLength(20);

                entity.Property(e => e.bond_no3).HasMaxLength(20);

                entity.Property(e => e.cancel_type).HasMaxLength(2);

                entity.Property(e => e.capital_type).HasMaxLength(1);

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.insure_name).HasMaxLength(50);

                entity.Property(e => e.insure_type)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.int_date).HasMaxLength(10);

                entity.Property(e => e.int_date_first).HasMaxLength(10);

                entity.Property(e => e.issue_amt).HasColumnType("money");

                entity.Property(e => e.issue_co).HasMaxLength(6);

                entity.Property(e => e.issue_date).HasColumnType("smalldatetime");

                entity.Property(e => e.issue_period).HasColumnType("numeric(5, 2)");

                entity.Property(e => e.main_order).HasMaxLength(2);

                entity.Property(e => e.maturity_date).HasColumnType("smalldatetime");

                entity.Property(e => e.period_type).HasMaxLength(6);

                entity.Property(e => e.rate_type).HasMaxLength(6);

                entity.Property(e => e.remark).HasMaxLength(250);

                entity.Property(e => e.sk_code).HasMaxLength(10);

                entity.Property(e => e.tax_rate).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.tax_type).HasMaxLength(2);

                entity.Property(e => e.trade_market).HasMaxLength(4);

                entity.Property(e => e.tran_type).HasMaxLength(1);

                entity.Property(e => e.unityid).HasMaxLength(20);
            });

            modelBuilder.Entity<Audit_bd_ex_rate>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ccy_rate).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<Audit_bd_list>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate).HasMaxLength(2);

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(12);

                entity.Property(e => e.deal_no_old).HasMaxLength(12);

                entity.Property(e => e.fund_int).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.fund_int_ntd).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.net).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.net2).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.net2_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.net_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.par_value).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.par_value2).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.par_value2_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.par_value_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tan_net).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.tan_net_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<Audit_bd_trans_hist>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate).HasMaxLength(2);

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.amount).HasColumnType("money");

                entity.Property(e => e.amount_ntd).HasColumnType("money");

                entity.Property(e => e.before_tax).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.before_tax_ntd).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.broker_comm).HasColumnType("money");

                entity.Property(e => e.broker_comm_ntd).HasColumnType("money");

                entity.Property(e => e.cancel_type)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.ccy_rate).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.co_cost).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.co_cost_ntd).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(12);

                entity.Property(e => e.fund_cost).HasColumnType("money");

                entity.Property(e => e.fund_cost_ntd).HasColumnType("money");

                entity.Property(e => e.fund_int).HasColumnType("money");

                entity.Property(e => e.fund_int_ntd).HasColumnType("money");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.interest).HasColumnType("money");

                entity.Property(e => e.interest_ntd).HasColumnType("money");

                entity.Property(e => e.net).HasColumnType("money");

                entity.Property(e => e.net_ntd).HasColumnType("money");

                entity.Property(e => e.opt_premuim).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.opt_premuim_ntd).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.org_deal_no)
                    .IsRequired()
                    .HasMaxLength(12);

                entity.Property(e => e.par_value).HasColumnType("money");

                entity.Property(e => e.par_value_ntd).HasColumnType("money");

                entity.Property(e => e.real_rate).HasColumnType("numeric(18, 9)");

                entity.Property(e => e.settle_date).HasColumnType("datetime");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trans_tax).HasColumnType("money");

                entity.Property(e => e.trans_tax_ntd).HasColumnType("money");

                entity.Property(e => e.unit_price).HasColumnType("money");

                entity.Property(e => e.volumns).HasColumnType("money");

                entity.Property(e => e.yield).HasColumnType("money");
            });

            modelBuilder.Entity<Audit_ca_broker>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bank_account).HasMaxLength(20);

                entity.Property(e => e.bank_code).HasMaxLength(10);

                entity.Property(e => e.broker_account).HasMaxLength(20);

                entity.Property(e => e.broker_addr).HasMaxLength(50);

                entity.Property(e => e.broker_alias).HasMaxLength(20);

                entity.Property(e => e.broker_co)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.broker_e_name).HasMaxLength(50);

                entity.Property(e => e.broker_fax).HasMaxLength(50);

                entity.Property(e => e.broker_id).HasMaxLength(10);

                entity.Property(e => e.broker_name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.broker_tel_no).HasMaxLength(50);

                entity.Property(e => e.chk_rs).HasMaxLength(10);

                entity.Property(e => e.clear_bank_name).HasMaxLength(50);

                entity.Property(e => e.country_code).HasMaxLength(10);

                entity.Property(e => e.max_rate).HasColumnType("numeric(9, 2)");

                entity.Property(e => e.offten_use).HasMaxLength(2);

                entity.Property(e => e.public_code).HasMaxLength(4);

                entity.Property(e => e.rs_dvp_account).HasMaxLength(20);

                entity.Property(e => e.rs_fop_account).HasMaxLength(20);

                entity.Property(e => e.rs_ticket_account).HasMaxLength(20);

                entity.Property(e => e.zip_code).HasMaxLength(8);
            });

            modelBuilder.Entity<Audit_code_file>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.description)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.item_code)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.item_type)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.remark).HasMaxLength(20);
            });

            modelBuilder.Entity<Audit_fn_base>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.bank_no).HasMaxLength(10);

                entity.Property(e => e.branch_no).HasMaxLength(10);

                entity.Property(e => e.englishname)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.estimate)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.estimate_co)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.fn_bank_acct).HasMaxLength(20);

                entity.Property(e => e.fn_bank_title).HasMaxLength(100);

                entity.Property(e => e.fn_co)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.fn_excelname).HasMaxLength(50);

                entity.Property(e => e.fn_name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.fn_s_name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.fn_type)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.pay_type).HasMaxLength(1);
            });

            modelBuilder.Entity<Audit_fn_co>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.co_name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.co_s_name)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.englishname)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.fn_co)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.signature)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.unityid)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Audit_fn_trans>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.back_dealno).HasMaxLength(13);

                entity.Property(e => e.bank_account).HasMaxLength(50);

                entity.Property(e => e.bank_fee).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.broker_fee).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.co_cost).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.confirm_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(13);

                entity.Property(e => e.fn_co)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.fund_cost).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.ipo_amt).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ipo_chk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ipo_deal_no).HasMaxLength(13);

                entity.Property(e => e.lcm_amt).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.net).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.newconfirm_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.settledate_bill).HasColumnType("smalldatetime");

                entity.Property(e => e.tot_amt).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.tot_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.trade_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trust_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.unit_nav).HasColumnType("decimal(20, 8)");
            });

            modelBuilder.Entity<Audit_fund_file>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e._lock)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("lock");

                entity.Property(e => e.acc_cost).HasMaxLength(1);

                entity.Property(e => e.acc_op)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.addr1)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.addr2)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.attitude)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.ban)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.bank_no)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.bank_rate).HasColumnType("money");

                entity.Property(e => e.beg_date).HasColumnType("datetime");

                entity.Property(e => e.birth_date).HasColumnType("smalldatetime");

                entity.Property(e => e.branch_no)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.charge_man)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.end_date).HasColumnType("datetime");

                entity.Property(e => e.fax_no)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.fee).HasColumnType("money");

                entity.Property(e => e.fee_cost).HasMaxLength(1);

                entity.Property(e => e.fee_date).HasColumnType("smalldatetime");

                entity.Property(e => e.fee_rate).HasColumnType("money");

                entity.Property(e => e.fee_type)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.fund_name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.fund_name_vlife).HasMaxLength(50);

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.fund_no_vlife).HasMaxLength(10);

                entity.Property(e => e.fund_noa).HasMaxLength(2);

                entity.Property(e => e.ins_date).HasColumnType("smalldatetime");

                entity.Property(e => e.int_type)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.manage_fee).HasColumnType("money");

                entity.Property(e => e.manage_op)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.managefee_date).HasColumnType("smalldatetime");

                entity.Property(e => e.min_fee).HasColumnType("money");

                entity.Property(e => e.min_manage_fee).HasColumnType("money");

                entity.Property(e => e.nav).HasColumnType("money");

                entity.Property(e => e.p_type).HasMaxLength(1);

                entity.Property(e => e.sales_op)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.sb_op)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.sk_op)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.start_date).HasColumnType("datetime");

                entity.Property(e => e.stock_rate).HasColumnType("money");

                entity.Property(e => e.tel_no_1)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.tel_no_2)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.units).HasColumnType("money");

                entity.Property(e => e.zip_code_1)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.zip_code_2)
                    .IsRequired()
                    .HasMaxLength(5);
            });

            modelBuilder.Entity<Audit_fx_account_file>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate).HasMaxLength(2);

                entity.Property(e => e.account).HasMaxLength(20);

                entity.Property(e => e.attitude)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.bond_kind).HasMaxLength(10);

                entity.Property(e => e.ccy_type_base).HasMaxLength(10);

                entity.Property(e => e.chk_china)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.chk_taiwan)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.derivatives)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.fund_ename).HasMaxLength(50);

                entity.Property(e => e.fund_name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.fx_type).HasMaxLength(10);
            });

            modelBuilder.Entity<Audit_fx_base>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.accrucurr_code).HasMaxLength(10);

                entity.Property(e => e.cupon).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fair_level).HasMaxLength(2);

                entity.Property(e => e.isin).HasMaxLength(50);

                entity.Property(e => e.maturity).HasColumnType("datetime");

                entity.Property(e => e.secu_desc1).HasMaxLength(150);

                entity.Property(e => e.security_id)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.security_type).HasMaxLength(100);
            });

            modelBuilder.Entity<Audit_fx_code_File>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.class_code).HasMaxLength(5);

                entity.Property(e => e.class_type).HasMaxLength(255);

                entity.Property(e => e.eng_name).HasMaxLength(255);

                entity.Property(e => e.item_code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.item_type)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.memo).HasMaxLength(255);

                entity.Property(e => e.name).HasMaxLength(255);
            });

            modelBuilder.Entity<Audit_fx_deal_hist>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate).HasMaxLength(2);

                entity.Property(e => e.account).HasMaxLength(20);

                entity.Property(e => e.action).HasMaxLength(100);

                entity.Property(e => e.amount_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.attitude).HasMaxLength(1);

                entity.Property(e => e.bank_I_O).HasMaxLength(50);

                entity.Property(e => e.base_curr).HasMaxLength(50);

                entity.Property(e => e.bond_kind).HasMaxLength(10);

                entity.Property(e => e.curr_code).HasMaxLength(10);

                entity.Property(e => e.detail_transaction_type).HasMaxLength(100);

                entity.Property(e => e.effective_date).HasColumnType("datetime");

                entity.Property(e => e.ex_rate).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.exrate_benefit_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.exrate_benefit_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fee_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fee_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fee_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_base_count).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_local_count).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_ntd_count).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_no).HasMaxLength(2);

                entity.Property(e => e.fx_type).HasMaxLength(10);

                entity.Property(e => e.int_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.int_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.int_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_base).HasColumnType("decimal(27, 2)");

                entity.Property(e => e.net_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.ntd_rate).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.price_benefit_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.price_benefit_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.price_benefit_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.ref_account).HasMaxLength(20);

                entity.Property(e => e.security_id).HasMaxLength(20);

                entity.Property(e => e.security_type).HasMaxLength(50);

                entity.Property(e => e.settlement_date).HasColumnType("datetime");

                entity.Property(e => e.shares_units).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.trade_date).HasColumnType("datetime");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.tran_no).HasMaxLength(15);

                entity.Property(e => e.transaction_id).HasMaxLength(50);
            });

            modelBuilder.Entity<Audit_sb_broker>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bank_account).HasMaxLength(20);

                entity.Property(e => e.bank_code).HasMaxLength(10);

                entity.Property(e => e.broker_account).HasMaxLength(20);

                entity.Property(e => e.broker_addr).HasMaxLength(50);

                entity.Property(e => e.broker_alias).HasMaxLength(20);

                entity.Property(e => e.broker_co)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.broker_e_name).HasMaxLength(50);

                entity.Property(e => e.broker_fax).HasMaxLength(20);

                entity.Property(e => e.broker_id).HasMaxLength(15);

                entity.Property(e => e.broker_name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.broker_tel_no).HasMaxLength(20);

                entity.Property(e => e.country_code).HasMaxLength(10);

                entity.Property(e => e.max_rate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.offten_use).HasMaxLength(2);

                entity.Property(e => e.public_code).HasMaxLength(4);

                entity.Property(e => e.zip_code).HasMaxLength(8);
            });

            modelBuilder.Entity<Audit_sk_base>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.UnityID).HasMaxLength(30);

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.buss_type)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.c_date).HasColumnType("datetime");

                entity.Property(e => e.cap_amt).HasColumnType("money");

                entity.Property(e => e.ccy).HasMaxLength(10);

                entity.Property(e => e.d_date).HasColumnType("datetime");

                entity.Property(e => e.eps).HasColumnType("money");

                entity.Property(e => e.is_get_price).HasMaxLength(1);

                entity.Property(e => e.issue_co).HasMaxLength(6);

                entity.Property(e => e.mark_price).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.p_date).HasColumnType("datetime");

                entity.Property(e => e.p_price).HasColumnType("money");

                entity.Property(e => e.share_list).HasColumnType("money");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.sk_name)
                    .IsRequired()
                    .HasMaxLength(12);

                entity.Property(e => e.sk_type)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.total_share).HasColumnType("money");

                entity.Property(e => e.tran_out).HasMaxLength(1);
            });

            modelBuilder.Entity<Audit_sk_capital>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.capital_amt).HasColumnType("money");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.year_now)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<Audit_sk_hist>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.broker_comm).HasColumnType("money");

                entity.Property(e => e.broker_ref).HasMaxLength(50);

                entity.Property(e => e.broker_type)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.check_no).HasMaxLength(20);

                entity.Property(e => e.co_cost).HasColumnType("money");

                entity.Property(e => e.fund_cost).HasColumnType("money");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.net).HasColumnType("money");

                entity.Property(e => e.postal_tax).HasColumnType("money");

                entity.Property(e => e.price).HasColumnType("money");

                entity.Property(e => e.rec_status)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.ref_no).HasMaxLength(20);

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.sk_type).HasMaxLength(2);

                entity.Property(e => e.total_amt).HasColumnType("money");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(12);

                entity.Property(e => e.trans_tax).HasColumnType("money");

                entity.Property(e => e.volumn).HasColumnType("money");
            });

            modelBuilder.Entity<Audit_sk_price>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.high).HasColumnType("money");

                entity.Property(e => e.low).HasColumnType("money");

                entity.Property(e => e.nav).HasColumnType("money");

                entity.Property(e => e.price).HasColumnType("money");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.updown).HasColumnType("money");
            });

            modelBuilder.Entity<Audit_sk_total>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.sk_code, e.tran_date, e.sk_type, e.acccate });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasComment("帳戶別(fund_file.fund_no)");

                entity.Property(e => e.sk_code)
                    .HasMaxLength(6)
                    .HasComment("股票代號(sk_base.sk_code)");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("交易日期");

                entity.Property(e => e.sk_type).HasMaxLength(2);

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.avg_cost)
                    .HasColumnType("money")
                    .HasComment("平均成本");

                entity.Property(e => e.net)
                    .HasColumnType("money")
                    .HasComment("總成本");

                entity.Property(e => e.volumn)
                    .HasColumnType("money")
                    .HasComment("現存股數");
            });

            modelBuilder.Entity<Audit_sk_total_hist>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.sk_code, e.tran_date, e.sk_type, e.acccate });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasComment("帳戶別(fund_file.fund_no)");

                entity.Property(e => e.sk_code)
                    .HasMaxLength(6)
                    .HasComment("股票代號(sk_base.sk_code)");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("庫存日期");

                entity.Property(e => e.sk_type).HasMaxLength(2);

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.avg_cost)
                    .HasColumnType("money")
                    .HasComment("平均成本");

                entity.Property(e => e.net)
                    .HasColumnType("money")
                    .HasComment("總成本");

                entity.Property(e => e.volumn)
                    .HasColumnType("money")
                    .HasComment("現存股數");
            });

            modelBuilder.Entity<Audit_sk_trans>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.broker_comm).HasColumnType("money");

                entity.Property(e => e.broker_ref).HasMaxLength(50);

                entity.Property(e => e.broker_type)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.check_no).HasMaxLength(20);

                entity.Property(e => e.co_cost).HasColumnType("money");

                entity.Property(e => e.fund_cost).HasColumnType("money");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.net).HasColumnType("money");

                entity.Property(e => e.postal_tax).HasColumnType("money");

                entity.Property(e => e.price).HasColumnType("money");

                entity.Property(e => e.rec_status)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.ref_no).HasMaxLength(20);

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.sk_type).HasMaxLength(2);

                entity.Property(e => e.total_amt).HasColumnType("money");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(12);

                entity.Property(e => e.trans_tax).HasColumnType("money");

                entity.Property(e => e.volumn).HasColumnType("money");
            });

            modelBuilder.Entity<Audit_td_dtl>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.capital).HasColumnType("money");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.dtl_no)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.loan_dept)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.loan_memo)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Audit_td_int_file>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.beg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.capital).HasColumnType("money");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.int_date).HasColumnType("smalldatetime");

                entity.Property(e => e.int_rate).HasColumnType("money");

                entity.Property(e => e.int_type)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.interest).HasColumnType("decimal(19, 0)");

                entity.Property(e => e.net).HasColumnType("decimal(19, 0)");

                entity.Property(e => e.period_type)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.rec_date).HasColumnType("smalldatetime");

                entity.Property(e => e.recv_int).HasColumnType("decimal(19, 0)");

                entity.Property(e => e.recv_net).HasColumnType("decimal(19, 0)");

                entity.Property(e => e.recv_tax).HasColumnType("decimal(19, 0)");

                entity.Property(e => e.tax).HasColumnType("decimal(19, 0)");
            });

            modelBuilder.Entity<Audit_td_mast>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate).HasMaxLength(2);

                entity.Property(e => e.bank_no)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.beg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.branch_no)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.cancel_date).HasColumnType("smalldatetime");

                entity.Property(e => e.cancel_int).HasColumnType("money");

                entity.Property(e => e.cancel_net).HasColumnType("money");

                entity.Property(e => e.cancel_rate).HasColumnType("smallmoney");

                entity.Property(e => e.cancel_tax).HasColumnType("money");

                entity.Property(e => e.capital).HasColumnType("money");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.deposit_type)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.int_cont)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.int_rate).HasColumnType("smallmoney");

                entity.Property(e => e.int_type)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.period_type)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.td_no).HasMaxLength(50);
            });

            modelBuilder.Entity<Book>(entity =>
            {
                entity.Property(e => e.Author)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Book1>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.avg_cost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.baes_price_benefit)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.base_cost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.base_exrate_benefit)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.base_market_value)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.cost_rate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ex_rate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.fund_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.local_cost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.local_market_value)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.local_price_benefit)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.market_price)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.pool_no)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.sub_poo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.tran_date)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.volumn)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Book2>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.avg_cost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.baes_price_benefit)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.base_cost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.base_exrate_benefit)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.base_market_value)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.cost_rate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ex_rate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.fund_code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.local_cost)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.local_market_value)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.local_price_benefit)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.market_price)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.pool_no)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.sub_poo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.tran_date)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.volumn)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CAT080_Acct>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.amt_i).HasColumnType("money");

                entity.Property(e => e.amt_o).HasColumnType("money");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(30)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_date).HasColumnType("datetime");

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<CAT080_Bank>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.agent)
                    .IsRequired()
                    .HasMaxLength(30)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.amt_i).HasColumnType("money");

                entity.Property(e => e.amt_o).HasColumnType("money");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(30)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.brief_memo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_date).HasColumnType("datetime");

                entity.Property(e => e.deal_info)
                    .IsRequired()
                    .HasMaxLength(200)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dendbal).HasColumnType("money");

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_date_long)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Check_detail_no>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acct_date)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.amt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_Acct)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.change_date)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.check_no)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dept_no)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.pay_memo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.title)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<Check_detail_yes>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acct_date)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.amt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_acct)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.change_date)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.check_no)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dept_no)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pay_memo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.title)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<Fn_PaperData>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AssertRate).HasColumnType("money");

                entity.Property(e => e.PaperDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StockHolder).HasColumnType("money");

                entity.Property(e => e.WorkingMoney).HasColumnType("money");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.Property(e => e.ID).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.ID).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Account).HasMaxLength(50);

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Password).HasMaxLength(50);
            });

            modelBuilder.Entity<_SQL_Results__>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("'SQL Results$'");

                entity.Property(e => e.支票日期).HasColumnType("datetime");

                entity.Property(e => e.支票號碼)
                    .IsRequired()
                    .HasMaxLength(255)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.新請款序號).HasMaxLength(255);
            });

            modelBuilder.Entity<acct_dtl>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.amt).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cash_item)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_rate).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('NTD')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.deal_date).HasColumnType("smalldatetime");

                entity.Property(e => e.dept_no)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dr_cr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fc_amt)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ins_date).HasColumnType("smalldatetime");

                entity.Property(e => e.ins_op)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ins_time)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo)
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('  ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo2)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.recno)
                    .HasColumnType("decimal(10, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.vouno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<acct_dtl_bank>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.amt).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cash_item)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_rate)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('NTD')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.deal_date).HasColumnType("smalldatetime");

                entity.Property(e => e.dept_no)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dr_cr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fc_amt)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ins_date).HasColumnType("smalldatetime");

                entity.Property(e => e.ins_op)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ins_time)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo)
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('  ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo2)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.recno)
                    .HasColumnType("decimal(10, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.vouno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<acct_dtl_tmp2>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.amt1).HasColumnType("money");

                entity.Property(e => e.amt2).HasColumnType("money");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dept_no)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.dr_cr)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<acct_dtl_vlife>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.amt).HasColumnType("money");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.dr_cr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.vouno)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<bank_account>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.account_name).HasMaxLength(50);

                entity.Property(e => e.bank_account1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("bank_account")
                    .HasComment("銀行帳號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasComment("銀行代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasComment("幣別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.creat_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("開戶日期");

                entity.Property(e => e.destroy_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("銷戶日期");

                entity.Property(e => e.kind)
                    .HasMaxLength(1)
                    .HasComment("帳戶類別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.status)
                    .HasMaxLength(1)
                    .HasComment("使用狀態")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<bank_acct>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acct_memo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acct_rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.act_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_acct1)
                    .IsRequired()
                    .HasMaxLength(16)
                    .HasColumnName("bank_acct")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_acct2)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_acct_edi)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_no)
                    .IsRequired()
                    .HasMaxLength(3)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.branch_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('NTW')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.close_date).HasColumnType("smalldatetime");

                entity.Property(e => e.close_date2).HasColumnType("smalldatetime");

                entity.Property(e => e.emp_id_1)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.emp_id_2)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fedi_acct).HasDefaultValueSql("((0))");

                entity.Property(e => e.fedi_add_amt).HasColumnType("money");

                entity.Property(e => e.fedi_add_fee).HasColumnType("money");

                entity.Property(e => e.fedi_max_fee).HasColumnType("money");

                entity.Property(e => e.fedi_min_amt).HasColumnType("money");

                entity.Property(e => e.fedi_min_fee).HasColumnType("money");

                entity.Property(e => e.fee_type1).HasDefaultValueSql("('1')");

                entity.Property(e => e.fee_type2).HasDefaultValueSql("((230))");

                entity.Property(e => e.min_amt).HasColumnType("money");

                entity.Property(e => e.offset_acct).HasDefaultValueSql("((0))");

                entity.Property(e => e.rec_int_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('1')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.swift_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.tmp_acct).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<bank_acct_agent>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.tran_date, e.bank_acct, e.tran_type }, "BankAcctAgentUk1")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.Property(e => e.agent_emp)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.emp_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<bank_acct_bk>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acct_memo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acct_rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.act_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_acct2)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_acct_edi)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_no)
                    .IsRequired()
                    .HasMaxLength(3)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.branch_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.close_date).HasColumnType("smalldatetime");

                entity.Property(e => e.close_date2).HasColumnType("smalldatetime");

                entity.Property(e => e.emp_id_1)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.emp_id_2)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fedi_add_amt).HasColumnType("money");

                entity.Property(e => e.fedi_add_fee).HasColumnType("money");

                entity.Property(e => e.fedi_max_fee).HasColumnType("money");

                entity.Property(e => e.fedi_min_amt).HasColumnType("money");

                entity.Property(e => e.fedi_min_fee).HasColumnType("money");

                entity.Property(e => e.min_amt).HasColumnType("money");

                entity.Property(e => e.rec_int_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.swift_code)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<bank_acct_limit>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.bank_acct, e.ccy_type }, "BankAcctLimieUK1")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.limit_amt).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<bank_acct_log>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acct_memo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.acct_rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.act_type)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.bank_acct2)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.bank_acct_edi)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.bank_acct_log1)
                    .IsRequired()
                    .HasMaxLength(16)
                    .HasColumnName("bank_acct_log");

                entity.Property(e => e.bank_no)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.branch_no)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('NTW')");

                entity.Property(e => e.close_date).HasColumnType("smalldatetime");

                entity.Property(e => e.close_date2).HasColumnType("smalldatetime");

                entity.Property(e => e.emp_id_1)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.emp_id_2)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.fedi_acct).HasDefaultValueSql("((0))");

                entity.Property(e => e.fedi_add_amt).HasColumnType("money");

                entity.Property(e => e.fedi_add_fee).HasColumnType("money");

                entity.Property(e => e.fedi_max_fee).HasColumnType("money");

                entity.Property(e => e.fedi_min_amt).HasColumnType("money");

                entity.Property(e => e.fedi_min_fee).HasColumnType("money");

                entity.Property(e => e.fee_type1).HasDefaultValueSql("('1')");

                entity.Property(e => e.fee_type2).HasDefaultValueSql("((230))");

                entity.Property(e => e.min_amt).HasColumnType("money");

                entity.Property(e => e.offset_acct).HasDefaultValueSql("((0))");

                entity.Property(e => e.rec_int_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('1')");

                entity.Property(e => e.seq).ValueGeneratedOnAdd();

                entity.Property(e => e.status)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.swift_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.tmp_acct).HasDefaultValueSql("((0))");

                entity.Property(e => e.update_time).HasColumnType("datetime");
            });

            modelBuilder.Entity<bank_acct_predesign>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_acct2)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.predesign_account)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.predesign_bank_no)
                    .IsRequired()
                    .HasMaxLength(3)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.predesign_branch_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.predesign_title)
                    .IsRequired()
                    .HasMaxLength(60)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<bank_acct_rate>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.tran_date, e.ccy_type }, "BankAcctRateKey1")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.Property(e => e.acct_rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<bank_base>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.bank_no, e.branch_no }, "BankBase1")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.HasIndex(e => e.bank_no, "BankBase2")
                    .HasFillFactor(70);

                entity.Property(e => e.AML_mail)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AML_scan_dt)
                    .HasColumnType("date")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.bank_e_name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_l_name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_no)
                    .IsRequired()
                    .HasMaxLength(3)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.branch_name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.branch_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.branch_registration)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.fee_type1).HasDefaultValueSql("(1)");

                entity.Property(e => e.fee_type2).HasDefaultValueSql("(1)");

                entity.Property(e => e.head_office_name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.head_office_registration)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.head_office_representative)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.head_office_taxID)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.logtime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.loguser)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.rep_SEX)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.rep_english_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.rep_nationality)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.swift_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<bank_base_aml_nation>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Nation_ENNm)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nation_ISO_Cd)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Nation_Nm)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<bank_bk_endbal>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.tran_date, e.bank_acct, e.ccy_type }, "Uk_BankBkEndBal")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_l_acct)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bk_dendbal).HasColumnType("money");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('NTD')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dendbal).HasColumnType("money");

                entity.Property(e => e.file_name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.last_date).HasColumnType("smalldatetime");

                entity.Property(e => e.op_name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.rpt_temp_amt).HasColumnType("money");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<bank_bk_endbal_fc>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.tran_date, e.bank_acct, e.ccy_type }, "Uk_BankBkEndBal")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bk_dendbal).HasColumnType("money");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('NTD')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.file_name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.op_name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<bank_disk_l>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e._checked).HasColumnName("checked");

                entity.Property(e => e.amt).HasColumnType("money");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.checked_date).HasColumnType("smalldatetime");

                entity.Property(e => e.dr_cr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.seqno)
                    .HasColumnType("decimal(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<bank_disk_r>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e._checked).HasColumnName("checked");

                entity.Property(e => e.amt).HasColumnType("money");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.checked_date).HasColumnType("smalldatetime");

                entity.Property(e => e.dr_cr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.seqno)
                    .HasColumnType("decimal(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<bank_endbal>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.act_type, "BankEndBal1")
                    .HasFillFactor(70);

                entity.HasIndex(e => new { e.bank_acct, e.ccy_type }, "BankEndBalKey2")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.Property(e => e.acct_int).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.acct_rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.act_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_no)
                    .IsRequired()
                    .HasMaxLength(3)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.branch_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('NTW')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cost_rate).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.cr_amt).HasColumnType("money");

                entity.Property(e => e.dendbal).HasColumnType("money");

                entity.Property(e => e.dr_amt).HasColumnType("money");

                entity.Property(e => e.fc_cr_amt).HasColumnType("money");

                entity.Property(e => e.fc_dendbal).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.fc_dr_amt).HasColumnType("money");

                entity.Property(e => e.temp_dendbal).HasColumnType("decimal(19, 0)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<bank_endbal_hist>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.bank_acct, e.tran_date, e.ccy_type }, "BankEndBalH1")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.HasIndex(e => e.bank_no, "BankEndBalH2")
                    .HasFillFactor(70);

                entity.Property(e => e.acct_int).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.acct_rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.act_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_no)
                    .IsRequired()
                    .HasMaxLength(3)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.branch_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('NTW')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cost_rate).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.cr_amt).HasColumnType("money");

                entity.Property(e => e.dendbal).HasColumnType("money");

                entity.Property(e => e.dr_amt).HasColumnType("money");

                entity.Property(e => e.fc_cr_amt).HasColumnType("money");

                entity.Property(e => e.fc_dendbal).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.fc_dr_amt).HasColumnType("money");

                entity.Property(e => e.temp_dendbal).HasColumnType("decimal(19, 0)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<bank_inout_dtl>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.tran_date, e.acct_out }, "BankInOutDtl1")
                    .HasFillFactor(70);

                entity.HasIndex(e => new { e.tran_date, e.acct_in }, "BankInOutDtl2")
                    .HasFillFactor(70);

                entity.Property(e => e.acct_in)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acct_out)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.amt).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.bill_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('NTD')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.data_tp).HasDefaultValueSql("((1))");

                entity.Property(e => e.fc_amt).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.fc_fee).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.fc_net).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.fee).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.mark_no)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.marked).HasDefaultValueSql("(1)");

                entity.Property(e => e.net).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.pay_type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('匯款')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rec_status)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('未日結')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sub_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('1')");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<bank_int>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acc_date).HasColumnType("smalldatetime");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_rate)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('NTD')");

                entity.Property(e => e.fc_net).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.fc_tax).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.fc_total_int).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.net).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.rec_date).HasColumnType("smalldatetime");

                entity.Property(e => e.seqno)
                    .HasColumnType("decimal(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.tax).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.total_int).HasColumnType("decimal(18, 0)");
            });

            modelBuilder.Entity<bank_temp_trans>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.amt).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('NTD')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dr_cr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rec_status)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('未日結')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.recno)
                    .HasColumnType("decimal(10, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<bank_temp_trans_log>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.tran_date, e.bank_acct, e.ccy_type, e.err_no }, "BankTempTransLogUK1")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.Property(e => e._checked).HasColumnName("checked");

                entity.Property(e => e.acct_dendbal).HasColumnType("money");

                entity.Property(e => e.acct_memo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bk_dendbal).HasColumnType("money");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('NTD')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.err_memo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.file_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.op_name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.temp_amt).HasColumnType("money");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<bd_base>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.bond_no, "bdbasekey1")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor(70);

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_alias)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("債券簡稱")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_kind)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasComment("債券類別(code_file.item_type='B1')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_kind2)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("債券名稱")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_name2)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("債券編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_no2)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_no3)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cancel_type)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.capital_part)
                    .HasDefaultValueSql("((0))")
                    .HasComment("還本比率");

                entity.Property(e => e.capital_step)
                    .HasDefaultValueSql("((0))")
                    .HasComment("每幾年還本一次");

                entity.Property(e => e.capital_type)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("((0))")
                    .HasComment("還本方式(code_file.item_type='B3')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.capital_year)
                    .HasDefaultValueSql("((0))")
                    .HasComment("第幾年開始還本");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('NTD')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.coupon_rate).HasComment("票面利率");

                entity.Property(e => e.div_type).HasMaxLength(1);

                entity.Property(e => e.double_int_times).HasComment("每年複利次數");

                entity.Property(e => e.insure_name)
                    .HasMaxLength(50)
                    .HasComment("擔保機構")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.insure_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasComment("擔保類別(code_file.item_type='B2')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.int_date)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.int_date_first)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.int_times).HasComment("每年領息次數");

                entity.Property(e => e.issue_amt)
                    .HasColumnType("money")
                    .HasComment("發行金額");

                entity.Property(e => e.issue_co)
                    .HasMaxLength(6)
                    .HasComment("發行公司(bd_issueco.issue_co)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.issue_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("發行日期");

                entity.Property(e => e.issue_period)
                    .HasColumnType("numeric(5, 2)")
                    .HasComment("發行期間");

                entity.Property(e => e.main_order)
                    .HasMaxLength(2)
                    .HasComment("是否為主順位(1.主順位 2.次順位)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.maturity_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("到期日期");

                entity.Property(e => e.period_type)
                    .HasMaxLength(6)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rate_type)
                    .HasMaxLength(6)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.remark)
                    .HasMaxLength(250)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tax_rate)
                    .HasColumnType("numeric(18, 6)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.tax_type)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.trade_market).HasMaxLength(4);

                entity.Property(e => e.tran_type)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.unityid)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<bd_base_backup>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_alias)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_kind)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_kind2)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_name2)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_no2)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_no3)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cancel_type)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.capital_type)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.div_type).HasMaxLength(1);

                entity.Property(e => e.insure_name)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.insure_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.int_date)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.int_date_first)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.issue_amt).HasColumnType("money");

                entity.Property(e => e.issue_co)
                    .HasMaxLength(6)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.issue_date).HasColumnType("smalldatetime");

                entity.Property(e => e.issue_period).HasColumnType("numeric(5, 2)");

                entity.Property(e => e.main_order)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.maturity_date).HasColumnType("smalldatetime");

                entity.Property(e => e.period_type)
                    .HasMaxLength(6)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rate_type)
                    .HasMaxLength(6)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.remark)
                    .HasMaxLength(250)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tax_rate).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.tax_type)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.trade_market).HasMaxLength(4);

                entity.Property(e => e.tran_type)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.unityid)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<bd_bdr002d>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.tran_date, e.acccate, e.bond_kind, e.bond_no });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(9)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.acccate)
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_kind)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_no)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.all_interest).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.bond_name)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.buy_int).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ccy_type_tf)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('T')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_name)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.interest).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.kind_name)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.last_month).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.month_di)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.own_int).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.sell_int).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.tan_net).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.tan_net_change).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.tan_net_last_month).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.tan_net_rec).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.tan_net_sell).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.tan_net_this_month).HasColumnType("decimal(18, 0)");
            });

            modelBuilder.Entity<bd_bdr011>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.total_amt).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<bd_cash>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.bond_no, "BdCashKey1")
                    .HasFillFactor(70);

                entity.HasIndex(e => new { e.bond_no, e.pay_date }, "IX_bd_cash_1")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor(70);

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("債券編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.c_amt)
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("還本金額");

                entity.Property(e => e.i_amt)
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("領息金額");

                entity.Property(e => e.m_amt)
                    .HasColumnType("decimal(18, 5)")
                    .HasComment("賸餘本金");

                entity.Property(e => e.pay_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("還本領息日");
            });

            modelBuilder.Entity<bd_change>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.fund_no, e.tran_date, e.broker_code2 }, "IX_bd_change")
                    .HasFillFactor(70);

                entity.HasIndex(e => new { e.tran_date, e.action }, "IX_bd_change_1")
                    .HasFillFactor(70);

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("1>>010用，2>>012用")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action_type)
                    .HasColumnType("numeric(18, 0)")
                    .HasComment("1 表示 從broker_code>>broker_code2.....2表示從broker_code2>>broker_code");

                entity.Property(e => e.amount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code2)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.rec_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_model)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_model1)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_type)
                    .IsRequired()
                    .HasMaxLength(5)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_type1)
                    .IsRequired()
                    .HasMaxLength(5)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sheet).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.sheet_value).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<bd_change_hist>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.fund_no, e.tran_date, e.action, e.broker_code2 }, "IX_bd_change_hist")
                    .HasFillFactor(70);

                entity.HasIndex(e => new { e.tran_date, e.action }, "IX_bd_change_hist_1")
                    .HasFillFactor(70);

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action_type).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.amount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code2)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.rec_status)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_model)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_model1)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_type)
                    .IsRequired()
                    .HasMaxLength(5)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_type1)
                    .IsRequired()
                    .HasMaxLength(5)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sheet).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.sheet_value).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<bd_change_hist2023>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action_type).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.amount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code2)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.rec_status)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_model)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_model1)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_type)
                    .IsRequired()
                    .HasMaxLength(5)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_type1)
                    .IsRequired()
                    .HasMaxLength(5)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sheet).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.sheet_value).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<bd_changefund>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cancel_type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.change_tan_net).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.deal_no)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_cost).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.new_acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.new_deal_no)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.new_fund_cost).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.new_fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<bd_chgtype>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.accrued_tax)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.bef_int)
                    .HasColumnType("money")
                    .HasComment("改型前手息");

                entity.Property(e => e.before_tax)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.bond_no_new)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("新債券編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_no_old)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("舊債券編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.change_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("改型日期");

                entity.Property(e => e.change_type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("改型說明")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cost)
                    .HasColumnType("money")
                    .HasComment("改型成本");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("基金代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value)
                    .HasColumnType("money")
                    .HasComment("改型面額");
            });

            modelBuilder.Entity<bd_chk_oversell>(entity =>
            {
                entity.HasKey(e => new { e.tran_date, e.bond_no, e.acccate });

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.bond_no)
                    .HasMaxLength(40)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_kind).HasMaxLength(2);

                entity.Property(e => e.buy_par_value)
                    .HasColumnType("decimal(20, 0)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.sell_par_value)
                    .HasColumnType("decimal(20, 0)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.stock_par_value)
                    .HasColumnType("decimal(20, 0)")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<bd_ex_rate>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ccy_rate).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<bd_exclude_list>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.exclude_date).HasColumnType("datetime");
            });

            modelBuilder.Entity<bd_int>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.bond_no, e.end_date }, "IX_bd_int")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor(70);

                entity.HasIndex(e => e.bond_no, "IX_bd_int_1")
                    .HasFillFactor(70);

                entity.Property(e => e.YearDays).HasDefaultValueSql("(1)");

                entity.Property(e => e.base_cap).HasColumnType("money");

                entity.Property(e => e.base_int).HasColumnType("money");

                entity.Property(e => e.beg_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("計息起日");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("債券編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.end_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("計息止日");

                entity.Property(e => e.int_date).HasColumnType("datetime");

                entity.Property(e => e.int_rate)
                    .HasColumnType("money")
                    .HasComment("計息利率");

                entity.Property(e => e.period_days).HasComment("本期天數");

                entity.Property(e => e.period_int)
                    .HasColumnType("decimal(19, 5)")
                    .HasComment("本期利息");

                entity.Property(e => e.rec_cap).HasColumnType("money");

                entity.Property(e => e.rec_date).HasColumnType("datetime");

                entity.Property(e => e.rec_int).HasColumnType("decimal(19, 5)");

                entity.Property(e => e.rem_cap).HasColumnType("money");
            });

            modelBuilder.Entity<bd_inv>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.tran_date, e.bond_no, e.save_model, e.save_type, e.broker_code });

                entity.HasIndex(e => e.tran_date, "BdInvKey1")
                    .HasFillFactor(70);

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.bond_no)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_model)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_type)
                    .HasMaxLength(5)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.sheet).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.sheet_value).HasColumnType("numeric(18, 4)");
            });

            modelBuilder.Entity<bd_inv_hist>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.tran_date, e.bond_no, e.save_model, e.save_type, e.broker_code });

                entity.HasIndex(e => e.tran_date, "BdInvHistKey1")
                    .HasFillFactor(70);

                entity.HasIndex(e => e.bond_no, "bd_invhistKey3")
                    .HasFillFactor(70);

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.bond_no)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_model)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_type)
                    .HasMaxLength(5)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.sheet).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.sheet_value).HasColumnType("numeric(18, 4)");
            });

            modelBuilder.Entity<bd_issueco>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.UnityID).HasMaxLength(30);

                entity.Property(e => e.bank_no).HasMaxLength(10);

                entity.Property(e => e.guarantee).HasColumnType("money");

                entity.Property(e => e.issue_co)
                    .HasMaxLength(6)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.issue_name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.issue_type).HasMaxLength(10);

                entity.Property(e => e.no_guarantee).HasColumnType("money");

                entity.Property(e => e.no_guarantee1).HasColumnType("money");

                entity.Property(e => e.no_guarantee2).HasColumnType("money");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.total).HasColumnType("numeric(18, 6)");
            });

            modelBuilder.Entity<bd_list>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.fund_no, e.tran_date, e.deal_no }, "IX_bd_list")
                    .HasFillFactor(70);

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.deal_no_old)
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fas_deal_no)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.fas_no)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.fas_org_no)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.fund_int).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.fund_int_ntd).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.net).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.net2).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.net2_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.net_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.par_value).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.par_value2).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.par_value2_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.par_value_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tan_net).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.tan_net_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<bd_list_bk_A03106>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.deal_no_old)
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_int).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.fund_int_ntd).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.net).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.net2).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.net2_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.net_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.par_value).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.par_value2).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.par_value2_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.par_value_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tan_net).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.tan_net_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<bd_newdeal>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.action)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.deal_no)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.deal_no_new)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<bd_price>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.sys_no, e.tran_date, e.bond_no }, "IX_bd_price")
                    .HasFillFactor(70);

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.seq_no)
                    .HasColumnType("decimal(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.sys_no)
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.unit_price).HasColumnType("decimal(18, 9)");
            });

            modelBuilder.Entity<bd_reccash>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.fund_no, e.bond_no, e.pay_date }, "IX_bd_reccash")
                    .HasFillFactor(70);

                entity.Property(e => e.account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.accrued_tax).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.accrued_tax_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.before_tax).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.before_tax_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code2)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_rate).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.o_amt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.o_amt_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.pay_date).HasColumnType("smalldatetime");

                entity.Property(e => e.pay_type)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rec_cap_benfit)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.rec_cap_benfit_ntd)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.rec_cocost01)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.rec_cocost01_ntd)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.rec_cocost02)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.rec_cocost02_ntd)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.rec_date).HasColumnType("smalldatetime");

                entity.Property(e => e.rec_status)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_model)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_type)
                    .HasMaxLength(5)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.serial)
                    .HasColumnType("decimal(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.tan_net)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.tan_net_ntd)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<bd_reccash_backup>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.accrued_tax).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.accrued_tax_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.before_tax).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.before_tax_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code2)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_rate).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.o_amt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.o_amt_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.pay_date).HasColumnType("smalldatetime");

                entity.Property(e => e.pay_type)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rec_cap_benfit).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.rec_cap_benfit_ntd).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.rec_cocost01).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.rec_cocost01_ntd).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.rec_cocost02).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.rec_cocost02_ntd).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.rec_date).HasColumnType("smalldatetime");

                entity.Property(e => e.rec_status)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_model)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_type)
                    .HasMaxLength(5)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.serial)
                    .HasColumnType("decimal(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.tan_net).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.tan_net_ntd).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<bd_reccash_trans>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_kind)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_rate).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.co_value).HasColumnType("money");

                entity.Property(e => e.co_value_ntd).HasColumnType("money");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fee).HasColumnType("money");

                entity.Property(e => e.fee_ntd).HasColumnType("money");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value).HasColumnType("money");

                entity.Property(e => e.par_value_ntd).HasColumnType("money");

                entity.Property(e => e.pay_date).HasColumnType("smalldatetime");

                entity.Property(e => e.rec_cap).HasColumnType("money");

                entity.Property(e => e.rec_cap_benfit).HasColumnType("money");

                entity.Property(e => e.rec_cap_benfit_ntd).HasColumnType("money");

                entity.Property(e => e.rec_cap_ntd).HasColumnType("money");

                entity.Property(e => e.rec_cost).HasColumnType("money");

                entity.Property(e => e.rec_cost_ntd).HasColumnType("money");

                entity.Property(e => e.rec_date).HasColumnType("smalldatetime");

                entity.Property(e => e.rec_int).HasColumnType("money");

                entity.Property(e => e.rec_int_ntd).HasColumnType("money");

                entity.Property(e => e.serial)
                    .HasColumnType("decimal(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.tan_net).HasColumnType("money");

                entity.Property(e => e.tan_net_ntd).HasColumnType("money");

                entity.Property(e => e.tax1).HasColumnType("money");

                entity.Property(e => e.tax1_ntd).HasColumnType("money");

                entity.Property(e => e.tax2).HasColumnType("money");

                entity.Property(e => e.tax2_ntd).HasColumnType("money");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<bd_report>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.action).HasMaxLength(100);

                entity.Property(e => e.bond_alias).HasMaxLength(150);

                entity.Property(e => e.bond_kind_c).HasMaxLength(255);

                entity.Property(e => e.bond_no).HasMaxLength(20);

                entity.Property(e => e.broker_alias)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.ccy_type).HasMaxLength(10);

                entity.Property(e => e.fund_gainloss).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.par_value).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.pay_amt).HasColumnType("decimal(28, 9)");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.unit_price).HasColumnType("decimal(38, 11)");

                entity.Property(e => e.yield).HasColumnType("money");
            });

            modelBuilder.Entity<bd_sheet_inv>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.tran_date, e.bond_no, e.par_value_sheet });

                entity.HasIndex(e => e.tran_date, "BdSheetInvKey1")
                    .HasFillFactor(70);

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.bond_no)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value_sheet).HasColumnType("money");

                entity.Property(e => e.sheet).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<bd_sheet_inv_hist>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.tran_date, e.bond_no, e.par_value_sheet });

                entity.HasIndex(e => new { e.fund_no, e.tran_date, e.bond_no, e.par_value_sheet }, "BdSheetInvHistKey1")
                    .HasFillFactor(70);

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.bond_no)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value_sheet).HasColumnType("money");

                entity.Property(e => e.sheet).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<bd_sheet_trans>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.fund_no, e.tran_date, e.action_type, e.buysell_opt, e.deal_no_sheet }, "IX_bd_sheet_trans")
                    .HasFillFactor(70);

                entity.Property(e => e.action_type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.buysell_opt)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.deal_no_sheet)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value_sheet).HasColumnType("money");

                entity.Property(e => e.sheet).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<bd_sheet_trans_hist>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.fund_no, e.tran_date, e.action_type, e.buysell_opt, e.deal_no_sheet }, "IX_bd_sheet_trans_hist")
                    .HasFillFactor(70);

                entity.Property(e => e.action_type)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.buysell_opt)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.deal_no_sheet)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value_sheet).HasColumnType("money");

                entity.Property(e => e.sheet).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<bd_tanbase>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.deal_no, e.tran_date }, "BdTanBaseUniqueKey1")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor(70);

                entity.HasIndex(e => new { e.fund_no, e.deal_no, e.tran_date, e.bond_no }, "IX_bd_tanbase")
                    .HasFillFactor(70);

                entity.Property(e => e.beg_date).HasColumnType("datetime");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.buy_date).HasColumnType("smalldatetime");

                entity.Property(e => e.day).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.interest).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.net).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.net2).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.par_value).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.real_interest).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.real_rate).HasColumnType("numeric(18, 9)");

                entity.Property(e => e.tan_amt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.tran_date).HasColumnType("datetime");
            });

            modelBuilder.Entity<bd_tanbase_beeline>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.buy_date).HasColumnType("smalldatetime");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.par_value).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.real_end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tan_net).HasColumnType("decimal(18, 0)");
            });

            modelBuilder.Entity<bd_tmpbdr23>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bond_name)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.coupon_rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.maturity_date).HasColumnType("smalldatetime");

                entity.Property(e => e.p1)
                    .HasColumnType("decimal(20, 4)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.p2)
                    .HasColumnType("decimal(20, 4)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.p3)
                    .HasColumnType("decimal(20, 4)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.p4)
                    .HasColumnType("decimal(20, 4)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.p5)
                    .HasColumnType("decimal(20, 4)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.p6)
                    .HasColumnType("decimal(20, 4)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.userid)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<bd_total>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.bond_no, e.tran_date, e.deal_no, e.acccate });

                entity.HasIndex(e => new { e.fund_no, e.tran_date, e.bond_no, e.cancel_type }, "IX_bd_total")
                    .HasFillFactor(70);

                entity.HasIndex(e => new { e.fund_no, e.tran_date }, "IX_bd_total_1")
                    .HasFillFactor(70);

                entity.HasIndex(e => e.tran_date, "IX_bd_total_2")
                    .HasFillFactor(70);

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .HasComment("基金代號(fund_file.fund_no)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_no)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .HasComment("債券編號(bd_base.bond_no)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("庫存日期");

                entity.Property(e => e.deal_no)
                    .HasMaxLength(12)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('01')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bef_int).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.bef_int_ntd).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.before_tax).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.before_tax_ntd).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.cancel_type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('01')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.net)
                    .HasColumnType("numeric(18, 0)")
                    .HasComment("現存成本");

                entity.Property(e => e.net2).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.net2_deal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.net2_deal_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.net2_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.net_ntd)
                    .HasColumnType("numeric(18, 0)")
                    .HasComment("現存成本");

                entity.Property(e => e.par_value)
                    .HasColumnType("numeric(18, 0)")
                    .HasComment("現存面額");

                entity.Property(e => e.par_value_deal).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.par_value_deal_ntd).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.par_value_ntd)
                    .HasColumnType("numeric(18, 0)")
                    .HasComment("現存面額");

                entity.Property(e => e.tan_net).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.tan_net_ntd).HasColumnType("numeric(18, 4)");
            });

            modelBuilder.Entity<bd_total_hist>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.bond_no, e.tran_date, e.deal_no, e.acccate });

                entity.HasIndex(e => e.tran_date, "BdTotalKey1")
                    .HasFillFactor(70);

                entity.HasIndex(e => new { e.fund_no, e.bond_no, e.tran_date, e.cancel_type }, "IX_bd_total_hist")
                    .HasFillFactor(70);

                entity.HasIndex(e => new { e.fund_no, e.tran_date }, "IX_bd_total_hist_2")
                    .HasFillFactor(70);

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_no)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.deal_no)
                    .HasMaxLength(12)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('01')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bef_int).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.bef_int_ntd).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.before_tax).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.before_tax_ntd).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.cancel_type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('01')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.net).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.net2).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.net2_deal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.net2_deal_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.net2_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.net_ntd)
                    .HasColumnType("numeric(18, 0)")
                    .HasComment("現存成本");

                entity.Property(e => e.par_value).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.par_value_deal).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.par_value_deal_ntd).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.par_value_ntd)
                    .HasColumnType("numeric(18, 0)")
                    .HasComment("現存面額");

                entity.Property(e => e.tan_net).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.tan_net_ntd).HasColumnType("numeric(18, 4)");
            });

            modelBuilder.Entity<bd_total_hist20230110>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bef_int).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.bef_int_ntd).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.before_tax).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.before_tax_ntd).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cancel_type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.net).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.net2).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.net2_deal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.net2_deal_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.net2_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.net_ntd).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.par_value).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.par_value_deal).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.par_value_deal_ntd).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.par_value_ntd).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.tan_net).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.tan_net_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<bd_trans>(entity =>
            {
                entity.HasKey(e => e.deal_no);

                entity.HasIndex(e => new { e.fund_no, e.tran_date, e.broker_code, e.bond_no }, "IX_bd_trans")
                    .HasFillFactor(70);

                entity.HasIndex(e => e.tran_date, "IX_bd_trans_1")
                    .HasFillFactor(70);

                entity.Property(e => e.deal_no)
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.amount).HasColumnType("money");

                entity.Property(e => e.amount_ntd).HasColumnType("money");

                entity.Property(e => e.approve)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.before_tax)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.before_tax_ntd).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_comm).HasColumnType("money");

                entity.Property(e => e.broker_comm_ntd).HasColumnType("money");

                entity.Property(e => e.cancel_type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_rate).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.co_cost)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.co_cost_ntd)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.etl_transaction_dt).HasColumnType("date");

                entity.Property(e => e.ets_trade_no)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.fas_deal_no)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.fno)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.fund_cost).HasColumnType("money");

                entity.Property(e => e.fund_cost_ntd).HasColumnType("money");

                entity.Property(e => e.fund_int).HasColumnType("money");

                entity.Property(e => e.fund_int_ntd).HasColumnType("money");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.interest).HasColumnType("money");

                entity.Property(e => e.interest_ntd).HasColumnType("money");

                entity.Property(e => e.manager)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.net).HasColumnType("money");

                entity.Property(e => e.net_ntd).HasColumnType("money");

                entity.Property(e => e.opt_premuim).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.opt_premuim_ntd).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.org_deal_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value).HasColumnType("money");

                entity.Property(e => e.par_value_ntd).HasColumnType("money");

                entity.Property(e => e.real_rate).HasColumnType("numeric(18, 9)");

                entity.Property(e => e.settle_date).HasColumnType("datetime");

                entity.Property(e => e.trade_rule)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.trader)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trans_tax).HasColumnType("money");

                entity.Property(e => e.trans_tax_ntd).HasColumnType("money");

                entity.Property(e => e.unit_price).HasColumnType("money");

                entity.Property(e => e.volumns).HasColumnType("money");

                entity.Property(e => e.yield).HasColumnType("money");
            });

            modelBuilder.Entity<bd_trans_hist>(entity =>
            {
                entity.HasKey(e => e.deal_no);

                entity.HasIndex(e => new { e.fund_no, e.deal_no, e.bond_no, e.action }, "BdTransHistKey1")
                    .HasFillFactor(70);

                entity.HasIndex(e => e.settle_date, "bd_trans_hist_settledate")
                    .HasFillFactor(70);

                entity.HasIndex(e => e.tran_date, "bd_trans_hist_tran_date")
                    .HasFillFactor(70);

                entity.Property(e => e.deal_no)
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.amount).HasColumnType("money");

                entity.Property(e => e.amount_ntd).HasColumnType("money");

                entity.Property(e => e.approve)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.before_tax)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.before_tax_ntd)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_comm).HasColumnType("money");

                entity.Property(e => e.broker_comm_ntd).HasColumnType("money");

                entity.Property(e => e.cancel_type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_rate).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.co_cost)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.co_cost_ntd)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.etl_transaction_dt).HasColumnType("date");

                entity.Property(e => e.ets_trade_no)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.fas_deal_no)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.fno)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.fund_cost).HasColumnType("money");

                entity.Property(e => e.fund_cost_ntd).HasColumnType("money");

                entity.Property(e => e.fund_int).HasColumnType("money");

                entity.Property(e => e.fund_int_ntd).HasColumnType("money");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.interest).HasColumnType("money");

                entity.Property(e => e.interest_ntd).HasColumnType("money");

                entity.Property(e => e.manager)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.net).HasColumnType("money");

                entity.Property(e => e.net_ntd).HasColumnType("money");

                entity.Property(e => e.opt_premuim).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.opt_premuim_ntd).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.org_deal_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value).HasColumnType("money");

                entity.Property(e => e.par_value_ntd).HasColumnType("money");

                entity.Property(e => e.real_rate).HasColumnType("numeric(18, 9)");

                entity.Property(e => e.settle_date).HasColumnType("datetime");

                entity.Property(e => e.trade_rule)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.trader)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trans_tax).HasColumnType("money");

                entity.Property(e => e.trans_tax_ntd).HasColumnType("money");

                entity.Property(e => e.unit_price).HasColumnType("money");

                entity.Property(e => e.volumns).HasColumnType("money");

                entity.Property(e => e.yield).HasColumnType("money");
            });

            modelBuilder.Entity<bd_trans_hist_backup>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.amount).HasColumnType("money");

                entity.Property(e => e.amount_ntd).HasColumnType("money");

                entity.Property(e => e.approve)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.before_tax).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.before_tax_ntd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_comm).HasColumnType("money");

                entity.Property(e => e.broker_comm_ntd).HasColumnType("money");

                entity.Property(e => e.cancel_type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_rate).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.co_cost).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.co_cost_ntd).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.etl_transaction_dt).HasColumnType("date");

                entity.Property(e => e.ets_trade_no)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.fas_deal_no)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.fno)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.fund_cost).HasColumnType("money");

                entity.Property(e => e.fund_cost_ntd).HasColumnType("money");

                entity.Property(e => e.fund_int).HasColumnType("money");

                entity.Property(e => e.fund_int_ntd).HasColumnType("money");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.interest).HasColumnType("money");

                entity.Property(e => e.interest_ntd).HasColumnType("money");

                entity.Property(e => e.manager)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.net).HasColumnType("money");

                entity.Property(e => e.net_ntd).HasColumnType("money");

                entity.Property(e => e.opt_premuim).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.opt_premuim_ntd).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.org_deal_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value).HasColumnType("money");

                entity.Property(e => e.par_value_ntd).HasColumnType("money");

                entity.Property(e => e.real_rate).HasColumnType("numeric(18, 9)");

                entity.Property(e => e.settle_date).HasColumnType("datetime");

                entity.Property(e => e.trade_rule)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.trader)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trans_tax).HasColumnType("money");

                entity.Property(e => e.trans_tax_ntd).HasColumnType("money");

                entity.Property(e => e.unit_price).HasColumnType("money");

                entity.Property(e => e.volumns).HasColumnType("money");

                entity.Property(e => e.yield).HasColumnType("money");
            });

            modelBuilder.Entity<bd_transtempCB>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.amount).HasColumnType("money");

                entity.Property(e => e.before_tax).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_comm).HasColumnType("money");

                entity.Property(e => e.cancel_type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.co_cost).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_cost).HasColumnType("money");

                entity.Property(e => e.fund_int).HasColumnType("money");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.interest).HasColumnType("money");

                entity.Property(e => e.net).HasColumnType("money");

                entity.Property(e => e.opt_premuim).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.org_deal_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value).HasColumnType("money");

                entity.Property(e => e.real_rate).HasColumnType("numeric(18, 9)");

                entity.Property(e => e.settle_date).HasColumnType("datetime");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trans_tax).HasColumnType("money");

                entity.Property(e => e.unit_price).HasColumnType("money");

                entity.Property(e => e.volumns).HasColumnType("money");

                entity.Property(e => e.yield).HasColumnType("money");
            });

            modelBuilder.Entity<bdrs_account>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.account_code)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account_name)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account_section)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<bdrs_cal>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.cal_date, e.deal_no, e.bond_no });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cal_date)
                    .HasColumnType("datetime")
                    .HasComment("季底日期");

                entity.Property(e => e.deal_no)
                    .HasMaxLength(12)
                    .HasComment("交易編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_no)
                    .HasMaxLength(20)
                    .HasComment("債券編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasComment("交易對手")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cal_amt).HasColumnType("decimal(24, 4)");

                entity.Property(e => e.cal_day).HasDefaultValueSql("(0)");

                entity.Property(e => e.cal_month).HasComment("季底月");

                entity.Property(e => e.cal_next_amt)
                    .HasColumnType("decimal(24, 4)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.cal_next_day).HasDefaultValueSql("(0)");

                entity.Property(e => e.cal_year).HasComment("季底年");

                entity.Property(e => e.end_date)
                    .HasColumnType("datetime")
                    .HasComment("到期日期");

                entity.Property(e => e.int_fee)
                    .HasColumnType("decimal(24, 4)")
                    .HasComment("利息費用");

                entity.Property(e => e.pay_price)
                    .HasColumnType("decimal(24, 4)")
                    .HasComment("到期償還金額");

                entity.Property(e => e.tran_date)
                    .HasColumnType("datetime")
                    .HasComment("交易起始日");

                entity.Property(e => e.tran_days).HasComment("天期");

                entity.Property(e => e.tran_price)
                    .HasColumnType("decimal(24, 4)")
                    .HasComment("交易金額");

                entity.Property(e => e.tran_rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("交易利率");

                entity.Property(e => e.tran_value)
                    .HasColumnType("decimal(24, 4)")
                    .HasComment("交易面額");
            });

            modelBuilder.Entity<bdrs_cal_hist>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("債券編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .HasMaxLength(4)
                    .HasComment("交易對手")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cal_amt).HasColumnType("decimal(24, 4)");

                entity.Property(e => e.cal_date)
                    .HasColumnType("datetime")
                    .HasComment("季底日期");

                entity.Property(e => e.cal_day).HasDefaultValueSql("(0)");

                entity.Property(e => e.cal_month).HasComment("季底月");

                entity.Property(e => e.cal_next_amt)
                    .HasColumnType("decimal(24, 4)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.cal_next_day).HasDefaultValueSql("(0)");

                entity.Property(e => e.cal_year).HasComment("季底年");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasComment("交易編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.end_date)
                    .HasColumnType("datetime")
                    .HasComment("到期日期");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.int_fee)
                    .HasColumnType("decimal(24, 4)")
                    .HasComment("利息費用");

                entity.Property(e => e.pay_price)
                    .HasColumnType("decimal(24, 4)")
                    .HasComment("到期償還金額");

                entity.Property(e => e.tran_date)
                    .HasColumnType("datetime")
                    .HasComment("交易起始日");

                entity.Property(e => e.tran_days).HasComment("天期");

                entity.Property(e => e.tran_price)
                    .HasColumnType("decimal(24, 4)")
                    .HasComment("交易金額");

                entity.Property(e => e.tran_rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("交易利率");

                entity.Property(e => e.tran_value)
                    .HasColumnType("decimal(24, 4)")
                    .HasComment("交易面額");
            });

            modelBuilder.Entity<bdrs_fundacct>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.account_code)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')")
                    .HasComment("帳號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account_name)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("戶名")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("基金代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<bdrs_inventory>(entity =>
            {
                entity.HasKey(e => e.bond_no);

                entity.Property(e => e.bond_no)
                    .HasMaxLength(20)
                    .HasComment("債券編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.last_update)
                    .HasColumnType("datetime")
                    .HasComment("最後修改時間(年月日時分秒)");

                entity.Property(e => e.limit_value)
                    .HasColumnType("decimal(24, 4)")
                    .HasComment("允許承作面額 (可以質借的上限)");

                entity.Property(e => e.par_value)
                    .HasColumnType("decimal(24, 4)")
                    .HasComment("庫存面額(現庫存中的總面額)");

                entity.Property(e => e.pawned_value)
                    .HasColumnType("decimal(24, 4)")
                    .HasComment("己質借面額");

                entity.Property(e => e.spare_value)
                    .HasColumnType("decimal(25, 4)")
                    .HasComputedColumnSql("([limit_value] - [pawned_value])", false);

                entity.Property(e => e.user_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("使用者代號  ")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<bdrs_inventory_log>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.last_update).HasColumnType("datetime");

                entity.Property(e => e.limit_value).HasColumnType("decimal(24, 4)");

                entity.Property(e => e.par_value).HasColumnType("decimal(24, 4)");

                entity.Property(e => e.pawned_value).HasColumnType("decimal(24, 4)");

                entity.Property(e => e.spare_value).HasColumnType("decimal(25, 4)");

                entity.Property(e => e.user_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<bdrs_relation>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.action).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.bdchange_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.rsdeal_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rstype).HasComment("0賣 1買");

                entity.Property(e => e.tran_date).HasColumnType("datetime");
            });

            modelBuilder.Entity<bdrs_trans>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.act_end_date).HasColumnType("datetime");

                entity.Property(e => e.act_int_fee).HasColumnType("money");

                entity.Property(e => e.act_no1)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.act_pay_price).HasColumnType("money");

                entity.Property(e => e.act_rate).HasColumnType("smallmoney");

                entity.Property(e => e.act_tax).HasColumnType("money");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_value).HasColumnType("money");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dtl_status).HasDefaultValueSql("(0)");

                entity.Property(e => e.end_date).HasColumnType("datetime");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.int_fee).HasColumnType("money");

                entity.Property(e => e.new_dealno)
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.no1)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.note)
                    .HasMaxLength(500)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pay_price).HasColumnType("decimal(24, 4)");

                entity.Property(e => e.tax).HasColumnType("money");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.tran_price).HasColumnType("money");

                entity.Property(e => e.tran_rate).HasColumnType("decimal(24, 4)");
            });

            modelBuilder.Entity<bdrs_trans_new>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.new_deal_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<bdrs_trans_ref>(entity =>
            {
                entity.HasKey(e => new { e.rec_status, e.fund_no, e.bond_no, e.deal_no });

                entity.Property(e => e.rec_status).HasComment("狀態");

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasComment("基金代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_no)
                    .HasMaxLength(20)
                    .HasComment("債券代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.deal_no)
                    .HasMaxLength(12)
                    .HasComment("交易編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_value)
                    .HasColumnType("decimal(24, 4)")
                    .HasComment("債券面額");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasComment("交易對手(券商)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.end_date)
                    .HasColumnType("datetime")
                    .HasComment("到期日期(預計)");

                entity.Property(e => e.int_fee)
                    .HasColumnType("decimal(24, 4)")
                    .HasComment("利息費用(預計)");

                entity.Property(e => e.new_deal_no_01)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.new_deal_no_02)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pay_price)
                    .HasColumnType("decimal(24, 4)")
                    .HasComment("到期償還金額(預計)");

                entity.Property(e => e.tran_date)
                    .HasColumnType("datetime")
                    .HasComment("交易日期");

                entity.Property(e => e.tran_days).HasComment("承作天數(預計)");

                entity.Property(e => e.tran_price)
                    .HasColumnType("decimal(24, 4)")
                    .HasComment("交易金額");

                entity.Property(e => e.tran_rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("承作利率(預計)");
            });

            modelBuilder.Entity<ca_broker>(entity =>
            {
                entity.HasKey(e => new { e.broker_co, e.broker_code })
                    .HasName("PK_sb_broker");

                entity.HasIndex(e => e.is_bank, "ind_bank")
                    .HasFillFactor(70);

                entity.HasIndex(e => e.broker_code, "ind_broker_code")
                    .HasFillFactor(70);

                entity.HasIndex(e => e.broker_name, "ind_broker_name")
                    .HasFillFactor(70);

                entity.HasIndex(e => e.broker_name, "ind_brokername")
                    .HasFillFactor(70);

                entity.Property(e => e.broker_co)
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_addr)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_alias)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_e_name)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_fax)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_id)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_tel_no)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.chk_rs).HasMaxLength(10);

                entity.Property(e => e.clear_bank_name).HasMaxLength(50);

                entity.Property(e => e.country_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.max_rate).HasColumnType("numeric(9, 2)");

                entity.Property(e => e.offten_use)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.public_code)
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.relation_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("(N'F')");

                entity.Property(e => e.rs_dvp_account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rs_fop_account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rs_ticket_account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.zip_code)
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<ca_brokerpay>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acct_type)
                    .HasMaxLength(1)
                    .HasComment("RP(1-淨額法,2-總額法)SB(1-買賣斷非TB,2-非買賣斷TB,3-非買賣斷非TB)");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.buy_amt)
                    .HasColumnType("decimal(18, 0)")
                    .HasComment("應付金額");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pay_account)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pay_net).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.pay_title)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pay_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sold_amt)
                    .HasColumnType("decimal(18, 0)")
                    .HasComment("應收金額");

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.tran_date).HasColumnType("datetime");
            });

            modelBuilder.Entity<ca_car051_memo>(entity =>
            {
                entity.HasKey(e => new { e.memo_dept, e.tran_date, e.memo_no });

                entity.Property(e => e.memo_dept)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.memo_amt).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.memo_name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<ca_car051_memo_bk>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.memo_amt).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.memo_dept)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo_name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ca_cashitem>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.description1)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.drcr).HasMaxLength(2);

                entity.Property(e => e.item_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_no).HasMaxLength(10);
            });

            modelBuilder.Entity<ca_cat008_log>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.amt).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.change_memo_new)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.change_memo_old)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.op)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.recno).HasColumnType("decimal(10, 0)");

                entity.Property(e => e.status).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.title_new)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.title_old)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ca_cat018_log>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.cash_item_new)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cash_item_old)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ins_op_new)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ins_op_old)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.recno).HasColumnType("decimal(10, 0)");

                entity.Property(e => e.seq_no)
                    .HasColumnType("decimal(10, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ca_cat030_log>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.amt).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cash_item)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('NTD')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dr_cr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo)
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('  ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.vounoA)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<ca_cat079_log>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.amt).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cash_item)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('USD')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dr_cr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo)
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('  ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.vounoA)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<ca_category>(entity =>
            {
                entity.HasKey(e => e.category_no);

                entity.Property(e => e.category_no)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.category_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<ca_check_gl_dtl>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acc).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.amt).HasColumnType("money");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.batch_no).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.gl)
                    .IsRequired()
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.gl_memo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.r_code)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.recno).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.seq_no).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ca_group>(entity =>
            {
                entity.HasKey(e => e.group_no);

                entity.Property(e => e.group_no)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.category_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.group_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<ca_group_car052>(entity =>
            {
                entity.HasKey(e => e.group_no);

                entity.Property(e => e.group_no)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.category_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.group_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<ca_group_exp_amt>(entity =>
            {
                entity.HasKey(e => new { e.tran_date, e.group_no });

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.group_no)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.exp_amt).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ca_item_base>(entity =>
            {
                entity.HasKey(e => e.item_no);

                entity.Property(e => e.item_no)
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dr_cr)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.group_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.group_no_car052)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.item_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<ca_remit_info>(entity =>
            {
                entity.HasKey(e => new { e.source, e.broker_co, e.broker_code });

                entity.Property(e => e.source)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_co)
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.remit_account)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.remit_bank)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.remit_branch)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<ca_restdate>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.accounting)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.restdate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ca_source_item_mapping>(entity =>
            {
                entity.HasKey(e => new { e.source_type, e.source_code });

                entity.Property(e => e.source_code)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.item_no_in)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.item_no_out)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<ca_unlock_log>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.id_no).HasMaxLength(30);

                entity.Property(e => e.login_date).HasColumnType("smalldatetime");

                entity.Property(e => e.login_time).HasMaxLength(20);

                entity.Property(e => e.unlock_date).HasColumnType("smalldatetime");

                entity.Property(e => e.unlock_reason).HasMaxLength(255);
            });

            modelBuilder.Entity<car009memo>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.a1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.a2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.a3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.a4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.a5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.a6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.a7).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.b1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.c1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.d1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.e1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.e2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.e3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.e4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.e5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.e6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.e7).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.e8).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.f1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.f2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.f3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.f4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.f5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.f6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.f7).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.g1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.g2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.g3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.g4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.g5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.g6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.h1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.h2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.h3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.h4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.h5).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.h6).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.i1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.i2).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.i3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.i4).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<car020_map>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.op_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<cash_item_mapping>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.new_no)
                    .HasMaxLength(3)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.old_no)
                    .HasMaxLength(3)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<cash_plan>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bank_amt).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.bf_amt).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.hold_amt).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.hold_desc)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('  ')");

                entity.Property(e => e.rs_amt).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.sb_amt).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.share_amt).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.td_amt).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<cash_status>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.sys_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ccy_base>(entity =>
            {
                entity.HasKey(e => e.ccy);

                entity.Property(e => e.ccy).HasMaxLength(3);

                entity.Property(e => e.cash_fraction_num).HasColumnType("decimal(3, 0)");

                entity.Property(e => e.ccy_e_name).HasMaxLength(10);

                entity.Property(e => e.ccy_name)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.country_code).HasMaxLength(2);

                entity.Property(e => e.fraction_num).HasColumnType("decimal(3, 0)");

                entity.Property(e => e.int_base_days).HasColumnType("decimal(3, 0)");

                entity.Property(e => e.swap_fraction_num).HasColumnType("decimal(3, 0)");
            });

            modelBuilder.Entity<ccy_rate_list>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ccy_rate).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.ccy_type1)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_type2)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.td_amt).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<check_add>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.bank_acct, e.add_date }, "CheckAdd1")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.Property(e => e.add_date).HasColumnType("smalldatetime");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.beg_chk_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.end_chk_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.user_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<check_chgblock>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bank_acct).HasMaxLength(16);

                entity.Property(e => e.beg_chk_no).HasMaxLength(10);

                entity.Property(e => e.change_date).HasColumnType("smalldatetime");

                entity.Property(e => e.end_chk_no).HasMaxLength(10);

                entity.Property(e => e.user_id).HasMaxLength(20);
            });

            modelBuilder.Entity<check_detail>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.check_no, "CheckDetail1")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.Property(e => e.acct_date).HasColumnType("smalldatetime");

                entity.Property(e => e.add_date).HasColumnType("smalldatetime");

                entity.Property(e => e.amt).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.block)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength();

                entity.Property(e => e.change_date).HasColumnType("smalldatetime");

                entity.Property(e => e.change_memo)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_date).HasColumnType("smalldatetime");

                entity.Property(e => e.check_memo)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dept_no).HasMaxLength(50);

                entity.Property(e => e.new_check)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.org_title)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pay_date).HasColumnType("smalldatetime");

                entity.Property(e => e.pay_memo)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.recno).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.sys_date).HasColumnType("smalldatetime");

                entity.Property(e => e.title)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.user_id)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.vouno)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<check_detail_change>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.amt_new).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.amt_old).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.change_memo_new)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.change_memo_old)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_memo_new)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_memo_old)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.op)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.recno).HasColumnType("decimal(10, 0)");

                entity.Property(e => e.serial).ValueGeneratedOnAdd();

                entity.Property(e => e.status).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.title_new)
                    .IsRequired()
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.title_old)
                    .IsRequired()
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<check_detail_voidrecovery>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acct_date).HasColumnType("smalldatetime");

                entity.Property(e => e.add_date).HasColumnType("smalldatetime");

                entity.Property(e => e.amt).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.block)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength();

                entity.Property(e => e.change_date).HasColumnType("smalldatetime");

                entity.Property(e => e.change_memo)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_date).HasColumnType("smalldatetime");

                entity.Property(e => e.check_memo)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dept_no).HasMaxLength(50);

                entity.Property(e => e.new_check)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.org_title)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pay_date).HasColumnType("smalldatetime");

                entity.Property(e => e.pay_memo)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.recno).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.sys_date).HasColumnType("smalldatetime");

                entity.Property(e => e.title)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.user_id)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.vouno)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<check_tmp_1>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.check_date).HasColumnType("datetime");

                entity.Property(e => e.check_no)
                    .IsRequired()
                    .HasMaxLength(255)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.seqid).HasMaxLength(255);
            });

            modelBuilder.Entity<chgtype_tranhist>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_comm).HasColumnType("money");

                entity.Property(e => e.broker_ref)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.d_volumn).HasColumnType("money");

                entity.Property(e => e.fund_cost).HasColumnType("money");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.group_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.group_cost).HasColumnType("money");

                entity.Property(e => e.net).HasColumnType("money");

                entity.Property(e => e.price).HasColumnType("money");

                entity.Property(e => e.real_rate).HasColumnType("money");

                entity.Property(e => e.rec_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ref_no)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.term)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.total_amt).HasColumnType("money");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_out)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.trans_tax).HasColumnType("money");

                entity.Property(e => e.volumn).HasColumnType("money");
            });

            modelBuilder.Entity<chgtypetest>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.change_date).HasColumnType("smalldatetime");

                entity.Property(e => e.change_type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.net).HasColumnType("money");

                entity.Property(e => e.sk_code_new)
                    .IsRequired()
                    .HasMaxLength(6)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code_old)
                    .IsRequired()
                    .HasMaxLength(6)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_type_new)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_type_old)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.volumn_new01).HasColumnType("money");

                entity.Property(e => e.volumn_new02).HasColumnType("money");

                entity.Property(e => e.volumn_old01).HasColumnType("money");

                entity.Property(e => e.volumn_old02).HasColumnType("money");
            });

            modelBuilder.Entity<code_base>(entity =>
            {
                entity.HasKey(e => new { e.item_type, e.item_code });

                entity.Property(e => e.item_type)
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.item_code)
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.item_name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.remark1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.remark2)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<code_file>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.item_type, e.item_code }, "IX_code_file")
                    .IsClustered()
                    .HasFillFactor(70);

                entity.Property(e => e.description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("代號中文說明")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.item_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasComment("代號編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.item_type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("代號類別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.remark)
                    .HasMaxLength(20)
                    .HasComment("代號描述")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<columns_define>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.code_type)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.column_desc)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.column_name)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.column_name_ch)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.table_name)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<cs_total>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.amt)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("金額");

                entity.Property(e => e.bank_account)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_code)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasComment("券商總公司代號 (sb_broker.broker_co)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.nt_amt)
                    .HasColumnType("decimal(18, 0)")
                    .HasComment("台幣金額");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("交易日期");
            });

            modelBuilder.Entity<cs_total_hist>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.tran_date, "IX_cs_total_hist")
                    .IsClustered()
                    .HasFillFactor(70);

                entity.Property(e => e.amt)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("金額");

                entity.Property(e => e.bank_account)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_code)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasComment("券商總公司代號 (sb_broker.broker_co)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.nt_amt)
                    .HasColumnType("decimal(18, 0)")
                    .HasComment("台幣金額");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("交易日期");
            });

            modelBuilder.Entity<cs_trans>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.amt).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.bank_account)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_code)
                    .IsRequired()
                    .HasMaxLength(5)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy)
                    .IsRequired()
                    .HasMaxLength(3)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.exrate)
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.good_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.nt_amt)
                    .HasColumnType("decimal(18, 0)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.op_account)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.op_bank)
                    .IsRequired()
                    .HasMaxLength(5)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rec_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.remark)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<da_acct_dtl>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.amt).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.cash_item)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.contract_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dr_cr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.recno)
                    .HasColumnType("decimal(10, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<da_bank_endbal>(entity =>
            {
                entity.HasKey(e => new { e.contract_no, e.tran_date });

                entity.Property(e => e.contract_no)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.cr_amt).HasColumnType("money");

                entity.Property(e => e.dendbal).HasColumnType("money");

                entity.Property(e => e.dr_amt).HasColumnType("money");
            });

            modelBuilder.Entity<da_bank_endbal_hist>(entity =>
            {
                entity.HasKey(e => new { e.contract_no, e.tran_date });

                entity.Property(e => e.contract_no)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.cr_amt).HasColumnType("money");

                entity.Property(e => e.dendbal).HasColumnType("money");

                entity.Property(e => e.dr_amt).HasColumnType("money");
            });

            modelBuilder.Entity<da_contract_base>(entity =>
            {
                entity.HasKey(e => e.contract_no);

                entity.Property(e => e.contract_no)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_no)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.beg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.branch_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.co_name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.contract_amt).HasColumnType("money");

                entity.Property(e => e.contract_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<da_sb_dtl>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.app_no, "IX_da_sb_dtl")
                    .HasFillFactor(70);

                entity.HasIndex(e => e.bill_date, "bill_date_ind")
                    .HasFillFactor(70);

                entity.HasIndex(e => e.broker_code, "broker_code_ind")
                    .HasFillFactor(70);

                entity.Property(e => e.app_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.beg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.bill_date).HasColumnType("smalldatetime");

                entity.Property(e => e.bill_enddate).HasColumnType("smalldatetime");

                entity.Property(e => e.bill_name)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bill_no)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bill_rate).HasColumnType("smallmoney");

                entity.Property(e => e.bill_type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.buy_price).HasColumnType("money");

                entity.Property(e => e.cancel_date).HasColumnType("smalldatetime");

                entity.Property(e => e.contract_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dtl_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.insure_name)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.marked).HasDefaultValueSql("((0))");

                entity.Property(e => e.org_app_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value).HasColumnType("money");

                entity.Property(e => e.sys_no)
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<da_sb_register>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bank_id)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.contract_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pay_amt).HasColumnType("money");

                entity.Property(e => e.pay_net).HasColumnType("money");

                entity.Property(e => e.pay_tax).HasColumnType("money");

                entity.Property(e => e.seqno).ValueGeneratedOnAdd();

                entity.Property(e => e.sys_no).HasMaxLength(8);
            });

            modelBuilder.Entity<da_sb_total_hist>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.fund_no, e.tran_date, e.app_no }, "SbTotalHistUk1")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.accu_days).HasColumnType("money");

                entity.Property(e => e.accu_int).HasColumnType("money");

                entity.Property(e => e.accu_tax).HasColumnType("money");

                entity.Property(e => e.app_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.beg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.bill_no)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bill_type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.buy_cut).HasDefaultValueSql("((0))");

                entity.Property(e => e.buy_int).HasColumnType("money");

                entity.Property(e => e.buy_price).HasColumnType("money");

                entity.Property(e => e.buy_rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.buy_tax).HasColumnType("money");

                entity.Property(e => e.buydate).HasDefaultValueSql("((0))");

                entity.Property(e => e.buymonth).HasDefaultValueSql("((0))");

                entity.Property(e => e.contract_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value).HasColumnType("money");

                entity.Property(e => e.relation).HasDefaultValueSql("((0))");

                entity.Property(e => e.sold_price).HasColumnType("money");

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<da_sb_trans>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.fund_no, e.org_app_no }, "SbTransKey1")
                    .HasFillFactor(70);

                entity.HasIndex(e => new { e.fund_no, e.app_no }, "SbTransUk1")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.act_days).HasDefaultValueSql("((0))");

                entity.Property(e => e.act_int)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.act_price)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.act_rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.act_tax)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.app_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.beg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.bill_no)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bill_type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.buy_cut).HasDefaultValueSql("((0))");

                entity.Property(e => e.buy_int).HasColumnType("money");

                entity.Property(e => e.buy_price).HasColumnType("money");

                entity.Property(e => e.buy_rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.buy_tax).HasColumnType("money");

                entity.Property(e => e.buydate).HasDefaultValueSql("((0))");

                entity.Property(e => e.buymonth).HasDefaultValueSql("((0))");

                entity.Property(e => e.cancel_date).HasColumnType("smalldatetime");

                entity.Property(e => e.contract_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.org_app_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value).HasColumnType("money");

                entity.Property(e => e.relation).HasDefaultValueSql("((0))");

                entity.Property(e => e.sold_price).HasColumnType("money");

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<da_td_int_file>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.contract_no, e.deal_no, e.beg_date });

                entity.HasIndex(e => e.deal_no, "ind_dealno")
                    .HasFillFactor(70);

                entity.HasIndex(e => e.end_date, "ind_enddate")
                    .HasFillFactor(70);

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.contract_no)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.deal_no)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.beg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.capital).HasColumnType("money");

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.int_date).HasColumnType("smalldatetime");

                entity.Property(e => e.int_rate).HasColumnType("money");

                entity.Property(e => e.int_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.interest).HasColumnType("decimal(19, 0)");

                entity.Property(e => e.net).HasColumnType("decimal(19, 0)");

                entity.Property(e => e.period_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tax).HasColumnType("decimal(19, 0)");
            });

            modelBuilder.Entity<da_td_int_rec>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.contract_no, e.deal_no, e.rec_date });

                entity.HasIndex(e => e.deal_no, "ind_dealno")
                    .HasFillFactor(70);

                entity.HasIndex(e => e.end_date, "ind_enddate")
                    .HasFillFactor(70);

                entity.HasIndex(e => e.rec_date, "ind_recdate")
                    .HasFillFactor(70);

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.contract_no)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.deal_no)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rec_date).HasColumnType("smalldatetime");

                entity.Property(e => e.beg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.capital).HasColumnType("money");

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.int_date).HasColumnType("smalldatetime");

                entity.Property(e => e.int_rate).HasColumnType("money");

                entity.Property(e => e.int_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.period_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.recv_int)
                    .HasColumnType("decimal(19, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.recv_net)
                    .HasColumnType("decimal(19, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.recv_tax)
                    .HasColumnType("decimal(19, 0)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<da_td_register>(entity =>
            {
                entity.HasKey(e => new { e.contract_no, e.td_year, e.bank_id });

                entity.Property(e => e.contract_no)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_id)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pay_amt).HasColumnType("money");

                entity.Property(e => e.pay_net).HasColumnType("money");

                entity.Property(e => e.pay_tax).HasColumnType("money");

                entity.Property(e => e.seqno).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<da_td_total_hist>(entity =>
            {
                entity.HasKey(e => new { e.tran_date, e.fund_no, e.contract_no, e.deal_no })
                    .HasName("PK_da_td_total_hist_1");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.contract_no)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.deal_no)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.accu_days)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.accu_int)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.accu_tax)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.bank_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.beg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.branch_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.capital).HasColumnType("money");

                entity.Property(e => e.deposit_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("((1))")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.int_cont)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("((1))")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.int_rate).HasColumnType("smallmoney");

                entity.Property(e => e.int_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("((1))")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.period_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("((1))")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<da_td_trans>(entity =>
            {
                entity.HasKey(e => new { e.contract_no, e.tran_date, e.deal_no })
                    .IsClustered(false);

                entity.Property(e => e.contract_no)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.deal_no)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.action).HasDefaultValueSql("('')");

                entity.Property(e => e.bank_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.beg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.branch_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cancel_int)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.cancel_net)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.cancel_rate)
                    .HasColumnType("smallmoney")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.cancel_tax)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.capital).HasColumnType("money");

                entity.Property(e => e.deposit_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("((1))")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.int_cont)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("((1))")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.int_rate).HasColumnType("smallmoney");

                entity.Property(e => e.int_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("((1))")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.period_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("((1))")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<dafn_divid>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('NA')")
                    .HasComment("會計分類")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasComment("交易別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_account)
                    .HasMaxLength(20)
                    .HasComment("銀行帳號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_code)
                    .HasMaxLength(10)
                    .HasComment("銀行代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.div_rate)
                    .HasColumnType("decimal(19, 10)")
                    .HasComment("除息率");

                entity.Property(e => e.ex_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("除息日期");

                entity.Property(e => e.fee_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("郵費匯費");

                entity.Property(e => e.fn_co)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasComment("投信公司代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasComment("基金代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("帳冊別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.hold_share)
                    .HasColumnType("money")
                    .HasComment("當日持有數");

                entity.Property(e => e.net_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("應收淨額(除息淨額)");

                entity.Property(e => e.over_dividend)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("溢配金額");

                entity.Property(e => e.p_code)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rec_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("實際領取總數");

                entity.Property(e => e.recv_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("領息日");

                entity.Property(e => e.tax_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("所得稅額");

                entity.Property(e => e.tax_rate)
                    .HasDefaultValueSql("((0))")
                    .HasComment("所得稅率");

                entity.Property(e => e.total_amt)
                    .HasColumnType("money")
                    .HasComment("配息金額(除息金額)");
            });

            modelBuilder.Entity<dafn_taxfree>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.action)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.benfit_86).HasColumnType("money");

                entity.Property(e => e.benfit_87).HasColumnType("money");

                entity.Property(e => e.c_amt).HasColumnType("money");

                entity.Property(e => e.c_date).HasColumnType("smalldatetime");

                entity.Property(e => e.c_percent).HasColumnType("money");

                entity.Property(e => e.cash_taxfree).HasColumnType("money");

                entity.Property(e => e.fn_co)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<dafn_total>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NA')")
                    .HasComment("公報別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost)
                    .HasColumnType("decimal(20, 4)")
                    .HasComment("平均成本");

                entity.Property(e => e.chg_cost)
                    .HasColumnType("decimal(20, 0)")
                    .HasComment("今日異動成本");

                entity.Property(e => e.chg_units)
                    .HasColumnType("decimal(20, 4)")
                    .HasComment("今日異動單位數");

                entity.Property(e => e.contract_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasComment("投信合約代碼")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.day_dividend)
                    .HasColumnType("decimal(20, 0)")
                    .HasComment("日除息數");

                entity.Property(e => e.day_gain)
                    .HasColumnType("decimal(20, 0)")
                    .HasComment("日已實現收益");

                entity.Property(e => e.day_loss)
                    .HasColumnType("decimal(20, 0)")
                    .HasComment("日已實現損益");

                entity.Property(e => e.day_ungain)
                    .HasColumnType("decimal(20, 0)")
                    .HasComment("日未實現收益");

                entity.Property(e => e.day_unloss)
                    .HasColumnType("decimal(20, 0)")
                    .HasComment("日未實現損益");

                entity.Property(e => e.fn_co)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("投信公司代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasComment("基金代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("帳冊別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.market_price)
                    .HasColumnType("decimal(20, 0)")
                    .HasComment("市值");

                entity.Property(e => e.month_dividend)
                    .HasColumnType("decimal(20, 0)")
                    .HasComment("月除息數");

                entity.Property(e => e.month_gain)
                    .HasColumnType("decimal(20, 0)")
                    .HasComment("月已實現收益");

                entity.Property(e => e.month_loss)
                    .HasColumnType("decimal(20, 0)")
                    .HasComment("月已實現損失");

                entity.Property(e => e.net)
                    .HasColumnType("decimal(18, 0)")
                    .HasComment("庫存成本,同fn_trans.fund_cost");

                entity.Property(e => e.p_code)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tot_units)
                    .HasColumnType("decimal(20, 4)")
                    .HasComment("單位數");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("庫存日期");

                entity.Property(e => e.unit_nav)
                    .HasColumnType("decimal(20, 8)")
                    .HasComment("單位淨值");

                entity.Property(e => e.year_dividend)
                    .HasColumnType("decimal(20, 0)")
                    .HasComment("年除息數");

                entity.Property(e => e.year_gain)
                    .HasColumnType("decimal(20, 0)")
                    .HasComment("年已實現收益");

                entity.Property(e => e.year_loss)
                    .HasColumnType("decimal(20, 0)")
                    .HasComment("年已實現損失");
            });

            modelBuilder.Entity<dafn_trans>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NA')")
                    .HasComment("會計分類")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("交易別(1-買 2-賣)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_fee)
                    .HasColumnType("decimal(20, 0)")
                    .HasComment("匯費");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("(' ')")
                    .HasComment("券商代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_fee)
                    .HasColumnType("decimal(20, 0)")
                    .HasComment("手續費");

                entity.Property(e => e.contract_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasComment("投信合約代碼")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasComment("交易編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dtl_status).HasComment("交割狀態");

                entity.Property(e => e.fn_co)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasComment("投信公司代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasComment("基金代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_cost)
                    .HasColumnType("decimal(18, 0)")
                    .HasComment("成本");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("帳冊別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .HasComment("投信的交易編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.net)
                    .HasColumnType("decimal(20, 0)")
                    .HasComment("淨額");

                entity.Property(e => e.p_code)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settle_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("交割日期");

                entity.Property(e => e.settledate_bill)
                    .HasColumnType("smalldatetime")
                    .HasComment("券交割日");

                entity.Property(e => e.tot_amt)
                    .HasColumnType("decimal(20, 0)")
                    .HasComment("成交金額");

                entity.Property(e => e.tot_unit)
                    .HasColumnType("decimal(20, 4)")
                    .HasComment("成交數量");

                entity.Property(e => e.trade_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("下單日");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("成交日期");

                entity.Property(e => e.trans_tax)
                    .HasColumnType("decimal(20, 0)")
                    .HasComment("交易稅");

                entity.Property(e => e.unit_nav)
                    .HasColumnType("decimal(20, 8)")
                    .HasComment("成交單價");
            });

            modelBuilder.Entity<dask_divid>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasComment("交易別(1.除息2.盈配3.公配4.現增)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_account)
                    .HasMaxLength(20)
                    .HasComment("銀行帳號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_code)
                    .HasMaxLength(10)
                    .HasComment("銀行代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.div_rate)
                    .HasColumnType("decimal(19, 10)")
                    .HasComment("配股息比率(除權除息率)");

                entity.Property(e => e.ex_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("除權除息日期");

                entity.Property(e => e.fee_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("郵費匯費");

                entity.Property(e => e.fn_co)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasComment("投信公司代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("帳戶別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.hold_share)
                    .HasColumnType("money")
                    .HasComment("當日持有股數");

                entity.Property(e => e.net_amt)
                    .HasColumnType("money")
                    .HasComment("除息實領金額");

                entity.Property(e => e.org_total_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("原始配息金額(投信不含盈餘、公積)");

                entity.Property(e => e.over_dividend)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("除權溢配金額");

                entity.Property(e => e.over_int)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("除息溢配金額");

                entity.Property(e => e.pre_total_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("除息實領淨額");

                entity.Property(e => e.rec_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("除權實領股數");

                entity.Property(e => e.recv_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("領股領息日");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasComment("股票代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tax_amt)
                    .HasColumnType("money")
                    .HasComment("所得稅額");

                entity.Property(e => e.tax_rate).HasComment("所得稅率");

                entity.Property(e => e.total_amt)
                    .HasColumnType("money")
                    .HasComment("配息金額(除息金額)");

                entity.Property(e => e.total_share)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("配股股數(除權股數)");
            });

            modelBuilder.Entity<dask_taxfree>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.action)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.benfit_86)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.benfit_87)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.c_amt)
                    .HasColumnType("money")
                    .HasComment("除息金額");

                entity.Property(e => e.c_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("除息日");

                entity.Property(e => e.c_percent)
                    .HasColumnType("money")
                    .HasComment("除息可扣抵比率");

                entity.Property(e => e.cash_taxfree)
                    .HasColumnType("money")
                    .HasComment("除息可扣抵金額");

                entity.Property(e => e.d_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("除權日");

                entity.Property(e => e.f_amt)
                    .HasColumnType("money")
                    .HasComment("公配金額");

                entity.Property(e => e.f_percent)
                    .HasColumnType("money")
                    .HasComment("公配可扣底比率");

                entity.Property(e => e.fn_co)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasComment("投信公司代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_taxfree)
                    .HasColumnType("money")
                    .HasComment("公配可扣底稅額");

                entity.Property(e => e.s_amt)
                    .HasColumnType("money")
                    .HasComment("盈配金額");

                entity.Property(e => e.s_percent)
                    .HasColumnType("money")
                    .HasComment("盈配可扣底比率");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasComment("股票代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.stock_taxfree)
                    .HasColumnType("money")
                    .HasComment("盈配可扣底稅額");

                entity.Property(e => e.surplus_amt).HasColumnType("money");

                entity.Property(e => e.surplus_percent).HasColumnType("money");

                entity.Property(e => e.surplus_taxfree).HasColumnType("money");

                entity.Property(e => e.sys_type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("(N'SK')")
                    .HasComment("持有股數類別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("交易日");
            });

            modelBuilder.Entity<dask_total>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.fn_co, e.contract_code, e.sk_code, e.tran_date, e.sk_type, e.acccate });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasComment("帳戶別(fund_file.fund_no)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_co)
                    .HasMaxLength(8)
                    .HasComment("投信公司代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.contract_code)
                    .HasMaxLength(10)
                    .HasComment("投信合約代碼")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .HasMaxLength(6)
                    .HasComment("股票代號(sk_base.sk_code)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("交易日期");

                entity.Property(e => e.sk_type)
                    .HasMaxLength(2)
                    .HasComment("股票類別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('NA')")
                    .HasComment("公報別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost)
                    .HasColumnType("money")
                    .HasComment("平均成本");

                entity.Property(e => e.net)
                    .HasColumnType("money")
                    .HasComment("總成本");

                entity.Property(e => e.price)
                    .HasColumnType("money")
                    .HasComment("股票收盤價");

                entity.Property(e => e.volumn)
                    .HasColumnType("money")
                    .HasComment("現存股數");
            });

            modelBuilder.Entity<dask_trans>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('NA')")
                    .HasComment("公報別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("交易別(1:買,2:賣;5:增資;E:減資;I:圈購)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasComment("券商代號(sb_broker)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_comm)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("券商手續費");

                entity.Property(e => e.contract_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasComment("投信合約代碼")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_co)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasComment("投信公司代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_cost)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("沖銷股票成本(交易成本)");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("帳戶別(fund_file.fund_no)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .HasComment("投信的交易編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.net)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("淨收付金額(交易淨額)");

                entity.Property(e => e.postal_tax)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("郵匯費");

                entity.Property(e => e.price)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("交易單價");

                entity.Property(e => e.rec_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasComment("交割狀態")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settle_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("交割日");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasComment("股票代號(sk_base.sk_code)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_type)
                    .HasMaxLength(2)
                    .HasComment("股票類別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.total_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("交易總金額");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("交易日期");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasComment("交易編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.trans_tax)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("交易證交稅");

                entity.Property(e => e.volumn)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("交易股數");
            });

            modelBuilder.Entity<daskr055_hist>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_comm)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.co_cost)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.fund_cost)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.net)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.price)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ref_no)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.volumn)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<daskr055_total>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.sk_code, e.tran_date, e.acccate, e.stock_date });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .HasMaxLength(6)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.stock_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sell_volumn).HasColumnType("money");

                entity.Property(e => e.volumn).HasColumnType("money");
            });

            modelBuilder.Entity<daskr055_total_hist>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sell_volumn)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.stock_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.volumn).HasColumnType("money");
            });

            modelBuilder.Entity<daskr055_trans>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_comm)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.co_cost)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.fund_cost)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.net)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.price)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ref_no)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.volumn)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<dept_base>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.dept_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dept_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rpt_amt).HasColumnType("money");
            });

            modelBuilder.Entity<disposable_bd_tanbase>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.beg_date).HasColumnType("datetime");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.buy_date).HasColumnType("smalldatetime");

                entity.Property(e => e.day).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.interest).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.net).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.net2).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.par_value).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.real_interest).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.real_rate).HasColumnType("numeric(18, 9)");

                entity.Property(e => e.tan_amt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<dm_tra_fo_deal>(entity =>
            {
                entity.HasKey(e => new { e.trade_no, e.brk_tran_no });

                entity.Property(e => e.trade_no)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.brk_tran_no)
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e._lock).HasColumnName("lock");

                entity.Property(e => e.amt).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.approve)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.approve_dt).HasColumnType("datetime");

                entity.Property(e => e.broker)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.comb_no)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.cont_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.crttime).HasColumnType("datetime");

                entity.Property(e => e.crtuser)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.etl_trade_no)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.etl_trade_tp)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.exp_dt).HasColumnType("date");

                entity.Property(e => e.fno)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.locktime).HasColumnType("datetime");

                entity.Property(e => e.lockuser)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.logtime).HasColumnType("datetime");

                entity.Property(e => e.loguser)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.lot).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.manager)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.org_pre_amt).HasColumnType("numeric(20, 10)");

                entity.Property(e => e.org_price).HasColumnType("numeric(20, 10)");

                entity.Property(e => e.org_trade_dt).HasColumnType("date");

                entity.Property(e => e.org_trade_no)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.other_fee).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.pre_amt).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.price).HasColumnType("numeric(20, 10)");

                entity.Property(e => e.trade_dt).HasColumnType("date");

                entity.Property(e => e.trader)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.tran_fee).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.tran_tax).HasColumnType("numeric(20, 5)");
            });

            modelBuilder.Entity<dm_tra_td_pledge_chg>(entity =>
            {
                entity.HasKey(e => new { e.buy_trade_no, e.chg_dt });

                entity.Property(e => e.buy_trade_no)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.chg_dt).HasColumnType("date");

                entity.Property(e => e._lock).HasColumnName("lock");

                entity.Property(e => e.locktime).HasColumnType("datetime");

                entity.Property(e => e.lockuser)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.logtime).HasColumnType("datetime");

                entity.Property(e => e.loguser)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<emp_base>(entity =>
            {
                entity.HasKey(e => e.sales_id);

                entity.Property(e => e.sales_id)
                    .HasMaxLength(20)
                    .HasComment("使用者登入帳號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dept_name)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dimission).HasComment("離職(否)");

                entity.Property(e => e.emp_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("使用者統一編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.emp_name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("使用者中文姓名")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fail_cnt).HasComment("登入失敗次數");

                entity.Property(e => e.manage).HasComment("擁有所有基金權限");

                entity.Property(e => e.passwd)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasComment("密碼")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.role_no)
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<f_acct>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.account).HasMaxLength(20);
            });

            modelBuilder.Entity<fas_no_tmp>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.fas_deal_no)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<fc_exchange_tran>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acct_in)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acct_out)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_in)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_out)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_rate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.in_amt).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.nt_amt).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.nt_rate).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.out_amt).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fn_Announce>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AnnounceDate)
                    .HasColumnType("smalldatetime")
                    .HasComment("公告日");

                entity.Property(e => e.AvgUnitNav)
                    .HasColumnType("numeric(18, 8)")
                    .HasComment("平均單位淨值(非收盤)");

                entity.Property(e => e.BS)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("買/賣")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.BegDate)
                    .HasColumnType("smalldatetime")
                    .HasComment("交易起");

                entity.Property(e => e.BegDateUnitNav)
                    .HasColumnType("numeric(18, 8)")
                    .HasComment("交易單位淨值(非收盤)");

                entity.Property(e => e.EndDate)
                    .HasColumnType("smalldatetime")
                    .HasComment("交易止");

                entity.Property(e => e.EndDateUnitNav)
                    .HasColumnType("numeric(18, 8)")
                    .HasComment("交易單位淨值(非收盤)");

                entity.Property(e => e.Fn_TotUnits)
                    .HasColumnType("decimal(18, 0)")
                    .HasComment("基金發行總單位數");

                entity.Property(e => e.GainLoss)
                    .HasColumnType("money")
                    .HasComment("己實現損益");

                entity.Property(e => e.HoldRate)
                    .HasColumnType("numeric(18, 2)")
                    .HasComment("持有比率StockUnit/Fn_TotUnits");

                entity.Property(e => e.StockAmt)
                    .HasColumnType("money")
                    .HasComment("庫存金額(含公告日)");

                entity.Property(e => e.StockUnit)
                    .HasColumnType("numeric(18, 4)")
                    .HasComment("庫存單位(含公告日)");

                entity.Property(e => e.TradeAmt)
                    .HasColumnType("money")
                    .HasComment("交易總金額");

                entity.Property(e => e.TradeAvgUnitNav).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TradeUnit)
                    .HasColumnType("numeric(18, 4)")
                    .HasComment("交易單位數");

                entity.Property(e => e.fn_co)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasComment("基金公司")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasComment("基金代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fn_ImportLog>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CompuerName).HasMaxLength(50);

                entity.Property(e => e.crtdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.user_name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<fn_Issuer_rating>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.IssuerID)
                    .HasMaxLength(30)
                    .HasComment("'機構Ticker'")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.LastUpdate).HasColumnType("smalldatetime");

                entity.Property(e => e.RTG_FITCH_LT_FC_ISSUER_DEFAULT)
                    .HasMaxLength(10)
                    .IsFixedLength()
                    .HasComment("'FITCH長期外幣發行人違約評等'")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.RTG_FITCH_LT_ISSUER_DEFAULT)
                    .HasMaxLength(20)
                    .HasComment("'FITCH長期發行人違約評等'")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.RTG_FITCH_NATIONAL_LT)
                    .HasMaxLength(20)
                    .HasComment("'台灣惠譽信評'")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.RTG_MDY_FC_CURR_ISSUER_RATING)
                    .HasMaxLength(20)
                    .HasComment("'MOODY外幣發行人評等'")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.RTG_MDY_ISSUER)
                    .HasMaxLength(20)
                    .HasComment("'MOODY發行人信評'")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.RTG_MDY_SEN_UNSECURED_DEBT)
                    .HasMaxLength(20)
                    .HasComment("'MOODY優先無擔保債務評等'")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.RTG_MOODY_LONG_TERM)
                    .HasMaxLength(20)
                    .HasComment("'MOODY長期評等'")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.RTG_SP_LT_FC_ISSUER_CREDIT)
                    .HasMaxLength(20)
                    .HasComment("'S&P長期外幣發行人信用評等'")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.RTG_SP_LT_LC_ISSUER_CREDIT)
                    .HasMaxLength(20)
                    .HasComment("'S&P本國貨幣長期發行人信用評等'")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.RTG_TRC_LONG_TERM)
                    .HasMaxLength(20)
                    .HasComment("'中華信評'")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.RateCo)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ddate)
                    .HasColumnType("smalldatetime")
                    .HasComment("'資料日期'");

                entity.Property(e => e.op)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fn_alarm>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<fn_base>(entity =>
            {
                entity.HasKey(e => e.fn_no)
                    .HasName("PK_fn_no");

                entity.Property(e => e.fn_no)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.CMoneyID)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_no)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.branch_no)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.data_source)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.englishname)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('   ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.estimate)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('  ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.estimate_co)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('  ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_bank_acct)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_bank_title)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_co)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_excelname)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_s_name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_type_dtl)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pay_type)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settle_day).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<fn_bd_data>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AMT_OUTSTANDING).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.AssetType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Blg_time_update).HasColumnType("datetime");

                entity.Property(e => e.CIType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CNTRY_OF_RISK)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.COUNTRY)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CashBalance)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.ChangeReq)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CntType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cpn_Typ)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DateType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Day_Cnt_Des)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Degree)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EXCH_CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EightArea)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ExposureCountryCode)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ExposureCountryName).HasMaxLength(50);

                entity.Property(e => e.ExposureCountryType)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.First_Cpn_Dt).HasColumnType("datetime");

                entity.Property(e => e.Floatation)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.GuaranteeID)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GuaranteeName).HasMaxLength(50);

                entity.Property(e => e.Guarantee_ServiceST)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ID_SHORT_CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ID_TAIWAN)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IOPO)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Industry_Sector)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Industry_SubGroup)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.JPSecurityID)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MTG_ORIG_AMT).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Market_Sector_Des)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NXT_CALL_DT).HasColumnType("datetime");

                entity.Property(e => e.OTC)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.PayStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SENIOR)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SecClass)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SecurityType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SevenRegions)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StableRate).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.StaticPayDate)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TAS_Glbond_kind).HasMaxLength(2);

                entity.Property(e => e.TAS_bond_kind).HasMaxLength(2);

                entity.Property(e => e.TAS_fx_type).HasMaxLength(10);

                entity.Property(e => e.TAS_time_update).HasColumnType("datetime");

                entity.Property(e => e.TransactionType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.bbgcode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.cusip)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.dLastPurchase).HasColumnType("date");

                entity.Property(e => e.dend)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.dend_w).HasColumnType("date");

                entity.Property(e => e.dissuer)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.dissuer_w).HasColumnType("date");

                entity.Property(e => e.fdis)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ftype)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ibdid)
                    .IsRequired()
                    .HasMaxLength(26)
                    .IsUnicode(false);

                entity.Property(e => e.icurid)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.isin)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.issue_amt).HasColumnType("numeric(22, 4)");

                entity.Property(e => e.issuerName).HasMaxLength(50);

                entity.Property(e => e.issuer_IndustrySectorType).HasMaxLength(20);

                entity.Property(e => e.issuer_ServiceST)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.issuerid)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.mday)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.nbd).HasMaxLength(100);

                entity.Property(e => e.ncbd).HasMaxLength(100);

                entity.Property(e => e.pdate).HasColumnType("date");

                entity.Property(e => e.prate).HasColumnType("decimal(13, 10)");

                entity.Property(e => e.sedol)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.subtype)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.taxrate).HasColumnType("numeric(20, 4)");

                entity.Property(e => e.time_update).HasColumnType("datetime");

                entity.Property(e => e.yday)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<fn_bk_hold>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.chg_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tot_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<fn_bk_hold_hist>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.chg_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tot_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<fn_bk_hold_hist_tmp>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.chg_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.tot_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.tran_date).HasColumnType("datetime");
            });

            modelBuilder.Entity<fn_co>(entity =>
            {
                entity.HasKey(e => e.fn_co1);

                entity.Property(e => e.fn_co1)
                    .HasMaxLength(12)
                    .HasColumnName("fn_co")
                    .HasDefaultValueSql("('    ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.CMoneyID)
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.Ticker)
                    .HasMaxLength(15)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.co_name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.co_s_name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.da_type).HasComment("是否為委外系統投信公司");

                entity.Property(e => e.englishname)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.relation_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("(N'F')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.signature)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.unityid)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fn_compare_list>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.amonth).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.aquarter).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.aweek).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.corp_name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.fn_name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.nav_month).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.nav_quarter).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.nav_semi).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.nav_week).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.profitability).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.scale).HasColumnType("decimal(24, 4)");

                entity.Property(e => e.semi_annual).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.unit_nav).HasColumnType("decimal(20, 4)");
            });

            modelBuilder.Entity<fn_dealer_etf>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fn_dealer_fn>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.fn_co)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fn_divid>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasComment("交易別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_account)
                    .HasMaxLength(20)
                    .HasComment("銀行帳號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_account2)
                    .HasMaxLength(20)
                    .HasComment("溢配退還帳號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_code)
                    .HasMaxLength(10)
                    .HasComment("銀行代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_account)
                    .HasMaxLength(20)
                    .HasComment("集保帳號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_no)
                    .HasMaxLength(20)
                    .HasComment("支票號碼")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_no2)
                    .HasMaxLength(20)
                    .HasComment("溢配退還支票號碼")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.div_rate).HasColumnType("decimal(19, 10)");

                entity.Property(e => e.ex_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("除息日期");

                entity.Property(e => e.fee_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)")
                    .HasComment("郵費匯費");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.hold_share)
                    .HasColumnType("money")
                    .HasComment("當日持有數");

                entity.Property(e => e.net_amt)
                    .HasColumnType("money")
                    .HasComment("應收淨額(除息淨額)");

                entity.Property(e => e.over_dividend)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)")
                    .HasComment("溢配金額");

                entity.Property(e => e.rec_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.recno)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasComment("交易編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.recv_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("領息日");

                entity.Property(e => e.recv_kind)
                    .HasMaxLength(5)
                    .HasComment("領取方式")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.recv_kind2)
                    .HasMaxLength(5)
                    .HasComment("溢配退還方式")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tax_amt)
                    .HasColumnType("money")
                    .HasComment("所得稅額");

                entity.Property(e => e.tax_rate).HasComment("所得稅率");

                entity.Property(e => e.total_amt)
                    .HasColumnType("money")
                    .HasComment("配息金額(除息金額)");

                entity.Property(e => e.turn_cash)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)")
                    .HasComment("畸零股款");
            });

            modelBuilder.Entity<fn_divid_p>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasComment("交易別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_account)
                    .HasMaxLength(20)
                    .HasComment("銀行帳號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_account2)
                    .HasMaxLength(20)
                    .HasComment("溢配退還帳號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_code)
                    .HasMaxLength(10)
                    .HasComment("銀行代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_account)
                    .HasMaxLength(20)
                    .HasComment("集保帳號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check1_datetime).HasMaxLength(50);

                entity.Property(e => e.check1_id).HasMaxLength(20);

                entity.Property(e => e.check2_datetime).HasMaxLength(50);

                entity.Property(e => e.check2_id).HasMaxLength(20);

                entity.Property(e => e.check_no)
                    .HasMaxLength(20)
                    .HasComment("支票號碼")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_no2)
                    .HasMaxLength(20)
                    .HasComment("溢配退還支票號碼")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.checked1).HasDefaultValueSql("((0))");

                entity.Property(e => e.checked2).HasDefaultValueSql("((0))");

                entity.Property(e => e.div_rate).HasColumnType("decimal(19, 10)");

                entity.Property(e => e.ex_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("除息日期");

                entity.Property(e => e.fee_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("郵費匯費");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.hold_share)
                    .HasColumnType("money")
                    .HasComment("當日持有數");

                entity.Property(e => e.net_amt)
                    .HasColumnType("money")
                    .HasComment("應收淨額(除息淨額)");

                entity.Property(e => e.over_dividend)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("溢配金額");

                entity.Property(e => e.p_code)
                    .HasMaxLength(15)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rec_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.recno)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasComment("交易編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.recv_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("領息日");

                entity.Property(e => e.recv_kind)
                    .HasMaxLength(5)
                    .HasComment("領取方式")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.recv_kind2)
                    .HasMaxLength(5)
                    .HasComment("溢配退還方式")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tax_amt)
                    .HasColumnType("money")
                    .HasComment("所得稅額");

                entity.Property(e => e.tax_rate).HasComment("所得稅率");

                entity.Property(e => e.total_amt)
                    .HasColumnType("money")
                    .HasComment("配息金額(除息金額)");

                entity.Property(e => e.turn_cash)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("畸零股款");
            });

            modelBuilder.Entity<fn_dividinfo>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.c_date).HasColumnType("smalldatetime");

                entity.Property(e => e.c_recv_date).HasColumnType("smalldatetime");

                entity.Property(e => e.cash_dividend).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ins_date).HasColumnType("smalldatetime");

                entity.Property(e => e.ins_op)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.meeting_date).HasColumnType("smalldatetime");

                entity.Property(e => e.rec_no).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<fn_holding_CNY>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate).HasMaxLength(2);

                entity.Property(e => e.account).HasMaxLength(20);

                entity.Property(e => e.accrued_income_curr_code).HasMaxLength(10);

                entity.Property(e => e.attitude).HasMaxLength(1);

                entity.Property(e => e.base_curr).HasMaxLength(50);

                entity.Property(e => e.bond_kind).HasMaxLength(10);

                entity.Property(e => e.curr_code).HasMaxLength(10);

                entity.Property(e => e.different_amt).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_base_total).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_local_total).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_ntd_total).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_no).HasMaxLength(2);

                entity.Property(e => e.fx_type).HasMaxLength(10);

                entity.Property(e => e.int_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.int_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.int_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.market_value_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.market_value_cost).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.market_value_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.market_value_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_accrued_income_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_accrued_income_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_accrued_income_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.security_id).HasMaxLength(20);

                entity.Property(e => e.shares_units).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.shares_units_total).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.tran_date).HasColumnType("datetime");
            });

            modelBuilder.Entity<fn_inout_dtl>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.broker_in)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_out)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.seq_no)
                    .HasColumnType("decimal(10, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.tot_units).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<fn_invest_list>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.col1).HasMaxLength(30);

                entity.Property(e => e.col2).HasMaxLength(100);

                entity.Property(e => e.col3).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<fn_ipo_advance>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_co)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ipo_chk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ipo_deal_no)
                    .IsRequired()
                    .HasMaxLength(13)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.is_use)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.redemption_unit).HasColumnType("decimal(20, 8)");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.settledate_bill).HasColumnType("smalldatetime");

                entity.Property(e => e.trade_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<fn_plan>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pay_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tot_amt).HasColumnType("money");

                entity.Property(e => e.tot_unit).HasColumnType("money");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.unit_nav).HasColumnType("money");
            });

            modelBuilder.Entity<fn_price>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.data_source)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.data_time).HasColumnType("datetime");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.mdf_op).HasMaxLength(20);

                entity.Property(e => e.mdf_source).HasMaxLength(20);

                entity.Property(e => e.mdf_time).HasColumnType("datetime");

                entity.Property(e => e.price)
                    .HasColumnType("decimal(19, 8)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.tot_units)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<fn_report>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.co_name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.fn_co)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.fn_name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.tot_amt).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.tot_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.tot_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.unit_nav).HasColumnType("decimal(20, 8)");
            });

            modelBuilder.Entity<fn_swap>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.confirm_swap_unit).HasColumnType("decimal(20, 2)");

                entity.Property(e => e.confirm_unit).HasColumnType("decimal(20, 2)");

                entity.Property(e => e.dtl_status).HasDefaultValueSql("(0)");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.swap_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trust_swap_unit).HasColumnType("decimal(20, 2)");

                entity.Property(e => e.trust_unit).HasColumnType("decimal(20, 2)");
            });

            modelBuilder.Entity<fn_taxfree>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.action)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.benfit_86).HasColumnType("money");

                entity.Property(e => e.benfit_87).HasColumnType("money");

                entity.Property(e => e.c_amt).HasColumnType("money");

                entity.Property(e => e.c_date).HasColumnType("smalldatetime");

                entity.Property(e => e.c_percent).HasColumnType("money");

                entity.Property(e => e.cash_taxfree).HasColumnType("money");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<fn_total>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.fund_no, e.fn_no, e.acccate, e.tran_date, e.fn_co }, "FnTotal_Uk1")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.chg_cost).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.chg_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.confirm_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.day_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.day_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.day_loss).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.fn_co)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.lcm_amt).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.market_price).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_loss).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.net).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.tot_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trust_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.unit_nav).HasColumnType("decimal(20, 8)");

                entity.Property(e => e.year_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.year_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.year_loss).HasColumnType("decimal(20, 0)");
            });

            modelBuilder.Entity<fn_total_chg_d>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.avg_cost).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.chg_cost).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.chg_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.confirm_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.d_code)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.day_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.day_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.day_loss).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.fn_co).HasMaxLength(50);

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.market_price).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_loss).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.net).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.tot_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trust_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.unit_nav).HasColumnType("decimal(20, 8)");

                entity.Property(e => e.year_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.year_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.year_loss).HasColumnType("decimal(20, 0)");
            });

            modelBuilder.Entity<fn_total_chg_p>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.avg_cost).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.chg_cost).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.chg_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.confirm_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.day_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.day_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.day_loss).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.fn_co).HasMaxLength(50);

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.market_price).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_loss).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.net).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.p_code)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.tot_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trust_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.unit_nav).HasColumnType("decimal(20, 8)");

                entity.Property(e => e.year_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.year_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.year_loss).HasColumnType("decimal(20, 0)");
            });

            modelBuilder.Entity<fn_total_chg_t>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.avg_cost).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.chg_cost).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.chg_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.confirm_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.day_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.day_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.day_loss).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.fn_co).HasMaxLength(50);

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.market_price).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_loss).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.net).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.t_code)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.tot_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trust_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.unit_nav).HasColumnType("decimal(20, 8)");

                entity.Property(e => e.year_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.year_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.year_loss).HasColumnType("decimal(20, 0)");
            });

            modelBuilder.Entity<fn_total_d>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.chg_cost).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.chg_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.confirm_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.d_code)
                    .IsRequired()
                    .HasMaxLength(15)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.day_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.day_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.day_loss).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.fn_co)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.market_price).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_loss).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.net).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.tot_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trust_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.unit_nav).HasColumnType("decimal(20, 8)");

                entity.Property(e => e.year_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.year_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.year_loss).HasColumnType("decimal(20, 0)");
            });

            modelBuilder.Entity<fn_total_hist>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.fund_no, e.fn_co, e.fn_no, e.tran_date, e.acccate }, "PK_1")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.HasIndex(e => e.fn_no, "ind_fn_no")
                    .HasFillFactor(70);

                entity.HasIndex(e => e.fund_no, "ind_fundno")
                    .HasFillFactor(70);

                entity.HasIndex(e => e.tran_date, "ind_trandate")
                    .HasFillFactor(70);

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.chg_cost).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.chg_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.confirm_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.day_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.day_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.day_loss).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.fn_co)
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.lcm_amt).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.market_price).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_loss).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.net).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.tot_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trust_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.unit_nav).HasColumnType("decimal(20, 8)");

                entity.Property(e => e.year_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.year_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.year_loss).HasColumnType("decimal(20, 0)");
            });

            modelBuilder.Entity<fn_total_hist_d>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.chg_cost).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.chg_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.confirm_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.d_code)
                    .IsRequired()
                    .HasMaxLength(15)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.day_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.day_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.day_loss).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.fn_co)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.market_price).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_loss).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.net).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.tot_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trust_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.unit_nav).HasColumnType("decimal(20, 8)");

                entity.Property(e => e.year_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.year_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.year_loss).HasColumnType("decimal(20, 0)");
            });

            modelBuilder.Entity<fn_total_hist_p>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.chg_cost).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.chg_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.confirm_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.day_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.day_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.day_loss).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.fn_co)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.market_price).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_loss).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.net).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.p_code)
                    .IsRequired()
                    .HasMaxLength(15)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tot_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trust_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.unit_nav).HasColumnType("decimal(20, 8)");

                entity.Property(e => e.year_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.year_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.year_loss).HasColumnType("decimal(20, 0)");
            });

            modelBuilder.Entity<fn_total_hist_t>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.chg_cost).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.chg_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.confirm_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.day_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.day_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.day_loss).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.fn_co)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.market_price).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_loss).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.net).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.t_code)
                    .IsRequired()
                    .HasMaxLength(15)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tot_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trust_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.unit_nav).HasColumnType("decimal(20, 8)");

                entity.Property(e => e.year_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.year_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.year_loss).HasColumnType("decimal(20, 0)");
            });

            modelBuilder.Entity<fn_total_p>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.chg_cost).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.chg_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.confirm_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.day_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.day_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.day_loss).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.fn_co)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.market_price).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_loss).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.net).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.p_code)
                    .IsRequired()
                    .HasMaxLength(15)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tot_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trust_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.unit_nav).HasColumnType("decimal(20, 8)");

                entity.Property(e => e.year_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.year_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.year_loss).HasColumnType("decimal(20, 0)");
            });

            modelBuilder.Entity<fn_total_t>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.chg_cost).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.chg_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.confirm_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.day_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.day_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.day_loss).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.fn_co)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.market_price).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_loss).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.net).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.t_code)
                    .IsRequired()
                    .HasMaxLength(15)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tot_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trust_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.unit_nav).HasColumnType("decimal(20, 8)");

                entity.Property(e => e.year_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.year_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.year_loss).HasColumnType("decimal(20, 0)");
            });

            modelBuilder.Entity<fn_trans>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Approve_Date).HasColumnType("datetime");

                entity.Property(e => e.Approve_Id)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.Data_Source)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.Data_Status)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.Deal_Type)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.Deal_Way)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.Decision_Date).HasColumnType("smalldatetime");

                entity.Property(e => e.Decision_Deal_Date).HasColumnType("smalldatetime");

                entity.Property(e => e.Ets_Deal_No)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.Is_PrePay)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.Lock_Date).HasColumnType("datetime");

                entity.Property(e => e.Lock_Date2).HasColumnType("datetime");

                entity.Property(e => e.Lock_Id)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.Lock_Id2)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.Manager_Id)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.Nav_Date).HasColumnType("smalldatetime");

                entity.Property(e => e.PrePay_Amt)
                    .HasColumnType("decimal(18, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PrePay_No)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.Reply_Date).HasColumnType("smalldatetime");

                entity.Property(e => e.Trader_Id)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.back_dealno)
                    .HasMaxLength(13)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_account)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('0116-10-0002009')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_fee).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_fee).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.co_cost).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.commission).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.confirm_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.d_cost).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(13)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.exchange_fee).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.fn_co)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_cost).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ipo_amt)
                    .HasColumnType("decimal(18, 0)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("IPO(申)預付金額");

                entity.Property(e => e.ipo_chk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ipo_deal_no)
                    .HasMaxLength(13)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.lcm_amt).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.net).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.newconfirm_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.other_fee).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.p_code)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.p_cost).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.settledate_bill).HasColumnType("smalldatetime");

                entity.Property(e => e.t_cost).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.tot_amt).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.tot_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.trade_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_fee).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.tran_tax).HasColumnType("decimal(20, 5)");

                entity.Property(e => e.trust_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.unit_nav).HasColumnType("decimal(20, 8)");
            });

            modelBuilder.Entity<fn_trans1>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.back_dealno).HasMaxLength(13);

                entity.Property(e => e.bank_fee).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.broker_fee).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.co_cost).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.confirm_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(13);

                entity.Property(e => e.fn_co)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.fund_cost).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.lcm_amt).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.net).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.newconfirm_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.rec_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.tot_amt).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.tot_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.trade_date).HasColumnType("datetime");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.trust_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.unit_nav).HasColumnType("decimal(20, 8)");
            });

            modelBuilder.Entity<ft_account>(entity =>
            {
                entity.HasKey(e => new { e.broker_no, e.account, e.tran_date });

                entity.Property(e => e.broker_no)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account)
                    .HasMaxLength(14)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.net).HasColumnType("money");

                entity.Property(e => e.purpose)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<ft_account_hist>(entity =>
            {
                entity.HasKey(e => new { e.broker_no, e.account, e.tran_date });

                entity.Property(e => e.broker_no)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account)
                    .HasMaxLength(14)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.net).HasColumnType("money");

                entity.Property(e => e.purpose)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<ft_account_list>(entity =>
            {
                entity.HasKey(e => new { e.broker_no, e.account });

                entity.Property(e => e.broker_no)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account)
                    .HasMaxLength(14)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account_name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account_purpose)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('00')")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.out_account)
                    .HasMaxLength(25)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<ft_base>(entity =>
            {
                entity.HasKey(e => e.ft_no);

                entity.Property(e => e.ft_no)
                    .HasMaxLength(10)
                    .HasComment("商品代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.evaluation_level)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fo_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('F')")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ft_name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("商品名稱")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ft_no2)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ft_type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ini_ins)
                    .HasColumnType("money")
                    .HasComment("原始保證金");

                entity.Property(e => e.mt_ins)
                    .HasColumnType("money")
                    .HasComment("維持保證金");

                entity.Property(e => e.point_price)
                    .HasColumnType("money")
                    .HasComment("單價");

                entity.Property(e => e.tax).HasColumnType("decimal(19, 4)");
            });

            modelBuilder.Entity<ft_broker>(entity =>
            {
                entity.HasKey(e => e.broker_no);

                entity.Property(e => e.broker_no)
                    .HasMaxLength(7)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fee).HasColumnType("money");

                entity.Property(e => e.feeo).HasColumnType("money");

                entity.Property(e => e.unityid)
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<ft_daily_margin>(entity =>
            {
                entity.HasKey(e => new { e.broker_no, e.account, e.tran_date });

                entity.Property(e => e.broker_no)
                    .HasMaxLength(7)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account)
                    .HasMaxLength(16)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.ini_margin).HasColumnType("money");

                entity.Property(e => e.mt_margin).HasColumnType("money");
            });

            modelBuilder.Entity<ft_margin_tran>(entity =>
            {
                entity.HasKey(e => e.tran_no);

                entity.Property(e => e.tran_no)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account)
                    .IsRequired()
                    .HasMaxLength(16)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.amount).HasColumnType("money");

                entity.Property(e => e.broker_no)
                    .IsRequired()
                    .HasMaxLength(7)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tax)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ft_price>(entity =>
            {
                entity.HasKey(e => new { e.tran_date, e.ft_no, e.ft_ym, e.cp_type, e.ex_value });

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.ft_no)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ft_ym)
                    .HasMaxLength(7)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cp_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ex_value).HasColumnType("money");

                entity.Property(e => e.price).HasColumnType("money");
            });

            modelBuilder.Entity<ft_total>(entity =>
            {
                entity.HasKey(e => new { e.broker_no, e.account, e.tran_date, e.tran_no, e.save_date });

                entity.Property(e => e.broker_no)
                    .HasMaxLength(7)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account)
                    .HasMaxLength(16)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_no)
                    .HasMaxLength(25)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_date).HasColumnType("smalldatetime");

                entity.Property(e => e.bs_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cp_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('F')")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ex_value).HasColumnType("money");

                entity.Property(e => e.ft_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ft_ym)
                    .IsRequired()
                    .HasMaxLength(7)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pre_amt).HasColumnType("money");

                entity.Property(e => e.purpose)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_lot).HasColumnType("money");

                entity.Property(e => e.tran_no_c)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_price).HasColumnType("money");
            });

            modelBuilder.Entity<ft_total_hist>(entity =>
            {
                entity.HasKey(e => new { e.broker_no, e.account, e.tran_date, e.tran_no, e.save_date });

                entity.HasIndex(e => new { e.fund_no, e.save_date }, "user_index1")
                    .HasFillFactor(70);

                entity.Property(e => e.broker_no)
                    .HasMaxLength(7)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account)
                    .HasMaxLength(16)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_no)
                    .HasMaxLength(25)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_date).HasColumnType("smalldatetime");

                entity.Property(e => e.bs_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cp_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('F')")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ex_value).HasColumnType("money");

                entity.Property(e => e.ft_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ft_ym)
                    .IsRequired()
                    .HasMaxLength(7)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pre_amt).HasColumnType("money");

                entity.Property(e => e.purpose)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_lot).HasColumnType("money");

                entity.Property(e => e.tran_no_c)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_price).HasColumnType("money");
            });

            modelBuilder.Entity<ft_tran>(entity =>
            {
                entity.HasKey(e => new { e.broker_no, e.account, e.tran_date, e.tran_no });

                entity.Property(e => e.broker_no)
                    .HasMaxLength(7)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account)
                    .HasMaxLength(16)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_no)
                    .HasMaxLength(25)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bs_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cp_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('F')")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ex_value).HasColumnType("money");

                entity.Property(e => e.ft_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ft_ym)
                    .IsRequired()
                    .HasMaxLength(7)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pre_amt).HasColumnType("money");

                entity.Property(e => e.purpose)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_fee).HasColumnType("money");

                entity.Property(e => e.tran_lot).HasColumnType("money");

                entity.Property(e => e.tran_no_c)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_price).HasColumnType("money");

                entity.Property(e => e.tran_tax).HasColumnType("money");
            });

            modelBuilder.Entity<ft_trandtl>(entity =>
            {
                entity.HasKey(e => new { e.broker_no, e.account, e.tran_date, e.tran_no, e.org_tran_date, e.org_tran_no });

                entity.Property(e => e.broker_no)
                    .HasMaxLength(7)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account)
                    .HasMaxLength(16)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_no)
                    .HasMaxLength(25)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.org_tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.org_tran_no)
                    .HasMaxLength(25)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bs_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cp_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('F')")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ex_value).HasColumnType("money");

                entity.Property(e => e.ft_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ft_ym)
                    .IsRequired()
                    .HasMaxLength(7)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.offset_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.org_pre_amt).HasColumnType("money");

                entity.Property(e => e.org_tran_price).HasColumnType("money");

                entity.Property(e => e.pre_amt).HasColumnType("money");

                entity.Property(e => e.purpose)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_fee).HasColumnType("money");

                entity.Property(e => e.tran_lot).HasColumnType("money");

                entity.Property(e => e.tran_no_c)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_price).HasColumnType("money");

                entity.Property(e => e.tran_tax).HasColumnType("money");
            });

            modelBuilder.Entity<ftp_upload_log>(entity =>
            {
                entity.HasKey(e => new { e.op_time, e.op_user, e.user_prog });

                entity.Property(e => e.op_time)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.op_user).HasMaxLength(30);

                entity.Property(e => e.user_prog).HasMaxLength(30);

                entity.Property(e => e.mono)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.rpt_end_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<fu_restdate>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.restdate, "IX_fu_restdate")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor(70);

                entity.Property(e => e.accounting)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("(0)")
                    .HasComment("是否作帳")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.month).HasComment("月份");

                entity.Property(e => e.restdate)
                    .HasColumnType("smalldatetime")
                    .HasComment("放假日");
            });

            modelBuilder.Entity<fund_base>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ccy)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_name)
                    .IsRequired()
                    .HasMaxLength(40)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fund_charge>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bond_no_a)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_price).HasColumnType("money");

                entity.Property(e => e.bond_unit).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no_a)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_price).HasColumnType("money");

                entity.Property(e => e.fund_unit).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<fund_file>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e._lock)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("lock")
                    .HasDefaultValueSql("(0)")
                    .HasComment("基金鎖定(否)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acc_cost)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acc_op)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("會計人員代號(emp_base.sales_id)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.addr1)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("聯絡地址一")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.addr2)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("聯絡地址二")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.attitude)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("(1)")
                    .HasComment("基金屬性(code_file.item_type = ‘F1’)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ban)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .HasComment("基金統編")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .HasComment("保管銀行帳號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasComment("保管銀行代號(sb_broker.broker_co)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_rate)
                    .HasColumnType("money")
                    .HasComment("活存利率");

                entity.Property(e => e.beg_date)
                    .HasColumnType("datetime")
                    .HasComment("成立日期");

                entity.Property(e => e.birth_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("生日/成立日");

                entity.Property(e => e.branch_no)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasComment("分行代號(sb_broker.broker_code)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.charge_man)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .HasComment("負責人")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.end_date)
                    .HasColumnType("datetime")
                    .HasComment("終止日期");

                entity.Property(e => e.fax_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .HasComment("傳真")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fee)
                    .HasColumnType("money")
                    .HasComment("保管費率");

                entity.Property(e => e.fee_cost)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fee_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("保管費計費起日");

                entity.Property(e => e.fee_day).HasComment("保管費半年付費日");

                entity.Property(e => e.fee_rate)
                    .HasColumnType("money")
                    .HasComment("未達持股費用折扣率");

                entity.Property(e => e.fee_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("(1)")
                    .HasComment("管理費計費方式(code_file.item_type = ‘B2’)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("基金名稱")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_name_vlife)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("基金代號(fund_file.fund_no)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no_vlife)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_noa)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ins_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("建檔日期");

                entity.Property(e => e.int_day).HasComment("保管費半年付費日");

                entity.Property(e => e.int_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("(1)")
                    .HasComment("活存息計息方式(code_file.item_type =’B3’)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.manage_fee)
                    .HasColumnType("money")
                    .HasComment("經理費率");

                entity.Property(e => e.manage_op)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("基金經理人代號(emp_base.sales_id)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.managefee_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("經理費計費起日");

                entity.Property(e => e.min_fee)
                    .HasColumnType("money")
                    .HasComment("每月最低保管費");

                entity.Property(e => e.min_manage_fee)
                    .HasColumnType("money")
                    .HasComment("每月最低經理費");

                entity.Property(e => e.nav)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)")
                    .HasComment("開帳淨資產價值");

                entity.Property(e => e.nav_round)
                    .HasDefaultValueSql("(2)")
                    .HasComment("單位淨值小數點位數");

                entity.Property(e => e.p_type)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("(1)")
                    .HasComment("身分別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sales_op)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .HasComment("業務人員代號(emp_base.sales_id)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sb_op)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("資金調度員代號(emp_base.sales_id)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_op)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("股票交易員代號(emp_base.sales_id)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.start_date)
                    .HasColumnType("datetime")
                    .HasComment("開帳日期");

                entity.Property(e => e.stock_rate)
                    .HasColumnType("money")
                    .HasComment("最低持股比率");

                entity.Property(e => e.tel_no_1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .HasComment("電話一")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tel_no_2)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .HasComment("電話二")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.unit_round)
                    .HasDefaultValueSql("(2)")
                    .HasComment("單位數小數點位數");

                entity.Property(e => e.units)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)")
                    .HasComment("開帳單位數");

                entity.Property(e => e.zip_code_1)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasDefaultValueSql("('')")
                    .HasComment("郵遞區號一(code_file.item_type = ‘Z1’)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.zip_code_2)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasDefaultValueSql("('')")
                    .HasComment("郵遞區號二")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fund_portfolio>(entity =>
            {
                entity.HasKey(e => e.FundID)
                    .HasName("PK_fund_portfolio_FundID");

                entity.Property(e => e.FundID)
                    .HasMaxLength(15)
                    .HasComment("??隞??")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(20)
                    .HasComment("??憿 (AFS嚗?靘?柴RD嚗漱??TM嚗???AM嚗瘣餌窗)");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .HasComment("撟?");

                entity.Property(e => e.Custodian)
                    .HasMaxLength(10)
                    .HasComment("'保管機構'");

                entity.Property(e => e.DepID)
                    .HasMaxLength(50)
                    .HasComment("?撅祇?");

                entity.Property(e => e.DepTeamID)
                    .HasMaxLength(50)
                    .HasComment("隤?蝯");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasComment("蝯迫?交?");

                entity.Property(e => e.FundCategory)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("銝??1, 憪?:2, OIU:3");

                entity.Property(e => e.FundCode)
                    .HasMaxLength(20)
                    .HasComment("Code");

                entity.Property(e => e.FundName)
                    .HasMaxLength(50)
                    .HasComment("???迂");

                entity.Property(e => e.FundSName)
                    .HasMaxLength(50)
                    .HasComment("??蝪∠迂");

                entity.Property(e => e.GTIAccount)
                    .HasMaxLength(15)
                    .HasComment("GTI Account");

                entity.Property(e => e.InvestArea)
                    .HasMaxLength(20)
                    .HasComment("?????啣?");

                entity.Property(e => e.IsProfessional).HasComment("'專案/信託'");

                entity.Property(e => e.PAccount)
                    .HasMaxLength(15)
                    .HasComment("P Account");

                entity.Property(e => e.PolicyClass)
                    .HasMaxLength(20)
                    .HasComment("撣喳???(Distribution:??, IndustryA:?喟絞A, IntSensitive:?抵?, IntSensitive B:?抵?B, Normal:銝?蝝?");

                entity.Property(e => e.SettleType)
                    .HasMaxLength(10)
                    .HasComment("'交割方式'");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasComment("韏瑕??交?");

                entity.Property(e => e.UpdateTime)
                    .HasColumnType("datetime")
                    .HasComment("靽格?交?");

                entity.Property(e => e.UpdateUser)
                    .HasMaxLength(50)
                    .HasComment("靽格鈭箏");

                entity.Property(e => e.fund_level)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<fund_price>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.fund_code, e.tran_date }, "fundprice1")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.Property(e => e.fund_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.price).HasColumnType("decimal(19, 9)");

                entity.Property(e => e.seq_no)
                    .HasColumnType("decimal(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<fx_ExchRate>(entity =>
            {
                entity.HasKey(e => new { e.BrokerCode, e.TradeDate })
                    .HasName("PK_tblBankExchRate");

                entity.Property(e => e.BrokerCode)
                    .HasMaxLength(4)
                    .HasComment("銀行代碼")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.TradeDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<fx_ImportLog>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CompuerName).HasMaxLength(50);

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.crtdate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<fx_Purchase_Transactions>(entity =>
            {
                entity.HasKey(e => e.purchase_serial);

                entity.Property(e => e.account_name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.account_number)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.base_currency_code)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.commission_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.currency)
                    .IsRequired()
                    .HasMaxLength(30)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.income_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.other_expenses_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.principal_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.quantity).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.section)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.security_description)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.security_description2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.security_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_type)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settlement_date).HasColumnType("datetime");

                entity.Property(e => e.trade_date).HasColumnType("datetime");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.transaction_id)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.transaction_type_code)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<fx_Purchase_Transactions_hist>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.account_name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.account_number)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.base_currency_code)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.commission_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.currency)
                    .IsRequired()
                    .HasMaxLength(30)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.income_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.other_expenses_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.principal_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.quantity).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.section)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.security_description)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.security_description2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.security_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_type)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settlement_date).HasColumnType("datetime");

                entity.Property(e => e.trade_date).HasColumnType("datetime");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.transaction_id)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.transaction_type_code)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<fx_Sale_Transactions>(entity =>
            {
                entity.HasKey(e => e.sale_serial);

                entity.Property(e => e.account_name)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.account_number)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.base_currency_code)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.cost_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.currency)
                    .IsRequired()
                    .HasMaxLength(30)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.income_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.principal_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.quantity).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.section)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.securities_sold)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.security_description2)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.security_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_type)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settlement_date).HasColumnType("datetime");

                entity.Property(e => e.trade_date).HasColumnType("datetime");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.transaction_id)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.transaction_type_code)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<fx_Sale_Transactions_hist>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.account_name)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.account_number)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.base_currency_code)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.cost_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.currency)
                    .IsRequired()
                    .HasMaxLength(30)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.income_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.principal_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.quantity).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.section)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.securities_sold)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.security_description2)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.security_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_type)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settlement_date).HasColumnType("datetime");

                entity.Property(e => e.trade_date).HasColumnType("datetime");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.transaction_id)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.transaction_type_code)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<fx_Trade_Receivables_Payables>(entity =>
            {
                entity.HasKey(e => e.item_serial);

                entity.Property(e => e.account_number)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.income_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.principal_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.quantity).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.security_description)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.security_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_type)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settlement_date).HasColumnType("datetime");

                entity.Property(e => e.trade_currency)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.trade_date).HasColumnType("datetime");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.transaction_type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<fx_Trade_Receivables_Payables_hist>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.account_number)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.income_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.principal_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.quantity).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.security_description)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.security_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_type)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settlement_date).HasColumnType("datetime");

                entity.Property(e => e.trade_currency)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.trade_date).HasColumnType("datetime");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.transaction_type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<fx_account>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Classification)
                    .HasMaxLength(255)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.Non_USD__Account_NO_)
                    .HasMaxLength(255)
                    .HasColumnName("Non-USD _Account NO#")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.Trustee__Bank)
                    .HasMaxLength(255)
                    .HasColumnName("Trustee_ Bank")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acc_subtitle)
                    .HasMaxLength(255)
                    .HasComment("會計子目")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acc_title)
                    .HasMaxLength(255)
                    .HasComment("會計科目")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccount)
                    .HasMaxLength(255)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.會計科子_目編號)
                    .HasMaxLength(255)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fx_account_execute>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_no)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(0)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.emp)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fx_account_file>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasComment("會計分類")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account)
                    .HasMaxLength(20)
                    .HasComment("帳戶")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account_seq).HasComment("帳戶順序");

                entity.Property(e => e.attitude)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("專案或信托")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_kind)
                    .HasMaxLength(10)
                    .HasComment("債券種類")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_type_base)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.chk_china)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.chk_taiwan)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.derivatives)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength();

                entity.Property(e => e.fund_ename)
                    .HasMaxLength(50)
                    .HasComment("帳戶英文名")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("帳戶名稱")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("帳戶別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fx_bank)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fx_type)
                    .HasMaxLength(10)
                    .HasComment("券種種類")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.roundnum).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<fx_bank_acc>(entity =>
            {
                entity.HasKey(e => new { e.type, e.bank_no, e.state })
                    .HasName("PK_fx_bank_Acc");

                entity.Property(e => e.type)
                    .HasMaxLength(2)
                    .HasComment("種類  對到fx_found_file.attitude (03: 信托    02:專案)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_no)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acc_name)
                    .HasMaxLength(50)
                    .HasComment("戶名")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acno)
                    .HasMaxLength(20)
                    .HasComment("account no")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_alias)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("銀行簡稱")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.paying_bank)
                    .HasMaxLength(50)
                    .HasComment("解款行")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fx_base>(entity =>
            {
                entity.HasKey(e => e.security_id);

                entity.Property(e => e.security_id)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.accrucurr_code)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.cupon).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fair_level)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.isin).HasMaxLength(50);

                entity.Property(e => e.maturity).HasColumnType("datetime");

                entity.Property(e => e.secu_desc1).HasMaxLength(150);

                entity.Property(e => e.security_type)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fx_base_back>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.accrucurr_code).HasMaxLength(10);

                entity.Property(e => e.cupon).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fair_level).HasMaxLength(2);

                entity.Property(e => e.isin).HasMaxLength(50);

                entity.Property(e => e.maturity).HasColumnType("datetime");

                entity.Property(e => e.secu_desc1).HasMaxLength(150);

                entity.Property(e => e.security_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_type)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fx_category>(entity =>
            {
                entity.HasKey(e => e.security_type);

                entity.Property(e => e.security_type)
                    .HasMaxLength(250)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_kind)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fx_type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.gl_type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fx_chg_security_id>(entity =>
            {
                entity.HasKey(e => new { e.account, e.chg_date, e.security_id_old, e.security_id });

                entity.Property(e => e.account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.chg_date).HasColumnType("datetime");

                entity.Property(e => e.security_id_old)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_id)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.currency_code).HasMaxLength(10);
            });

            modelBuilder.Entity<fx_code_file>(entity =>
            {
                entity.HasKey(e => new { e.item_type, e.item_code });

                entity.Property(e => e.item_type).HasMaxLength(50);

                entity.Property(e => e.item_code)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.class_code).HasMaxLength(5);

                entity.Property(e => e.class_type).HasMaxLength(255);

                entity.Property(e => e.eng_name).HasMaxLength(255);

                entity.Property(e => e.memo).HasMaxLength(255);

                entity.Property(e => e.name).HasMaxLength(255);

                entity.Property(e => e.need_check).HasDefaultValueSql("((0))");

                entity.Property(e => e.sort_serial).HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<fx_deal>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action).HasMaxLength(100);

                entity.Property(e => e.amount_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.attitude)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_I_O).HasMaxLength(2);

                entity.Property(e => e.base_curr).HasMaxLength(10);

                entity.Property(e => e.bond_kind)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.curr_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.detail_transaction_type).HasMaxLength(100);

                entity.Property(e => e.effective_date).HasColumnType("datetime");

                entity.Property(e => e.ex_rate).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.exrate_benefit_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.exrate_benefit_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fee_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fee_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fee_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_base_count).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_local_count).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_ntd_count).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fx_type)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.int_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.int_local)
                    .HasColumnType("decimal(27, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.int_ntd)
                    .HasColumnType("decimal(27, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.net_base).HasColumnType("decimal(27, 2)");

                entity.Property(e => e.net_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.ntd_rate).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.price_benefit_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.price_benefit_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.price_benefit_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.ref_account)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_id)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_type)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settlement_date).HasColumnType("datetime");

                entity.Property(e => e.shares_units).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.trade_date).HasColumnType("datetime");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.tran_no).HasMaxLength(15);

                entity.Property(e => e.transaction_id)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fx_deal_hist>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action).HasMaxLength(100);

                entity.Property(e => e.amount_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.attitude)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_I_O).HasMaxLength(50);

                entity.Property(e => e.base_curr).HasMaxLength(50);

                entity.Property(e => e.bond_kind)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.curr_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.detail_transaction_type).HasMaxLength(100);

                entity.Property(e => e.effective_date).HasColumnType("datetime");

                entity.Property(e => e.ex_rate).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.exrate_benefit_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.exrate_benefit_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fee_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fee_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fee_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_base_count).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_local_count).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_ntd_count).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fx_type)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.int_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.int_local)
                    .HasColumnType("decimal(27, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.int_ntd)
                    .HasColumnType("decimal(27, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.net_base).HasColumnType("decimal(27, 2)");

                entity.Property(e => e.net_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.ntd_rate).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.price_benefit_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.price_benefit_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.price_benefit_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.ref_account)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_id)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_type)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settlement_date).HasColumnType("datetime");

                entity.Property(e => e.shares_units).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.trade_date).HasColumnType("datetime");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.tran_no).HasMaxLength(15);

                entity.Property(e => e.transaction_id)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fx_deal_hist_aa>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action).HasMaxLength(100);

                entity.Property(e => e.amount_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.attitude)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_I_O).HasMaxLength(50);

                entity.Property(e => e.base_curr).HasMaxLength(50);

                entity.Property(e => e.bond_kind)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.curr_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.detail_transaction_type).HasMaxLength(100);

                entity.Property(e => e.effective_date).HasColumnType("datetime");

                entity.Property(e => e.ex_rate).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.exrate_benefit_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.exrate_benefit_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fee_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fee_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fee_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_base_count).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_local_count).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_ntd_count).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fx_type)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.int_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.int_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.int_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_base).HasColumnType("decimal(27, 2)");

                entity.Property(e => e.net_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.ntd_rate).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.price_benefit_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.price_benefit_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.price_benefit_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.ref_account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_id)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_type)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settlement_date).HasColumnType("datetime");

                entity.Property(e => e.shares_units).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.trade_date).HasColumnType("datetime");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.tran_no).HasMaxLength(15);

                entity.Property(e => e.transaction_id)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fx_derivatives>(entity =>
            {
                entity.HasKey(e => e.tran_no);

                entity.Property(e => e.tran_no).HasMaxLength(15);

                entity.Property(e => e.account)
                    .HasMaxLength(15)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account_seq)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.curr_code).HasMaxLength(10);

                entity.Property(e => e.effective_date).HasColumnType("datetime");

                entity.Property(e => e.net_amount).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_amount_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_amount_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.settlement_date).HasColumnType("datetime");

                entity.Property(e => e.trade_date).HasColumnType("datetime");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.type)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fx_derivatives_hist>(entity =>
            {
                entity.HasKey(e => e.tran_no);

                entity.Property(e => e.tran_no).HasMaxLength(15);

                entity.Property(e => e.account)
                    .HasMaxLength(15)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account_seq)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.curr_code).HasMaxLength(10);

                entity.Property(e => e.effective_date).HasColumnType("datetime");

                entity.Property(e => e.net_amount).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_amount_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_amount_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.settlement_date).HasColumnType("datetime");

                entity.Property(e => e.trade_date).HasColumnType("datetime");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.type)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fx_diff_temp>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.curr_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.emp)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.last_date).HasColumnType("datetime");

                entity.Property(e => e.net_amount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.serial).ValueGeneratedOnAdd();

                entity.Property(e => e.trade_date).HasColumnType("datetime");
            });

            modelBuilder.Entity<fx_eval_info>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.account)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.buy_nt_cost).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.eval_af_cost_nt).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.eval_af_exchange_profit).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.eval_af_market_value_nt).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.eval_bef_cost_nt).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.eval_date).HasColumnType("datetime");

                entity.Property(e => e.month_amortisation_amt_nt).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_accrued_income).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.old_nt_cost).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.price_diff_profile).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.saleEx_profile).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.sale_net_Amount_nt).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.sale_nt_cost).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.sale_nt_profit).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fx_file>(entity =>
            {
                entity.HasKey(e => new { e.tran_date, e.curr_code })
                    .IsClustered(false);

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("交易日期");

                entity.Property(e => e.curr_code)
                    .HasMaxLength(4)
                    .HasComment("現在交易幣別");

                entity.Property(e => e.nt_rate)
                    .HasColumnType("decimal(19, 12)")
                    .HasComment("台幣買入匯率");

                entity.Property(e => e.us_rate).HasColumnType("decimal(19, 12)");
            });

            modelBuilder.Entity<fx_fund_file>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e._lock)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("lock")
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength()
                    .HasComment("基金鎖定(否)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acc_op)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("會計人員代號(emp_base.sales_id)");

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.addr1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("聯絡地址一")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.addr2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("聯絡地址二")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.af_next_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("系統下二營業日");

                entity.Property(e => e.attitude)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("基金屬性(code_file.item_type = ‘F1’)");

                entity.Property(e => e.ban)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("基金統編")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_acct)
                    .HasMaxLength(20)
                    .HasComment("保管銀行帳號");

                entity.Property(e => e.bank_no)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("保管銀行代號(sb_broker.broker_co)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_rate)
                    .HasColumnType("money")
                    .HasComment("活存利率");

                entity.Property(e => e.beg_date)
                    .HasColumnType("datetime")
                    .HasComment("成立日期");

                entity.Property(e => e.birth_date)
                    .HasColumnType("datetime")
                    .HasComment("生日/成立日");

                entity.Property(e => e.bond_kind)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.branch_no)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("分行代號(sb_broker.broker_code)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.charge_man)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("負責人")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.end_date)
                    .HasColumnType("datetime")
                    .HasComment("終止日期");

                entity.Property(e => e.fax_no)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("傳真")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fee)
                    .HasColumnType("money")
                    .HasComment("保管費率");

                entity.Property(e => e.fee_date)
                    .HasColumnType("datetime")
                    .HasComment("保管費計費起日");

                entity.Property(e => e.fee_day).HasComment("保管費半年付費日");

                entity.Property(e => e.fee_rate)
                    .HasColumnType("money")
                    .HasComment("未達持股費用折扣率");

                entity.Property(e => e.fee_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("管理費計費方式(code_file.item_type = ‘B2’)");

                entity.Property(e => e.fund_ename)
                    .HasMaxLength(50)
                    .HasComment("基金名稱")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_id)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("基金公會代號");

                entity.Property(e => e.fund_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("基金名稱");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("基金代號(fund_file.fund_no)");

                entity.Property(e => e.fx_type)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ins_date)
                    .HasColumnType("datetime")
                    .HasComment("建檔日期");

                entity.Property(e => e.int_day).HasComment("保管費半年付費日");

                entity.Property(e => e.int_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("活存息計息方式(code_file.item_type =’B3’)");

                entity.Property(e => e.inv_area)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)")
                    .IsFixedLength();

                entity.Property(e => e.last_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("系統上一營業日");

                entity.Property(e => e.manage_fee)
                    .HasColumnType("money")
                    .HasComment("經理費率");

                entity.Property(e => e.manage_op)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("基金經理人代號(emp_base.sales_id)");

                entity.Property(e => e.managefee_date)
                    .HasColumnType("datetime")
                    .HasComment("經理費計費起日");

                entity.Property(e => e.min_fee)
                    .HasColumnType("money")
                    .HasComment("每月最低保管費");

                entity.Property(e => e.min_manage_fee)
                    .HasColumnType("money")
                    .HasComment("每月最低經理費");

                entity.Property(e => e.nav)
                    .HasColumnType("money")
                    .HasComment("開帳淨資產價值");

                entity.Property(e => e.nav_round).HasComment("單位淨值小數點位數");

                entity.Property(e => e.next_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("系統下一營業日");

                entity.Property(e => e.p_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("身分別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.run_type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sales_op)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("業務人員代號(emp_base.sales_id)");

                entity.Property(e => e.sb_op)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("資金調度員代號(emp_base.sales_id)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_op)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("股票交易員代號(emp_base.sales_id)");

                entity.Property(e => e.start_date)
                    .HasColumnType("datetime")
                    .HasComment("開帳日期");

                entity.Property(e => e.stock_rate)
                    .HasColumnType("money")
                    .HasComment("最低持股比率");

                entity.Property(e => e.sys_char)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("系統目前作帳時程")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("系統目前作帳日期");

                entity.Property(e => e.tel_no_1)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("電話一")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tel_no_2)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("電話二")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.trust_acct)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.trust_bank)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.trust_branch)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.unit_round).HasComment("單位數小數點位數");

                entity.Property(e => e.units)
                    .HasColumnType("money")
                    .HasComment("開帳單位數");

                entity.Property(e => e.zip_code_1)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("郵遞區號一(code_file.item_type = ‘Z1’)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.zip_code_2)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("郵遞區號二")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fx_gl_setup>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account)
                    .HasMaxLength(255)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .HasMaxLength(3)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.attitude)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_kind)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.drcr)
                    .HasMaxLength(255)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.gdesc)
                    .HasMaxLength(255)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.gl)
                    .HasMaxLength(255)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo)
                    .HasMaxLength(255)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.serial2).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.sl1)
                    .HasMaxLength(255)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_no)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.type)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.類別)
                    .HasMaxLength(255)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fx_hist>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.buy_cost_nt)
                    .HasColumnType("decimal(27, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.buy_int)
                    .HasColumnType("decimal(27, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.buy_int_nt)
                    .HasColumnType("decimal(27, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.buy_unit_price)
                    .HasColumnType("decimal(27, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.curr_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.detail_type)
                    .HasMaxLength(150)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.effective_date).HasColumnType("datetime");

                entity.Property(e => e.ex_rate).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.net_amount).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_amount_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_amount_nt).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_amount_sett)
                    .HasColumnType("decimal(27, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.net_amount_sett_nt)
                    .HasColumnType("decimal(27, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.proc_fee)
                    .HasColumnType("decimal(27, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.proc_fee_nt)
                    .HasColumnType("decimal(27, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ref_account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.secu_desc1)
                    .HasMaxLength(150)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.secu_desc2)
                    .HasMaxLength(150)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_id)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settlement_date).HasColumnType("datetime");

                entity.Property(e => e.shares_units).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.summary_type)
                    .HasMaxLength(150)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.trade_date).HasColumnType("datetime");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.tran_no)
                    .HasMaxLength(15)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fx_holding>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.accrued_income_curr_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.attitude)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.base_curr)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_kind)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.curr_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.different_amt).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_base_total).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_local_total).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_ntd_total).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_no).HasMaxLength(2);

                entity.Property(e => e.fx_type)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.int_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.int_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.int_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.market_value_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.market_value_cost).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.market_value_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.market_value_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_accrued_income_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_accrued_income_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_accrued_income_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.security_id)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.shares_units).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.shares_units_total).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.tran_date).HasColumnType("datetime");
            });

            modelBuilder.Entity<fx_holding_hist>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.accrued_income_curr_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.attitude)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.base_curr)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_kind)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.curr_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.different_amt).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_base_total).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_local_total).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_ntd_total).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_no).HasMaxLength(2);

                entity.Property(e => e.fx_type)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.int_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.int_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.int_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.market_value_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.market_value_cost).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.market_value_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.market_value_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_accrued_income_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_accrued_income_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_accrued_income_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.security_id)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.shares_units).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.shares_units_total).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.tran_date).HasColumnType("datetime");
            });

            modelBuilder.Entity<fx_int_file>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.accrued_tax)
                    .HasColumnType("numeric(18, 2)")
                    .HasComment("應計稅額");

                entity.Property(e => e.actual_days).HasComment("計息天數");

                entity.Property(e => e.beg_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("計息起日");

                entity.Property(e => e.capital)
                    .HasColumnType("money")
                    .HasComment("存入本金");

                entity.Property(e => e.chk_price).HasDefaultValueSql("(0)");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasComment("交易編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.deal_type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("交易種類(買入領息檔 deal_type='00'  ;賣出領息檔  deal_type='01')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.end_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("計息止日");

                entity.Property(e => e.fd_type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("換息方式(01-每月換息 02-Quarterly 03-Semi-annually 04-每年換息05-期滿換息)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("基金代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fx_rate)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.int_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("預約領息日");

                entity.Property(e => e.int_rate)
                    .HasColumnType("numeric(19, 4)")
                    .HasComment("買入利率");

                entity.Property(e => e.int_rate2)
                    .HasColumnType("money")
                    .HasComment("課稅利率");

                entity.Property(e => e.int_type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("計息方式(浮動/固定)(code_file.item_type = 't4') (1-固定利率 2 -浮動利率 )")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.interest)
                    .HasColumnType("money")
                    .HasComment("本期利息");

                entity.Property(e => e.net)
                    .HasColumnType("money")
                    .HasComment("本期利息淨額");

                entity.Property(e => e.nt_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.period_type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("計期方式(code_file.item_type = 'FP')(01-Act/365  02-30/360  03-Act/360 04-Act/Act  )")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rec_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("實際領息日期");

                entity.Property(e => e.rec_status).HasComment("交易狀態");

                entity.Property(e => e.recv_int)
                    .HasColumnType("money")
                    .HasComment("實際領息金額");

                entity.Property(e => e.recv_net)
                    .HasColumnType("money")
                    .HasComment("實際領息淨額");

                entity.Property(e => e.recv_tax)
                    .HasColumnType("money")
                    .HasComment("實際領息稅額");

                entity.Property(e => e.tax)
                    .HasColumnType("money")
                    .HasComment("本期稅額");
            });

            modelBuilder.Entity<fx_international>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Price).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.account_number)
                    .HasMaxLength(20)
                    .HasComment("國外MBS帳戶")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.al).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.broker)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.collateral).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.coupon).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.cusip)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.data_kind)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.factor).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.interest)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("前手息");

                entity.Property(e => e.psa).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.security_id)
                    .HasMaxLength(20)
                    .HasComment("證券代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settlement_date)
                    .HasColumnType("datetime")
                    .HasComment("交割日期");

                entity.Property(e => e.shares_units)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("數量/面額");

                entity.Property(e => e.tot_amt)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("原幣交割金額");

                entity.Property(e => e.trade_date)
                    .HasColumnType("datetime")
                    .HasComment("交易日期");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.ytm).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<fx_mapping_tmp>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CITI_SID).HasMaxLength(50);

                entity.Property(e => e.ISIN).HasMaxLength(50);

                entity.Property(e => e.JP_SID)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fx_market_fair>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate_item).HasMaxLength(50);

                entity.Property(e => e.account)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.chk)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.fair_level).HasMaxLength(2);

                entity.Property(e => e.fund_cost_ntd_total).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.gain_loss).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.market_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.security_id)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.shares_units_total).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<fx_overdue_income>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.account_number)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.overdue_income_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.overdue_income_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.security_id)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("datetime");
            });

            modelBuilder.Entity<fx_security>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.account_name)
                    .HasMaxLength(150)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account_number)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.as_of_market_value_base)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("市場價值");

                entity.Property(e => e.as_of_market_value_local)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("原幣市場價值(原幣)");

                entity.Property(e => e.base_currency_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.category).HasMaxLength(150);

                entity.Property(e => e.cost_value_base)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("成本價值(美金)");

                entity.Property(e => e.cost_value_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.country)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cupon).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.currency_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasComment("基金代號(fund_file.fund_no)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.industry)
                    .HasMaxLength(150)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.isin).HasMaxLength(50);

                entity.Property(e => e.maturity).HasColumnType("datetime");

                entity.Property(e => e.net_accrued_income_base)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("實際所得淨額(美金)");

                entity.Property(e => e.net_accrued_income_local)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("實際所得net(原幣)");

                entity.Property(e => e.percent_of_total_portfolio).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.percent_of_unrealized_gain_loss_base)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("未實現的損益百分比(美金)");

                entity.Property(e => e.price).HasColumnType("decimal(27, 10)");

                entity.Property(e => e.sector)
                    .HasMaxLength(150)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_description1)
                    .HasMaxLength(150)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_description2)
                    .HasMaxLength(150)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_id)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_type)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.segment).HasMaxLength(150);

                entity.Property(e => e.serial)
                    .HasColumnType("decimal(10, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.shares_units).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.tran_date)
                    .HasColumnType("datetime")
                    .HasComment("交易日期");

                entity.Property(e => e.unrealized_gain_loss_base)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("未實現的損益(美金)");

                entity.Property(e => e.unrealized_gain_loss_local)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("未實現的損益(原幣)");
            });

            modelBuilder.Entity<fx_security_hist>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.account_name)
                    .HasMaxLength(150)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account_number)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.as_of_market_value_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.as_of_market_value_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.base_currency_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.category).HasMaxLength(150);

                entity.Property(e => e.cost_value_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.cost_value_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.country)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cupon).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.currency_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.industry)
                    .HasMaxLength(150)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.isin).HasMaxLength(50);

                entity.Property(e => e.maturity).HasColumnType("datetime");

                entity.Property(e => e.net_accrued_income_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_accrued_income_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.percent_of_total_portfolio).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.percent_of_unrealized_gain_loss_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.price).HasColumnType("decimal(27, 10)");

                entity.Property(e => e.sector)
                    .HasMaxLength(150)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_description1)
                    .HasMaxLength(150)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_description2)
                    .HasMaxLength(150)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_id)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_type)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.segment).HasMaxLength(150);

                entity.Property(e => e.shares_units).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.unrealized_gain_loss_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.unrealized_gain_loss_local).HasColumnType("decimal(27, 9)");
            });

            modelBuilder.Entity<fx_total>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.account)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.base_curr_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.buy_local_cost)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月買進原幣成本= Net Amount  Local");

                entity.Property(e => e.buy_nt_cost)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月買進台幣成本= Net Amount  Local * 月底評價匯率");

                entity.Property(e => e.category)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cost_value)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月餘額攤銷後原幣總成本");

                entity.Property(e => e.cost_value_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.country).HasMaxLength(10);

                entity.Property(e => e.cupon).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.currency_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.eval_af_cost_nt)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("評價後台幣總成本=ROUND(本月餘額攤銷後原幣總成本 * 月底評價匯率,0)");

                entity.Property(e => e.eval_af_exchange_profit)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("評價本月匯兌損益=ROUND(本月餘額攤銷後原幣總成本 * 月底評價匯率,0) -(上月餘額台幣總成本 + 本月買進台幣成本-本有賣出台幣成本)");

                entity.Property(e => e.eval_af_market_value_nt)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("評價後台幣總市價=ROUND(本月餘額攤銷後原幣總市價 * 月底評價匯率,0)");

                entity.Property(e => e.eval_bef_cost_nt)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("評價前台幣總成本 =上月餘額台幣總成本 + 本月買進台幣成本-本有賣出台幣成本");

                entity.Property(e => e.fund_no).HasMaxLength(2);

                entity.Property(e => e.industry).HasMaxLength(150);

                entity.Property(e => e.isin).HasMaxLength(50);

                entity.Property(e => e.market_value)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月餘額攤銷後原幣總市價");

                entity.Property(e => e.market_value_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.market_value_cost).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.maturity).HasColumnType("datetime");

                entity.Property(e => e.month_amortisation_amt)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月餘額本月原幣攤銷金額=本月餘額攤銷後原幣總成本-本月餘額攤銷前原幣總成本");

                entity.Property(e => e.month_amortisation_bf_cost)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月餘額攤銷前原幣總成本=上月餘額原幣總成本 + 本月買進原幣成本 - 本月賣出原幣成本");

                entity.Property(e => e.net_accrued_income)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月餘額應收利息");

                entity.Property(e => e.net_accrued_income_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_accrued_income_curr_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.percent_of_total_portfolio).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.percent_of_unrealized_gain_loss_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.price)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月餘額平均成本= 本月餘額攤銷後原幣總成本 /  本月餘額 (股數/面額) *100");

                entity.Property(e => e.price_diff_profile)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月價差損益= 評價後台幣總市價  - 評價後台幣總成本\r\n--");

                entity.Property(e => e.sale_exchange_profit)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月賣出匯兌損益");

                entity.Property(e => e.sale_local_cost).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.sale_net_Amount)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月賣出原幣成交金額");

                entity.Property(e => e.sale_net_Amount_nt)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月賣出台幣成交金額");

                entity.Property(e => e.sale_net_Amount_nt_profit)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月賣出台幣損益");

                entity.Property(e => e.sale_net_Amount_profit)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月賣出原幣損益=原幣成交金額 - 本月賣出原幣成本");

                entity.Property(e => e.sale_nt_cost).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.sale_units)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月賣出面額/數量");

                entity.Property(e => e.sector).HasMaxLength(150);

                entity.Property(e => e.secu_desc1)
                    .HasMaxLength(150)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.secu_desc2).HasMaxLength(150);

                entity.Property(e => e.security_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_type)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.segment)
                    .IsRequired()
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.shares_units)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月餘額股數/面額 =上月餘額股數/面額+本月買進股數/面額 -本月賣出的數量/面額");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.unrealized_gain_loss).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.unrealized_gain_loss_base).HasColumnType("decimal(27, 9)");
            });

            modelBuilder.Entity<fx_total_delete>(entity =>
            {
                entity.HasKey(e => e.serial);

                entity.Property(e => e.serial)
                    .HasColumnType("decimal(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.account)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action_date).HasColumnType("datetime");

                entity.Property(e => e.base_curr_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.buy_local_cost).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.buy_nt_cost).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.category)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cost_value).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.cost_value_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.country)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.currency_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.eval_af_cost_nt).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.eval_af_exchange_profit).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.eval_af_market_value_nt).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.eval_bef_cost_nt).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.industry)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.market_value).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.market_value_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.market_value_cost).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.month_amortisation_amt).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.month_amortisation_bf_cost).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_accrued_income).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_accrued_income_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_accrued_income_curr_code)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.percent_of_total_portfolio).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.percent_of_unrealized_gain_loss_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.price).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.price_diff_profile).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.sale_exchange_profit).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.sale_local_cost).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.sale_net_Amount).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.sale_net_Amount_nt).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.sale_net_Amount_nt_profit).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.sale_net_Amount_profit).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.sale_nt_cost).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.sale_units).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.sector)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.secu_desc1)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.secu_desc2)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_id)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.segment)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.shares_units).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.unrealized_gain_loss).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.unrealized_gain_loss_base).HasColumnType("decimal(27, 9)");
            });

            modelBuilder.Entity<fx_total_hist>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.account)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.base_curr_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.buy_local_cost)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月買進原幣成本= Net Amount  Local");

                entity.Property(e => e.buy_nt_cost)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月買進台幣成本= Net Amount  Local * 月底評價匯率");

                entity.Property(e => e.category)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cost_value).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.cost_value_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.country).HasMaxLength(10);

                entity.Property(e => e.cupon).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.currency_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.eval_af_cost_nt)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("評價後台幣總成本=ROUND(本月餘額攤銷後原幣總成本 * 月底評價匯率,0)");

                entity.Property(e => e.eval_af_exchange_profit)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("評價本月匯兌損益=ROUND(本月餘額攤銷後原幣總成本 * 月底評價匯率,0) -(上月餘額台幣總成本 + 本月買進台幣成本-本有賣出台幣成本)");

                entity.Property(e => e.eval_af_market_value_nt)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("評價後台幣總市價=ROUND(本月餘額攤銷後原幣總市價 * 月底評價匯率,0)");

                entity.Property(e => e.eval_bef_cost_nt)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("評價前台幣總成本 =上月餘額台幣總成本 + 本月買進台幣成本-本有賣出台幣成本");

                entity.Property(e => e.fund_no).HasMaxLength(2);

                entity.Property(e => e.industry).HasMaxLength(150);

                entity.Property(e => e.isin).HasMaxLength(50);

                entity.Property(e => e.market_value).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.market_value_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.market_value_cost).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.maturity).HasColumnType("datetime");

                entity.Property(e => e.month_amortisation_amt)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月餘額本月原幣攤銷金額=本月餘額攤銷後原幣總成本-本月餘額攤銷前原幣總成本");

                entity.Property(e => e.month_amortisation_bf_cost)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月餘額攤銷前原幣總成本=上月餘額原幣總成本 + 本月買進原幣成本 - 本月賣出原幣成本");

                entity.Property(e => e.net_accrued_income).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_accrued_income_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_accrued_income_curr_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.percent_of_total_portfolio).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.percent_of_unrealized_gain_loss_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.price).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.price_diff_profile)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月價差損益= 評價後台幣總市價  - 評價後台幣總成本\r\n--");

                entity.Property(e => e.sale_exchange_profit)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月賣出匯兌損益");

                entity.Property(e => e.sale_local_cost).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.sale_net_Amount)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月賣出原幣成交金額");

                entity.Property(e => e.sale_net_Amount_nt)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月賣出台幣成交金額");

                entity.Property(e => e.sale_net_Amount_nt_profit)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月賣出台幣損益");

                entity.Property(e => e.sale_net_Amount_profit)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月賣出原幣損益=原幣成交金額 - 本月賣出原幣成本");

                entity.Property(e => e.sale_nt_cost).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.sale_units)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("本月賣出面額/數量");

                entity.Property(e => e.sector).HasMaxLength(150);

                entity.Property(e => e.secu_desc1)
                    .HasMaxLength(150)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.secu_desc2).HasMaxLength(150);

                entity.Property(e => e.security_id)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_type)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.segment)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.shares_units).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.unrealized_gain_loss).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.unrealized_gain_loss_base).HasColumnType("decimal(27, 9)");
            });

            modelBuilder.Entity<fx_tran_delete>(entity =>
            {
                entity.HasKey(e => e.serial);

                entity.Property(e => e.serial)
                    .HasColumnType("decimal(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.buy_cost_nt).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.buy_int).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.buy_int_nt).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.buy_unit_price).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.curr_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.detail_type)
                    .HasMaxLength(150)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.effective_date).HasColumnType("datetime");

                entity.Property(e => e.ex_rate).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.net_amount).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_amount_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_amount_nt).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_amount_sett).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_amount_sett_nt).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.proc_fee).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.proc_fee_nt).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.ref_account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.secu_desc1)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.secu_desc2)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_id)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settlement_date).HasColumnType("datetime");

                entity.Property(e => e.shares_units).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.summary_type)
                    .HasMaxLength(150)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.trade_date).HasColumnType("datetime");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.tran_no)
                    .HasMaxLength(15)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fx_trans>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.buy_cost_nt)
                    .HasColumnType("decimal(27, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.buy_int)
                    .HasColumnType("decimal(27, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.buy_int_nt)
                    .HasColumnType("decimal(27, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.buy_unit_price)
                    .HasColumnType("decimal(27, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.curr_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.detail_type)
                    .HasMaxLength(150)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.effective_date)
                    .HasColumnType("datetime")
                    .HasComment("有效日");

                entity.Property(e => e.ex_rate).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.net_amount).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_amount_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_amount_nt).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_amount_sett)
                    .HasColumnType("decimal(27, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.net_amount_sett_nt)
                    .HasColumnType("decimal(27, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.proc_fee)
                    .HasColumnType("decimal(27, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.proc_fee_nt)
                    .HasColumnType("decimal(27, 9)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ref_account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.secu_desc1)
                    .HasMaxLength(150)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.secu_desc2)
                    .HasMaxLength(150)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_id)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settlement_date)
                    .HasColumnType("datetime")
                    .HasComment("結帳日");

                entity.Property(e => e.shares_units).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.summary_type)
                    .HasMaxLength(150)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.trade_date)
                    .HasColumnType("datetime")
                    .HasComment("交易日期");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.tran_no)
                    .HasMaxLength(15)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fx_transaction>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.account_name).HasMaxLength(150);

                entity.Property(e => e.account_number)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.currency_code)
                    .HasMaxLength(10)
                    .HasComment("原幣別");

                entity.Property(e => e.detail_transaction_type).HasMaxLength(150);

                entity.Property(e => e.effective_date)
                    .HasColumnType("datetime")
                    .HasComment("有效的日期 ");

                entity.Property(e => e.exchange_rate).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasComment("基金代號(fund_file.fund_no)");

                entity.Property(e => e.net_amount_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_amount_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.ntd_rate).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.security_description1)
                    .HasMaxLength(150)
                    .HasComment("證券名稱");

                entity.Property(e => e.security_description2).HasMaxLength(150);

                entity.Property(e => e.security_id).HasMaxLength(20);

                entity.Property(e => e.security_type)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.serial).ValueGeneratedOnAdd();

                entity.Property(e => e.settlement_date)
                    .HasColumnType("datetime")
                    .HasComment("結帳日");

                entity.Property(e => e.shares_units)
                    .HasColumnType("decimal(27, 9)")
                    .HasComment("數量/面額");

                entity.Property(e => e.summary_transaction_type).HasMaxLength(150);

                entity.Property(e => e.trade_date).HasColumnType("datetime");

                entity.Property(e => e.tran_date)
                    .HasColumnType("datetime")
                    .HasComment("交易日期");

                entity.Property(e => e.tran_no)
                    .HasMaxLength(15)
                    .HasComment("單號");

                entity.Property(e => e.transaction_description1).HasMaxLength(150);

                entity.Property(e => e.transaction_description2).HasMaxLength(150);

                entity.Property(e => e.transaction_id)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<fx_transaction_delete>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.account_name).HasMaxLength(50);

                entity.Property(e => e.account_number).HasMaxLength(20);

                entity.Property(e => e.action).HasMaxLength(100);

                entity.Property(e => e.currency_code).HasMaxLength(10);

                entity.Property(e => e.detail_transaction_type).HasMaxLength(150);

                entity.Property(e => e.effective_date).HasColumnType("datetime");

                entity.Property(e => e.exchange_rate).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.fund_no).HasMaxLength(2);

                entity.Property(e => e.net_amount_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_amount_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.ref_account).HasMaxLength(20);

                entity.Property(e => e.security_description1).HasMaxLength(100);

                entity.Property(e => e.security_description2).HasMaxLength(100);

                entity.Property(e => e.security_id).HasMaxLength(20);

                entity.Property(e => e.settlement_date).HasColumnType("datetime");

                entity.Property(e => e.shares_units).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.summary_transaction_type).HasMaxLength(150);

                entity.Property(e => e.trade_date).HasColumnType("datetime");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.tran_no).HasMaxLength(15);

                entity.Property(e => e.transaction_description1).HasMaxLength(150);

                entity.Property(e => e.transaction_description2).HasMaxLength(150);
            });

            modelBuilder.Entity<fx_transaction_hist>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.account_name).HasMaxLength(50);

                entity.Property(e => e.account_number)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action).HasMaxLength(100);

                entity.Property(e => e.currency_code).HasMaxLength(10);

                entity.Property(e => e.detail_transaction_type).HasMaxLength(150);

                entity.Property(e => e.effective_date).HasColumnType("datetime");

                entity.Property(e => e.exchange_rate).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.fund_no).HasMaxLength(2);

                entity.Property(e => e.net_amount_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_amount_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.ntd_rate).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.ref_account)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_description1).HasMaxLength(100);

                entity.Property(e => e.security_description2).HasMaxLength(100);

                entity.Property(e => e.security_id)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.security_type)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settlement_date).HasColumnType("datetime");

                entity.Property(e => e.shares_units).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.summary_transaction_type).HasMaxLength(150);

                entity.Property(e => e.trade_date).HasColumnType("datetime");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.tran_no)
                    .HasMaxLength(15)
                    .HasComment("單號");

                entity.Property(e => e.transaction_description1).HasMaxLength(150);

                entity.Property(e => e.transaction_description2).HasMaxLength(150);

                entity.Property(e => e.transaction_id)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<ics_cash_upload>(entity =>
            {
                entity.HasKey(e => new { e.TRAN_SERIAL_SEQ, e.TRAN_BATCH_SEQ, e.TRAN_DATA_ID })
                    .HasName("PK_ics_fund_upload");

                entity.Property(e => e.TRAN_SERIAL_SEQ)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TRAN_DATA_ID)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.AC_CURRENCY)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.AMOUNT).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.ASSETS_CODE_DTL)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.CURRENCY)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CV_DATE).HasColumnType("date");

                entity.Property(e => e.DEPO_ACCOUNT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EXP_DATE).HasColumnType("date");

                entity.Property(e => e.LOGTIME).HasColumnType("datetime");

                entity.Property(e => e.LOGUSER)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.P_ACCOUNT)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.STOCK_DATE).HasColumnType("date");

                entity.Property(e => e.SUB_COMPANY_CODE)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VERSION)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<il_ILT010>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.pool_no, e.sub_pool, e.tran_date }, "ILFundTransKey1");

                entity.HasIndex(e => e.tran_no, "ILFundTransUKey");

                entity.HasIndex(e => new { e.pool_no, e.sub_pool, e.deal_date, e.source_type }, "npk_il_ILT010");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.base_amt).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.base_cost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.deal_date).HasColumnType("smalldatetime");

                entity.Property(e => e.ex_rate).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.exrate_benefit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.fund_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.il_code)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasDefaultValueSql("('xxxx')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.input_way)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('T')")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.local_amt).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.local_cost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.pool_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.price_benefit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.source_type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sub_pool)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.unit_price).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.volumn).HasColumnType("decimal(18, 9)");
            });

            modelBuilder.Entity<il_action_info>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.action, "IlActionInfoUkey")
                    .IsUnique();

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action_c)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.deal_way).HasDefaultValueSql("((1))");

                entity.Property(e => e.tas_action).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<il_ex_rate>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.tran_date, e.ex_type, e.ccy_type, e.action, e.pool_ccy_type }, "il_ExRateUk")
                    .IsUnique();

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_rate).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ex_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pool_ccy_type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<il_ex_rate_bak>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_rate).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ex_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<il_fund_base>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.fund_code, "ILFundBaseKey1")
                    .IsUnique();

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_alias)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_co)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_name)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_sub_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('FU')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.o_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<il_fund_bp_rate>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bp_rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.fund_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<il_fund_co>(entity =>
            {
                entity.HasKey(e => e.fund_co);

                entity.Property(e => e.fund_co)
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_co_alias)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_co_name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<il_fund_mng_rate>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.fund_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.mng_bank)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.mng_rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<il_fund_price>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.fund_code, e.tran_date }, "il_fundprice1")
                    .IsUnique()
                    .HasFillFactor(90);

                entity.Property(e => e.fund_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_price).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.input_way)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('T')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<il_fund_total>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.tran_date, e.pool_no, e.sub_pool, e.fund_code }, "IlFundTotalUKey")
                    .IsUnique();

                entity.Property(e => e.avg_cost).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.base_cost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.base_exrate_benefit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.base_market_value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.base_price_benefit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.cost_rate).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.ex_rate).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.fund_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.local_cost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.local_market_value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.local_price_benefit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.market_price).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.pool_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sub_pool)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.volumn).HasColumnType("decimal(18, 9)");
            });

            modelBuilder.Entity<il_fund_total_adj>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.avg_cost)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.base_cost)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.base_exrate_benefit)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.base_market_value)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.base_price_benefit)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.cost_rate)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ex_rate)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.fund_code)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.local_cost)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.local_market_value)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.local_price_benefit)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.market_price)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.pool_no)
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sub_pool)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.volumn)
                    .HasColumnType("decimal(18, 9)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<il_fund_total_hist>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.tran_date, e.pool_no, e.sub_pool, e.fund_code }, "ILFundTotalHistUKey")
                    .IsUnique();

                entity.HasIndex(e => new { e.pool_no, e.sub_pool, e.tran_date }, "ILFundTotalKey1");

                entity.Property(e => e.avg_cost).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.base_cost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.base_exrate_benefit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.base_market_value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.base_price_benefit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.cost_rate).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.ex_rate).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.fund_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.local_cost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.local_market_value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.local_price_benefit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.market_price).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.pool_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sub_pool)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.volumn).HasColumnType("decimal(18, 9)");
            });

            modelBuilder.Entity<il_fund_total_tmp>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.avg_cost).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.base_cost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.base_cost1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.cost_rate).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.deal_date)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.fund_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.il_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.key_way)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.local_cost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.local_cost1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.pool_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settle_date)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.source_type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.sub_pool)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.tran_no).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.volumn).HasColumnType("decimal(18, 9)");
            });

            modelBuilder.Entity<il_fund_total_vlife>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.tran_date, e.pool_no, e.il_code, e.fund_code }, "ILFundTotalVlifeUKey")
                    .IsUnique();

                entity.Property(e => e.avg_cost).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.base_cost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.base_exrate_benefit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.base_market_value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.base_price_benefit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.cost_rate).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.ex_rate).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.fund_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.il_code)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.local_cost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.local_market_value).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.local_price_benefit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.market_price).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.pool_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.volumn).HasColumnType("decimal(18, 9)");
            });

            modelBuilder.Entity<il_fund_trans>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.pool_no, e.sub_pool, e.tran_date }, "ILFundTransKey1");

                entity.HasIndex(e => e.tran_date, "ILFundTransKeyDate")
                    .IsClustered();

                entity.HasIndex(e => e.tran_no, "ILFundTransUKey");

                entity.HasIndex(e => new { e.pool_no, e.sub_pool, e.deal_date, e.source_type }, "npk_il_fund_trans");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.base_amt).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.base_cost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.deal_date).HasColumnType("smalldatetime");

                entity.Property(e => e.ex_rate).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.exrate_benefit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.fund_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.il_code)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasDefaultValueSql("('xxxx')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.input_way)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('T')")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.local_amt).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.local_cost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.pool_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.price_benefit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.source_type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sub_pool)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(13)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.unit_price).HasColumnType("decimal(18, 9)");

                entity.Property(e => e.volumn).HasColumnType("decimal(18, 9)");
            });

            modelBuilder.Entity<il_pool_base>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.pool_no, "ILPoolBaseUkey")
                    .IsUnique();

                entity.Property(e => e._class)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("class")
                    .HasDefaultValueSql("('1')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ex_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.mng_bank)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pool_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pool_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pool_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('A')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<il_pool_map>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.il_code, e.fund_code }, "ILPoolMapUkey1")
                    .IsUnique();

                entity.Property(e => e.fund_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.il_code)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.il_name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pool_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<inv_bnd_bal>(entity =>
            {
                entity.HasKey(e => new { e.date, e.code, e.pno, e.fno, e.cap_tp, e.trade_no });

                entity.Property(e => e.date).HasColumnType("date");

                entity.Property(e => e.code)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.fno)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.cap_tp).HasMaxLength(2);

                entity.Property(e => e.trade_no)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e._int)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("int");

                entity.Property(e => e.acc_amortize).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_amt).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_bef_int).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_bef_int_tax).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_buy_premdisc).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_eom_amortize).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_eom_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_eom_exch_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_eom_int).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_eom_int_exch).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_exch_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_int).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_opt_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_qty).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_rl_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_rl_exch_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_rl_int_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_rl_int_exch).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_rl_tax_prepaid).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_sale_amor).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_sale_buy).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_sale_premdisc).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_settle_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_settle_qty).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_tax_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_tax_exch_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_write_down).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_write_down_exch).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.amortize).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.amt).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.bef_int).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.bef_int_tax).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.buy_premdisc).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.cust_qty).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.duration).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.eom_amortize).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.eom_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.eom_int).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.exchrate).HasColumnType("numeric(20, 10)");

                entity.Property(e => e.factor).HasColumnType("numeric(20, 10)");

                entity.Property(e => e.logtime).HasColumnType("datetime");

                entity.Property(e => e.loguser)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.opt_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.org_par_value).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.price).HasColumnType("numeric(20, 10)");

                entity.Property(e => e.qty).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.res_int).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.rl_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.rl_int_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.rl_tax_prepaid).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.sale_amor).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.sale_buy).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.sale_premdisc).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.settle_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.settle_org_par_value).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.settle_qty).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.tax_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.unlist_buy).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.unlist_sell).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.unlist_xchg).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.write_down).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.yield).HasColumnType("numeric(20, 10)");
            });

            modelBuilder.Entity<inv_equ_bal>(entity =>
            {
                entity.HasKey(e => new { e.code, e.pno, e.fno, e.cap_tp, e.date });

                entity.Property(e => e.code)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.fno)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.cap_tp).HasMaxLength(2);

                entity.Property(e => e.date).HasColumnType("date");

                entity.Property(e => e.acc_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_eom_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_eom_exch_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_eoy_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_eoy_exch_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_exch_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_lk_xd_amt).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_market_value).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_rl_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_rl_exch_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_unlist_oth_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_unlist_subs_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_write_down).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_write_down_exch).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_xd_amt).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.applicable_qty).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.cls_price).HasColumnType("numeric(20, 8)");

                entity.Property(e => e.cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.eom_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.eoy_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.exchrate).HasColumnType("numeric(20, 10)");

                entity.Property(e => e.fno_acc_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.fno_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.lk_qty).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.lk_xd_amt).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.logtime).HasColumnType("datetime");

                entity.Property(e => e.loguser)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.market_value).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.qty).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.rl_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.safe_qty).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.settle_qty).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.sys_name)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.unlist_buy).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.unlist_oth_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.unlist_other).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.unlist_sell).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.unlist_subs).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.unlist_subs_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.write_down).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.xd_amt).HasColumnType("numeric(20, 5)");
            });

            modelBuilder.Entity<inv_equ_bal_dt>(entity =>
            {
                entity.HasKey(e => new { e.code, e.pno, e.fno, e.cap_tp, e.date });

                entity.Property(e => e.code)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.fno)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.cap_tp).HasMaxLength(2);

                entity.Property(e => e.date).HasColumnType("date");

                entity.Property(e => e.acc_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_eom_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_eom_exch_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_eoy_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_eoy_exch_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_exch_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_lk_xd_amt).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_market_value).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_rl_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_rl_exch_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_unlist_oth_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_unlist_subs_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_write_down).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_write_down_exch).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_xd_amt).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.applicable_qty).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.cls_price).HasColumnType("numeric(20, 8)");

                entity.Property(e => e.cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.eom_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.eoy_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.exchrate).HasColumnType("numeric(20, 10)");

                entity.Property(e => e.fno_acc_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.fno_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.lk_qty).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.lk_xd_amt).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.logtime).HasColumnType("datetime");

                entity.Property(e => e.loguser)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.market_value).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.qty).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.rl_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.safe_qty).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.settle_qty).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.sys_name)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.unlist_buy).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.unlist_oth_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.unlist_other).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.unlist_sell).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.unlist_subs).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.unlist_subs_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.write_down).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.xd_amt).HasColumnType("numeric(20, 5)");
            });

            modelBuilder.Entity<inv_fnd_bal>(entity =>
            {
                entity.HasKey(e => new { e.code, e.pno, e.fno, e.cap_tp, e.date });

                entity.Property(e => e.code)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.fno)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.cap_tp).HasMaxLength(2);

                entity.Property(e => e.date).HasColumnType("date");

                entity.Property(e => e.acc_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_eom_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_eom_exch_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_exch_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_market_value).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_rebate_amt).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_rl_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_rl_exch_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_write_down).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_write_down_exch).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_xd_amt).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.cls_nav).HasColumnType("numeric(20, 10)");

                entity.Property(e => e.cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.cust_qty).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.eom_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.exchrate).HasColumnType("numeric(20, 10)");

                entity.Property(e => e.fno_acc_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.fno_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.logtime).HasColumnType("datetime");

                entity.Property(e => e.loguser)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.market_value).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.qty).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.rebate_amt).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.rl_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.settle_qty).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.sys_name)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.unlist_amt_buy).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.unlist_amt_sell).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.unlist_other).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.unlist_qty_buy).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.unlist_qty_sell).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.write_down).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.xd_amt).HasColumnType("numeric(20, 5)");
            });

            modelBuilder.Entity<inv_fnd_bal_dt>(entity =>
            {
                entity.HasKey(e => new { e.code, e.pno, e.fno, e.cap_tp, e.date });

                entity.Property(e => e.code)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.fno)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.cap_tp).HasMaxLength(2);

                entity.Property(e => e.date).HasColumnType("date");

                entity.Property(e => e.acc_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_eom_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_eom_exch_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_exch_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_market_value).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_rebate_amt).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_rl_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_rl_exch_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_write_down).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_write_down_exch).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_xd_amt).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.cls_nav).HasColumnType("numeric(20, 10)");

                entity.Property(e => e.cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.cust_qty).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.eom_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.exchrate).HasColumnType("numeric(20, 10)");

                entity.Property(e => e.fno_acc_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.fno_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.logtime).HasColumnType("datetime");

                entity.Property(e => e.loguser)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.market_value).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.qty).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.rebate_amt).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.rl_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.settle_qty).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.sys_name)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('FN')")
                    .IsFixedLength();

                entity.Property(e => e.unlist_amt_buy).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.unlist_amt_sell).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.unlist_other).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.unlist_qty_buy).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.unlist_qty_sell).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.write_down).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.xd_amt).HasColumnType("numeric(20, 5)");
            });

            modelBuilder.Entity<level_change>(entity =>
            {
                entity.HasKey(e => new { e.change_date, e.sys_no, e.goods_code });

                entity.Property(e => e.change_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sys_no)
                    .HasMaxLength(3)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.goods_code)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.price_level)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<lk_bank>(entity =>
            {
                entity.HasKey(e => new { e.bank_no, e.broker_code });

                entity.Property(e => e.bank_no)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.address)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_code)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.contact)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tel)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<lk_chang>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.new_enddate).HasColumnType("smalldatetime");

                entity.Property(e => e.old_enddate).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<lk_hist>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.tran_no });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_no)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action_type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.bank_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.beg_date).HasColumnType("datetime");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cover).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.end_date).HasColumnType("datetime");

                entity.Property(e => e.fund_cost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.interest).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.poundage).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.rec_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rec_tranno)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tax).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.volumn).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<lk_interest>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.tran_no, e.tran_date });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.tran_no)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.beg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.interest).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.rete).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.volumn).HasColumnType("decimal(18, 0)");
            });

            modelBuilder.Entity<lk_list>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.tran_no });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("基金代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_no)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("交易編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("還券狀態")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action_type)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.address)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.bank_code)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.beg_date).HasColumnType("datetime");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("券商編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.det_cover).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.det_day)
                    .HasColumnType("numeric(18, 0)")
                    .HasComment("實際天數");

                entity.Property(e => e.det_interest)
                    .HasColumnType("numeric(18, 0)")
                    .HasComment("出借收入");

                entity.Property(e => e.det_net)
                    .HasColumnType("decimal(18, 0)")
                    .HasComment("還券成本2006/1026");

                entity.Property(e => e.det_poundage).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.det_rate)
                    .HasColumnType("numeric(18, 6)")
                    .HasComment("成交費率");

                entity.Property(e => e.det_tax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.det_volumn)
                    .HasColumnType("numeric(18, 2)")
                    .HasComment("當天歸還股數");

                entity.Property(e => e.end_date)
                    .HasColumnType("datetime")
                    .HasComment("原定還券日 ");

                entity.Property(e => e.p_code)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rec_tranno)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("股票代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date)
                    .HasColumnType("datetime")
                    .HasComment("實際還券日");
            });

            modelBuilder.Entity<lk_total>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.tran_no });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("基金代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_no)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("交易編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action_type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.bank_code)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.beg_date).HasColumnType("datetime");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("券商編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cover)
                    .HasColumnType("numeric(18, 2)")
                    .HasComment("服務費");

                entity.Property(e => e.end_date).HasColumnType("datetime");

                entity.Property(e => e.fund_cost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.interest)
                    .HasColumnType("numeric(18, 0)")
                    .HasComment("利息收入");

                entity.Property(e => e.last_begdate).HasColumnType("datetime");

                entity.Property(e => e.p_code)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.poundage)
                    .HasColumnType("numeric(18, 2)")
                    .HasComment("手續費");

                entity.Property(e => e.rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.rec_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("股票代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.total_int).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.volumn).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<lk_total_chg>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.tran_no, e.tran_date });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_no)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.org_p_code)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.p_code)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.volumn).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<lk_total_hist>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.tran_no, e.tran_date });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("基金代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_no)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("交易編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action_type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.bank_code)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.beg_date).HasColumnType("datetime");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("券商編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cover).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.end_date).HasColumnType("datetime");

                entity.Property(e => e.fund_cost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.interest).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.last_begdate).HasColumnType("datetime");

                entity.Property(e => e.p_code)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.poundage).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.rec_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("股票代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.total_int).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.volumn).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<lk_trans>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.tran_no, e.tran_date });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_no)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action_type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.address)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.avg_cost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.bank_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.beg_date).HasColumnType("datetime");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cover)
                    .HasColumnType("numeric(18, 0)")
                    .HasComment("服務費");

                entity.Property(e => e.end_date).HasColumnType("datetime");

                entity.Property(e => e.fund_cost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.interest)
                    .HasColumnType("numeric(18, 0)")
                    .HasComment("利息收入");

                entity.Property(e => e.p_code)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.poundage)
                    .HasColumnType("numeric(18, 0)")
                    .HasComment("手續費");

                entity.Property(e => e.rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.rec_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rec_tranno)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.skno_in)
                    .HasMaxLength(12)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.skno_out)
                    .HasMaxLength(12)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tax)
                    .HasColumnType("numeric(18, 0)")
                    .HasComment("稅額");

                entity.Property(e => e.volumn).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<lk_trans_divid_count>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action_divid)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action_lk_trans)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ex_date_divid).HasColumnType("smalldatetime");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.hold_share).HasColumnType("money");

                entity.Property(e => e.net_amt).HasColumnType("money");

                entity.Property(e => e.p_code)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.total_amt).HasColumnType("money");

                entity.Property(e => e.total_share).HasColumnType("money");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<no34_chg_record>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.confirm_unit).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.lcm_amt).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.new_acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.new_cost).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.new_units).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.old_acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.old_cost).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.old_units).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.prod_no)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.term)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trust_unit).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<no34_chgtype>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e._long)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasColumnName("long");

                entity.Property(e => e.category)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.exp_category).HasMaxLength(2);

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.lcm_amt).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.prod_no)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.tran_net).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.tran_parvalue).HasColumnType("decimal(20, 4)");
            });

            modelBuilder.Entity<odbc_info>(entity =>
            {
                entity.HasKey(e => e.seq_no);

                entity.Property(e => e.seq_no).ValueGeneratedNever();

                entity.Property(e => e.sql_desc)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.sql_name)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.sql_passwd)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.sql_source)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<op_brokerpay>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.amt_in).HasColumnType("money");

                entity.Property(e => e.amt_out).HasColumnType("money");

                entity.Property(e => e.bill_name).HasMaxLength(10);

                entity.Property(e => e.broker_co)
                    .HasMaxLength(5)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(5)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dvp_fop).HasMaxLength(8);

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pay_account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pay_net).HasColumnType("money");

                entity.Property(e => e.pay_title)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pay_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.unified_no).HasMaxLength(8);
            });

            modelBuilder.Entity<op_change>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action_type).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.amount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.app_no)
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_kind)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code2)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.chk_print)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dvp_fop)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.save_model)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_model1)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_type)
                    .IsRequired()
                    .HasMaxLength(5)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_type1)
                    .IsRequired()
                    .HasMaxLength(5)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sheet).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<op_dtl>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.app_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bill_begdate).HasColumnType("smalldatetime");

                entity.Property(e => e.bill_enddate).HasColumnType("smalldatetime");

                entity.Property(e => e.bill_int).HasColumnType("money");

                entity.Property(e => e.bill_name)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bill_no)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bill_rate).HasColumnType("smallmoney");

                entity.Property(e => e.bill_type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.insure_name)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value).HasColumnType("money");

                entity.Property(e => e.relation)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.unified_no)
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<op_inv_hist>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bond_kind)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.save_model)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.save_type)
                    .IsRequired()
                    .HasMaxLength(5)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sheet).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<op_predata>(entity =>
            {
                entity.HasKey(e => e.deal_no);

                entity.Property(e => e.deal_no).HasMaxLength(10);

                entity.Property(e => e.bank_account)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.bill_no)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.billno_description)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.broker_code).HasMaxLength(10);

                entity.Property(e => e.buy_price).HasColumnType("money");

                entity.Property(e => e.par_value).HasColumnType("money");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<op_rate>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.market_rate).HasColumnType("decimal(10, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<op_rate1>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.item_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rate).HasColumnType("decimal(10, 4)");
            });

            modelBuilder.Entity<op_total>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate).HasMaxLength(10);

                entity.Property(e => e.accrued_int).HasColumnType("money");

                entity.Property(e => e.app_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bef_tax).HasColumnType("money");

                entity.Property(e => e.bill_int).HasColumnType("money");

                entity.Property(e => e.bill_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bill_rate).HasColumnType("smallmoney");

                entity.Property(e => e.bill_type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_co)
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.evaluation_days).HasDefaultValueSql("(0)");

                entity.Property(e => e.fund_cost).HasColumnType("money");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.hold_days).HasDefaultValueSql("(0)");

                entity.Property(e => e.market)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.market_price).HasColumnType("money");

                entity.Property(e => e.market_rate).HasColumnType("smallmoney");

                entity.Property(e => e.par_value).HasColumnType("money");

                entity.Property(e => e.save_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sold_price).HasColumnType("money");

                entity.Property(e => e.tran_amt).HasColumnType("money");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_price).HasColumnType("money");

                entity.Property(e => e.tran_rate).HasColumnType("smallmoney");

                entity.Property(e => e.tran_revenue).HasColumnType("money");

                entity.Property(e => e.tran_tax).HasColumnType("money");

                entity.Property(e => e.unrelized_gass).HasColumnType("money");

                entity.Property(e => e.unrelized_loss).HasColumnType("money");
            });

            modelBuilder.Entity<op_total_hist>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate).HasMaxLength(10);

                entity.Property(e => e.accrued_int).HasColumnType("money");

                entity.Property(e => e.app_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bef_tax).HasColumnType("money");

                entity.Property(e => e.bill_int).HasColumnType("money");

                entity.Property(e => e.bill_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bill_rate).HasColumnType("smallmoney");

                entity.Property(e => e.bill_type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_co)
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.fund_cost).HasColumnType("money");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.market)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.market_price).HasColumnType("money");

                entity.Property(e => e.market_rate).HasColumnType("smallmoney");

                entity.Property(e => e.par_value).HasColumnType("money");

                entity.Property(e => e.save_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sold_price).HasColumnType("money");

                entity.Property(e => e.tran_amt).HasColumnType("money");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_price).HasColumnType("money");

                entity.Property(e => e.tran_rate).HasColumnType("smallmoney");

                entity.Property(e => e.tran_revenue).HasColumnType("money");

                entity.Property(e => e.tran_tax).HasColumnType("money");

                entity.Property(e => e.unrelized_gass).HasColumnType("money");

                entity.Property(e => e.unrelized_loss).HasColumnType("money");
            });

            modelBuilder.Entity<op_tran>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate).HasMaxLength(10);

                entity.Property(e => e.app_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bef_tax).HasColumnType("money");

                entity.Property(e => e.beg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.bill_int).HasColumnType("money");

                entity.Property(e => e.bill_no)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bill_rate).HasColumnType("smallmoney");

                entity.Property(e => e.bill_type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_co)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.buy_date).HasDefaultValueSql("((0))");

                entity.Property(e => e.buy_month).HasDefaultValueSql("((0))");

                entity.Property(e => e.cancel_date).HasColumnType("smalldatetime");

                entity.Property(e => e.dtl_status)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.fund_cost).HasColumnType("money");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.market)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.org_appno)
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value).HasColumnType("money");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sold_price).HasColumnType("money");

                entity.Property(e => e.tran_amt).HasColumnType("money");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_gain)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.tran_loss).HasColumnType("money");

                entity.Property(e => e.tran_price).HasColumnType("money");

                entity.Property(e => e.tran_rate).HasColumnType("smallmoney");

                entity.Property(e => e.tran_revenue).HasColumnType("money");

                entity.Property(e => e.tran_tax).HasColumnType("money");
            });

            modelBuilder.Entity<op_tran_bk>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate).HasMaxLength(10);

                entity.Property(e => e.app_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bef_tax).HasColumnType("money");

                entity.Property(e => e.beg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.bill_int).HasColumnType("money");

                entity.Property(e => e.bill_no)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bill_rate).HasColumnType("smallmoney");

                entity.Property(e => e.bill_type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_co)
                    .IsRequired()
                    .HasMaxLength(5)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(5)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cancel_date).HasColumnType("smalldatetime");

                entity.Property(e => e.dtl_status)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.fund_cost).HasColumnType("money");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.market)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.org_appno)
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value).HasColumnType("money");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sold_price).HasColumnType("money");

                entity.Property(e => e.tran_amt).HasColumnType("money");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_gain).HasColumnType("money");

                entity.Property(e => e.tran_loss).HasColumnType("money");

                entity.Property(e => e.tran_price).HasColumnType("money");

                entity.Property(e => e.tran_rate).HasColumnType("smallmoney");

                entity.Property(e => e.tran_revenue).HasColumnType("money");

                entity.Property(e => e.tran_tax).HasColumnType("money");
            });

            modelBuilder.Entity<portia_code>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.price_symbol)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.security)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<prog_base>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.sys_no, e.prog_no }, "IX_prog_base")
                    .IsClustered()
                    .HasFillFactor(70);

                entity.HasIndex(e => e.prog_no, "ProgBaseIdx1")
                    .HasFillFactor(70);

                entity.HasIndex(e => e.sys_no, "ProgBaseIdx2")
                    .HasFillFactor(70);

                entity.Property(e => e.del).HasComment("程式含刪除功能");

                entity.Property(e => e.ins).HasComment("程式含新增功能");

                entity.Property(e => e.mdf).HasComment("程式含修改功能");

                entity.Property(e => e.prog_desc)
                    .HasMaxLength(30)
                    .HasComment("程式中文描述")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.prog_name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("程式名稱")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.prog_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasComment("程式編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.qry).HasComment("程式含查詢功能");

                entity.Property(e => e.rpt).HasComment("程式含報表功能");

                entity.Property(e => e.sys_cmd)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("程式按鍵順序")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasComment("系統編號(sys_base.sys_no)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<reserch_source>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.rec_status)
                    .HasMaxLength(1)
                    .HasComment("存取代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.reserch_source1)
                    .HasMaxLength(50)
                    .HasColumnName("reserch_source")
                    .HasComment("存取路徑")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<result>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate_item).HasMaxLength(255);

                entity.Property(e => e.account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.beg_stock).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.benfit_diff).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.buy_cost).HasColumnType("decimal(38, 9)");

                entity.Property(e => e.end_stock).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.pre_level)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.price_level)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.sale_cost).HasColumnType("decimal(38, 9)");

                entity.Property(e => e.security_id)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<role_base>(entity =>
            {
                entity.HasKey(e => e.role_no)
                    .IsClustered(false);

                entity.Property(e => e.role_no)
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.role_name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<role_prog>(entity =>
            {
                entity.HasKey(e => new { e.role_no, e.sys_no, e.prog_no })
                    .IsClustered(false);

                entity.Property(e => e.role_no)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_no)
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.prog_no)
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<rp_base>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_alias)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_kind)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_kind2)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_name2)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_no2)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bond_no3)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cancel_type)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.capital_type)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.insure_name)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.insure_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.int_date)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.int_date_first)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.issue_amt).HasColumnType("money");

                entity.Property(e => e.issue_co)
                    .HasMaxLength(6)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.issue_date).HasColumnType("smalldatetime");

                entity.Property(e => e.issue_period).HasColumnType("numeric(5, 2)");

                entity.Property(e => e.main_order)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.maturity_date).HasColumnType("smalldatetime");

                entity.Property(e => e.period_type)
                    .HasMaxLength(6)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rate_type)
                    .HasMaxLength(6)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.remark)
                    .HasMaxLength(250)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tax_rate).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.tax_type)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.trade_market).HasMaxLength(4);

                entity.Property(e => e.tran_type)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.unityid)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<rp_base_cb>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.call_e_date).HasColumnType("datetime");

                entity.Property(e => e.call_s_date).HasColumnType("datetime");

                entity.Property(e => e.call_yield_rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.conv_e_date).HasColumnType("datetime");

                entity.Property(e => e.conv_price).HasColumnType("decimal(24, 4)");

                entity.Property(e => e.conv_s_date).HasColumnType("datetime");

                entity.Property(e => e.conv_vol).HasColumnType("decimal(24, 4)");

                entity.Property(e => e.last_cede_date).HasColumnType("datetime");

                entity.Property(e => e.rs_date).HasColumnType("datetime");

                entity.Property(e => e.rs_premium_rate).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<rp_cash>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.c_amt).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.i_amt).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.m_amt).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.pay_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<rp_int>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.base_cap).HasColumnType("money");

                entity.Property(e => e.base_int).HasColumnType("money");

                entity.Property(e => e.beg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.bond_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.int_date)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.int_rate).HasColumnType("money");

                entity.Property(e => e.period_int).HasColumnType("money");

                entity.Property(e => e.rec_cap).HasColumnType("money");

                entity.Property(e => e.rec_int).HasColumnType("money");

                entity.Property(e => e.recv_date).HasColumnType("datetime");

                entity.Property(e => e.rem_cap).HasColumnType("money");
            });

            modelBuilder.Entity<rpt_daily>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasDefaultValueSql("('NTD')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.marked).HasDefaultValueSql("(1)");

                entity.Property(e => e.rpt_acct)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rpt_amt).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.rpt_date).HasColumnType("smalldatetime");

                entity.Property(e => e.rpt_dept)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rpt_fund)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('00')");

                entity.Property(e => e.rpt_item)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rpt_memo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.rpt_memo2)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.rpt_sys)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.seqno)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<rs_identable>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.key_col).ValueGeneratedOnAdd();

                entity.Property(e => e.key_right)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('-')")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.vouno)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<sb_billname>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bill_name)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.issue_unicode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<sb_broker>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.broker_co, e.broker_code }, "SbBrokerIdx1")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.HasIndex(e => e.broker_code, "SbBrokerIdx2")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.Property(e => e.bank_account)
                    .HasMaxLength(20)
                    .HasComment("交割銀行帳號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_account_other_in)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_account_other_out)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_account_self_in)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_account_self_out)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_code)
                    .HasMaxLength(10)
                    .HasComment("交割銀行代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_code_other_in)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_code_other_out)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_code_self_in)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_code_self_out)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_account)
                    .HasMaxLength(20)
                    .HasComment("集保帳號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_addr)
                    .HasMaxLength(50)
                    .HasComment("住址")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_alias)
                    .HasMaxLength(20)
                    .HasComment("簡稱")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_co)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasComment("券商總公司代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasComment("券商分公司代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_e_name)
                    .HasMaxLength(50)
                    .HasComment("英文名稱")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_fax)
                    .HasMaxLength(20)
                    .HasComment("傳真號碼")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_id)
                    .HasMaxLength(15)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("券商名稱")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_tel_no)
                    .HasMaxLength(20)
                    .HasComment("電話")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.country_code)
                    .HasMaxLength(10)
                    .HasComment("國別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.is_bank)
                    .HasDefaultValueSql("(0)")
                    .HasComment("是否為銀行");

                entity.Property(e => e.is_bill_broker)
                    .HasDefaultValueSql("(0)")
                    .HasComment("是否為票券商");

                entity.Property(e => e.is_security_broker)
                    .HasDefaultValueSql("(0)")
                    .HasComment("是否為證券商");

                entity.Property(e => e.max_rate)
                    .HasColumnType("numeric(18, 2)")
                    .HasDefaultValueSql("(0)")
                    .HasComment("票券金額最高比率");

                entity.Property(e => e.offten_use)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.print_memo_in)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.print_memo_out)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.public_code)
                    .HasMaxLength(4)
                    .HasComment("券商名稱")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.show_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('0')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.zip_code)
                    .HasMaxLength(8)
                    .HasComment("郵遞區號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<sb_broker_list>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bank_account1)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_account2)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_code1)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_code2)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_name1)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_name2)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_co)
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fax)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.name1)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.name2)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_no)
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tel1)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tel2)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<sb_broker_td>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bank_account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_code)
                    .HasMaxLength(5)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_addr)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_alias)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_co)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_e_name)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_fax)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_id)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_tel_no)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.country_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.max_rate).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.offten_use)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.public_code)
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.zip_code)
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<sb_dtl>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.app_no, "IX_sb_dtl")
                    .HasFillFactor(70);

                entity.HasIndex(e => e.bill_date, "bill_date_ind")
                    .HasFillFactor(70);

                entity.HasIndex(e => e.broker_code, "broker_code_ind")
                    .HasFillFactor(70);

                entity.Property(e => e.app_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.beg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.bill_date).HasColumnType("smalldatetime");

                entity.Property(e => e.bill_enddate).HasColumnType("smalldatetime");

                entity.Property(e => e.bill_name)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bill_no)
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bill_rate).HasColumnType("smallmoney");

                entity.Property(e => e.bill_type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.buy_price).HasColumnType("money");

                entity.Property(e => e.cancel_date).HasColumnType("smalldatetime");

                entity.Property(e => e.dtl_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.insure_name)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.marked).HasDefaultValueSql("((0))");

                entity.Property(e => e.org_app_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value).HasColumnType("money");

                entity.Property(e => e.sys_no)
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<sb_hold>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bill_date)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bill_enddate)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bill_name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.end_date)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.holding_date).HasColumnType("smalldatetime");

                entity.Property(e => e.insure_name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value).HasColumnType("money");
            });

            modelBuilder.Entity<sb_int>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.fund_no, e.app_no, e.area_beg_date, e.area_end_date }, "SbIntUk1")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.Property(e => e.app_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.area_beg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.area_end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.area_int).HasColumnType("money");

                entity.Property(e => e.area_tax).HasColumnType("money");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<sb_mast>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.act_int).HasColumnType("money");

                entity.Property(e => e.act_price).HasColumnType("money");

                entity.Property(e => e.act_rate).HasColumnType("smallmoney");

                entity.Property(e => e.act_tax).HasColumnType("money");

                entity.Property(e => e.app_no)
                    .IsRequired()
                    .HasMaxLength(12);

                entity.Property(e => e.beg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.bill_no)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.bill_type)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.buy_accutax).HasColumnType("money");

                entity.Property(e => e.buy_int).HasColumnType("money");

                entity.Property(e => e.buy_price).HasColumnType("money");

                entity.Property(e => e.buy_rate).HasColumnType("smallmoney");

                entity.Property(e => e.buy_tax).HasColumnType("money");

                entity.Property(e => e.cancel_date).HasColumnType("smalldatetime");

                entity.Property(e => e.coupon_rate).HasColumnType("money");

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.law_tax).HasColumnType("money");

                entity.Property(e => e.par_value).HasColumnType("money");

                entity.Property(e => e.sold_price).HasColumnType("money");

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<sb_rate>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.market_rate).HasColumnType("decimal(10, 4)");

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<sb_register>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bank_id)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pay_amt).HasColumnType("money");

                entity.Property(e => e.pay_net).HasColumnType("money");

                entity.Property(e => e.pay_tax).HasColumnType("money");

                entity.Property(e => e.seqno).ValueGeneratedOnAdd();

                entity.Property(e => e.sys_no).HasMaxLength(8);
            });

            modelBuilder.Entity<sb_total_hist>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.fund_no, e.tran_date, e.app_no }, "SbTotalHistUk1")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.accu_days).HasColumnType("money");

                entity.Property(e => e.accu_int).HasColumnType("money");

                entity.Property(e => e.accu_tax).HasColumnType("money");

                entity.Property(e => e.app_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.beg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.bill_no)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bill_type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.buy_cut).HasDefaultValueSql("((0))");

                entity.Property(e => e.buy_int).HasColumnType("money");

                entity.Property(e => e.buy_price).HasColumnType("money");

                entity.Property(e => e.buy_rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.buy_tax).HasColumnType("money");

                entity.Property(e => e.buydate).HasDefaultValueSql("((0))");

                entity.Property(e => e.buymonth).HasDefaultValueSql("((0))");

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value).HasColumnType("money");

                entity.Property(e => e.relation).HasDefaultValueSql("((0))");

                entity.Property(e => e.sold_price).HasColumnType("money");

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<sb_trans>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.fund_no, e.org_app_no }, "SbTransKey1")
                    .HasFillFactor(70);

                entity.HasIndex(e => new { e.fund_no, e.app_no }, "SbTransUk1")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.act_days).HasDefaultValueSql("((0))");

                entity.Property(e => e.act_int)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.act_price)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.act_rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.act_tax)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.app_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.beg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.bill_no)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bill_type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.buy_cut).HasDefaultValueSql("((0))");

                entity.Property(e => e.buy_int).HasColumnType("money");

                entity.Property(e => e.buy_price).HasColumnType("money");

                entity.Property(e => e.buy_rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.buy_tax).HasColumnType("money");

                entity.Property(e => e.buydate).HasDefaultValueSql("((0))");

                entity.Property(e => e.buymonth).HasDefaultValueSql("((0))");

                entity.Property(e => e.cancel_date).HasColumnType("smalldatetime");

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.loguser)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.org_app_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value).HasColumnType("money");

                entity.Property(e => e.relation).HasDefaultValueSql("((0))");

                entity.Property(e => e.roll_in_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sold_price).HasColumnType("money");

                entity.Property(e => e.source_deal_no)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<sk_accountset>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.rule_set)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.this_year)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<sk_base>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.sk_code, "IX_sk_base")
                    .IsClustered()
                    .HasFillFactor(70);

                entity.HasIndex(e => e.sk_type, "IX_sk_base_1")
                    .HasFillFactor(70);

                entity.Property(e => e.UnityID)
                    .HasMaxLength(30)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.buss_type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("產業別(code_file.item_type = '02')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.c_date)
                    .HasColumnType("datetime")
                    .HasComment("除息日");

                entity.Property(e => e.cap_amt)
                    .HasColumnType("money")
                    .HasComment("資本額");

                entity.Property(e => e.cash_dividend).HasComment("除息比例");

                entity.Property(e => e.ccy)
                    .HasMaxLength(10)
                    .HasComment("制別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.coupon_rate).HasColumnType("numeric(8, 5)");

                entity.Property(e => e.d_date)
                    .HasColumnType("datetime")
                    .HasComment("除權日");

                entity.Property(e => e.eps)
                    .HasColumnType("money")
                    .HasComment("每股盈餘");

                entity.Property(e => e.fund_dividend).HasComment("公配比例");

                entity.Property(e => e.is_get_price)
                    .HasMaxLength(1)
                    .HasComment("取用淨值(1 取用  0 不取用)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.issue_co)
                    .HasMaxLength(6)
                    .HasComment("發行公司")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.mark_price)
                    .HasColumnType("numeric(18, 6)")
                    .HasComment("淨值");

                entity.Property(e => e.p_date)
                    .HasColumnType("datetime")
                    .HasComment("現增日");

                entity.Property(e => e.p_dividend).HasComment("現增比例");

                entity.Property(e => e.p_price)
                    .HasColumnType("money")
                    .HasComment("現增價格");

                entity.Property(e => e.share_list)
                    .HasColumnType("money")
                    .HasComment("發行在外股數");

                entity.Property(e => e.signet_no)
                    .HasDefaultValueSql("(0)")
                    .HasComment("印鑑章號碼");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasComment("股票代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_name)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasComment("股票名稱")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasComment("股票類別(code_file.item_type = '01')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.stock_dividend).HasComment("盈權比例");

                entity.Property(e => e.total_share)
                    .HasColumnType("money")
                    .HasComment("總發行股數");

                entity.Property(e => e.tran_out)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<sk_capital>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.capital_amt)
                    .HasColumnType("money")
                    .HasComment("資金數字");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("建立日期");

                entity.Property(e => e.year_now)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<sk_chgtype>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.change_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("轉型日");

                entity.Property(e => e.change_type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("轉型別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("帳戶代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.net)
                    .HasColumnType("money")
                    .HasComment("移轉成本");

                entity.Property(e => e.net_new)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.sk_code_new)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasComment("新股代踸")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code_old)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasComment("舊股代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_type_new)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("(1)")
                    .HasComment("新的型別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_type_old)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("(1)")
                    .HasComment("舊的型別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.volumn_new01)
                    .HasColumnType("money")
                    .HasComment("新股股數");

                entity.Property(e => e.volumn_new02).HasColumnType("money");

                entity.Property(e => e.volumn_old01)
                    .HasColumnType("money")
                    .HasComment("舊股股數");

                entity.Property(e => e.volumn_old02).HasColumnType("money");
            });

            modelBuilder.Entity<sk_chgtype_p>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.change_date).HasColumnType("smalldatetime");

                entity.Property(e => e.change_type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.chk_date).HasColumnType("datetime");

                entity.Property(e => e.chk_sales_id)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.net).HasColumnType("money");

                entity.Property(e => e.net_new)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.p_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code_new)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code_old)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_type_new)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_type_old)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.volumn_new01).HasColumnType("money");

                entity.Property(e => e.volumn_new02).HasColumnType("money");

                entity.Property(e => e.volumn_old01).HasColumnType("money");

                entity.Property(e => e.volumn_old02).HasColumnType("money");
            });

            modelBuilder.Entity<sk_divid>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasComment("交易別(1.除息2.盈配3.公配4.現增)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_account)
                    .HasMaxLength(20)
                    .HasComment("銀行帳號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_account2)
                    .HasMaxLength(20)
                    .HasComment("溢配退還帳號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_code)
                    .HasMaxLength(10)
                    .HasComment("銀行代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_account)
                    .HasMaxLength(20)
                    .HasComment("集保帳號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_no)
                    .HasMaxLength(20)
                    .HasComment("支票號碼")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_no2)
                    .HasMaxLength(20)
                    .HasComment("溢配退還支票號碼")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.div_rate)
                    .HasColumnType("decimal(19, 10)")
                    .HasComment("配股息比率(除權除息率)");

                entity.Property(e => e.ex_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("除權除息日期");

                entity.Property(e => e.fee_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)")
                    .HasComment("郵費匯費");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("帳戶別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.hold_share)
                    .HasColumnType("money")
                    .HasComment("當日持有股數");

                entity.Property(e => e.net_amt)
                    .HasColumnType("money")
                    .HasComment("應收淨額(除息淨額)");

                entity.Property(e => e.over_dividend)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)")
                    .HasComment("溢配金額");

                entity.Property(e => e.over_int)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.pay_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("現增付款日");

                entity.Property(e => e.pre_total_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.rec_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)")
                    .HasComment("實領金額(領取股數/金額)");

                entity.Property(e => e.recno)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasComment("交易編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.recv_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("領股領息日");

                entity.Property(e => e.recv_kind)
                    .HasMaxLength(5)
                    .HasComment("領取方式")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.recv_kind2)
                    .HasMaxLength(5)
                    .HasComment("溢配退還方式")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rem_volumn)
                    .HasColumnType("money")
                    .HasComment("剩餘股數");

                entity.Property(e => e.return_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)")
                    .HasComment("溢配退還金額");

                entity.Property(e => e.return_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("溢配退還日");

                entity.Property(e => e.sale_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("出售日");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasComment("股票代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tax_amt)
                    .HasColumnType("money")
                    .HasComment("所得稅額");

                entity.Property(e => e.tax_rate).HasComment("所得稅率");

                entity.Property(e => e.total_amt)
                    .HasColumnType("money")
                    .HasComment("配息金額(除息金額)");

                entity.Property(e => e.total_share)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)")
                    .HasComment("配股股數(除權股數)");

                entity.Property(e => e.turn_cash)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)")
                    .HasComment("畸零股款");
            });

            modelBuilder.Entity<sk_divid_dtl>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasComment("交易別(除息(3-盈配;9-公配),除權(4-盈配;6公配),5-現增)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_account)
                    .HasMaxLength(20)
                    .HasComment("銀行帳號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_code)
                    .HasMaxLength(10)
                    .HasComment("銀行代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .HasMaxLength(10)
                    .HasComment("券商代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_no)
                    .HasMaxLength(20)
                    .HasComment("支票號碼")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.del_share)
                    .HasColumnType("money")
                    .HasComment("券商申報賣出股數");

                entity.Property(e => e.div_rate)
                    .HasColumnType("decimal(19, 10)")
                    .HasComment("配股息比率(除權除息率)");

                entity.Property(e => e.ex_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("除權除息日期");

                entity.Property(e => e.fee_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("郵費匯費");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("帳戶別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.hold_share)
                    .HasColumnType("money")
                    .HasComment("當日持有股數");

                entity.Property(e => e.net_amt)
                    .HasColumnType("money")
                    .HasComment("應收淨額(除息淨額)");

                entity.Property(e => e.over_dividend)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("溢配金額");

                entity.Property(e => e.over_int)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.pay_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("現增付款日");

                entity.Property(e => e.pre_total_amt).HasColumnType("money");

                entity.Property(e => e.rec_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("實領金額(領取股數/金額)");

                entity.Property(e => e.recno)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasComment("交易編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.recv_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("領股領息日");

                entity.Property(e => e.recv_kind)
                    .HasMaxLength(5)
                    .HasComment("領取方式")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.recv_no)
                    .HasMaxLength(12)
                    .HasComment("領股息時對應sk_tran.tran_no")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasComment("股票代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("持有股數類別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tax_amt)
                    .HasColumnType("money")
                    .HasComment("所得稅額");

                entity.Property(e => e.tax_rate).HasComment("所得稅率");

                entity.Property(e => e.taxfree_status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("non-call是否有可扣抵稅額");

                entity.Property(e => e.total_amt)
                    .HasColumnType("money")
                    .HasComment("配息金額(除息金額)");

                entity.Property(e => e.total_share)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("配股股數(除權股數)");
            });

            modelBuilder.Entity<sk_divid_dtl_p>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_account)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_code)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_account)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_no)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.del_share).HasColumnType("money");

                entity.Property(e => e.div_rate).HasColumnType("decimal(19, 10)");

                entity.Property(e => e.ex_chk_date).HasColumnType("datetime");

                entity.Property(e => e.ex_chk_sales_id)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ex_date).HasColumnType("smalldatetime");

                entity.Property(e => e.fee_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.hold_share).HasColumnType("money");

                entity.Property(e => e.net_amt).HasColumnType("money");

                entity.Property(e => e.over_dividend)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.over_int)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.p_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pay_date).HasColumnType("smalldatetime");

                entity.Property(e => e.pre_total_amt).HasColumnType("money");

                entity.Property(e => e.rec_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.recno)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.recv_chk_date).HasColumnType("datetime");

                entity.Property(e => e.recv_chk_sales_id)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.recv_date).HasColumnType("smalldatetime");

                entity.Property(e => e.recv_kind)
                    .HasMaxLength(5)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.recv_no)
                    .HasMaxLength(12)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tax_amt).HasColumnType("money");

                entity.Property(e => e.total_amt).HasColumnType("money");

                entity.Property(e => e.total_share)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<sk_dividdate>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.set_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.this_year)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<sk_dividinfo>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Surplus_dividend).HasColumnType("decimal(19, 10)");

                entity.Property(e => e.c_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("除息日期");

                entity.Property(e => e.c_recv_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("股息發放日");

                entity.Property(e => e.cash_dividend)
                    .HasColumnType("decimal(19, 10)")
                    .HasComment("除息比例");

                entity.Property(e => e.d_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("除權日");

                entity.Property(e => e.d_recv_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("股利發放日");

                entity.Property(e => e.fund_dividend)
                    .HasColumnType("decimal(19, 10)")
                    .HasComment("公配比例");

                entity.Property(e => e.ins_date).HasColumnType("smalldatetime");

                entity.Property(e => e.ins_op)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.meeting_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("股東會日期");

                entity.Property(e => e.p_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("現增日期");

                entity.Property(e => e.p_dividend)
                    .HasColumnType("decimal(19, 10)")
                    .HasComment("現增比例");

                entity.Property(e => e.p_price)
                    .HasColumnType("money")
                    .HasComment("現增價格");

                entity.Property(e => e.p_recv_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("現增股票發放日");

                entity.Property(e => e.pay_end_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("現增繳款截止日");

                entity.Property(e => e.rec_no)
                    .HasColumnType("decimal(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasComment("流水序號");

                entity.Property(e => e.rec_status)
                    .HasDefaultValueSql("(0)")
                    .HasComment("交易狀態");

                entity.Property(e => e.rights_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasComment("股票代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.stock_dividend)
                    .HasColumnType("decimal(19, 10)")
                    .HasComment("盈配比例");

                entity.Property(e => e.total_share)
                    .HasColumnType("decimal(18, 0)")
                    .HasComment("除權後新股本");
            });

            modelBuilder.Entity<sk_dividpay>(entity =>
            {
                entity.HasKey(e => new { e.sk_code, e.ex_date });

                entity.Property(e => e.sk_code)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ex_date).HasColumnType("datetime");

                entity.Property(e => e.account)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_account)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_code)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_no)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.hold_volumn)
                    .HasColumnType("decimal(18, 0)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.key_date).HasColumnType("datetime");

                entity.Property(e => e.price).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.real_totalamt).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.real_volumn)
                    .HasColumnType("decimal(18, 0)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.recv_date).HasColumnType("datetime");

                entity.Property(e => e.total_amt).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.volumn).HasColumnType("decimal(18, 0)");
            });

            modelBuilder.Entity<sk_hist>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.action, e.tran_date, e.sk_type }, "Idx_sk_hist")
                    .HasFillFactor(70);

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("交易別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasComment("券商代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_comm)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("券商手續費");

                entity.Property(e => e.broker_ref)
                    .HasMaxLength(50)
                    .HasComment("參考券商")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_no).HasMaxLength(20);

                entity.Property(e => e.co_cost).HasColumnType("money");

                entity.Property(e => e.d_cost)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.fund_cost)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("交易成本");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("帳戶別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.net)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("交易淨額");

                entity.Property(e => e.p_code)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.p_cost)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.postal_tax).HasColumnType("money");

                entity.Property(e => e.price)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("價格");

                entity.Property(e => e.rec_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasComment("交易狀態")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ref_no)
                    .HasMaxLength(20)
                    .HasComment("參考編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settle_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("交割日");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasComment("股票代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_type)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.t_cost)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.total_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("成交金額");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("交易日期");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasComment("交易編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.trans_tax)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("證交稅");

                entity.Property(e => e.volumn)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("股數");
            });

            modelBuilder.Entity<sk_id>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.sk_code)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.sk_type)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.tran_date)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.unityID)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.volumn)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<sk_ifrs_trans>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acc_type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.market_avg)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.market_tran)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.p_code)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.price)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.volumn)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<sk_inv>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.fund_no, e.sk_code, e.broker_code }, "SkInvPk1")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasComment("券商代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasComment("1:現股,2:在途股")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.d_volumn)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)")
                    .HasComment("盈配股數");

                entity.Property(e => e.f_volumn)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)")
                    .HasComment("公配股數");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("帳戶別(fund_file.fund_no)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasComment("股票代號(sk_base.sk_code)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("交易日期");

                entity.Property(e => e.volumn)
                    .HasColumnType("money")
                    .HasComment("股數");
            });

            modelBuilder.Entity<sk_inv_hist>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.sk_code, e.broker_code, e.broker_type, e.tran_date });

                entity.HasIndex(e => new { e.fund_no, e.tran_date }, "IX_sk_inv_hist")
                    .HasFillFactor(70);

                entity.HasIndex(e => new { e.fund_no, e.sk_code, e.broker_code, e.tran_date }, "SkInvHistPk1")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasComment("帳戶別(fund_file.fund_no)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .HasMaxLength(6)
                    .HasComment("股票代號(sk_base.sk_code)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .HasMaxLength(10)
                    .HasComment("券商代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_type)
                    .HasMaxLength(1)
                    .HasComment("庫存位置(1:現股,2:在途股)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("庫存日期");

                entity.Property(e => e.d_volumn)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)")
                    .HasComment("盈配股數");

                entity.Property(e => e.f_volumn)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)")
                    .HasComment("公配股數");

                entity.Property(e => e.volumn)
                    .HasColumnType("money")
                    .HasComment("股數");
            });

            modelBuilder.Entity<sk_inv_odd>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.sk_code, e.broker_code, e.seq_no });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasComment("帳戶別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .HasMaxLength(6)
                    .HasComment("股票代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .HasMaxLength(10)
                    .HasComment("券商代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.seq_no)
                    .ValueGeneratedOnAdd()
                    .HasComment("流水序號");

                entity.Property(e => e.volumn)
                    .HasColumnType("money")
                    .HasComment("零股股數");
            });

            modelBuilder.Entity<sk_master>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.broker_comm).HasColumnType("money");

                entity.Property(e => e.broker_ref).HasMaxLength(50);

                entity.Property(e => e.check_no)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.co_cost).HasColumnType("money");

                entity.Property(e => e.fund_cost).HasColumnType("money");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo)
                    .HasMaxLength(150)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.net).HasColumnType("money");

                entity.Property(e => e.postal_tax).HasColumnType("money");

                entity.Property(e => e.price).HasColumnType("money");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_type)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.total_amt).HasColumnType("money");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.volumn).HasColumnType("money");
            });

            modelBuilder.Entity<sk_plan>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.amount).HasColumnType("numeric(17, 4)");

                entity.Property(e => e.broker_code)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.date).HasColumnType("datetime");

                entity.Property(e => e.rate).HasColumnType("numeric(17, 10)");
            });

            modelBuilder.Entity<sk_point>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.etc_point).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.otc_point).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.point)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("加權指數");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("交易日");
            });

            modelBuilder.Entity<sk_price>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.tran_date, e.sk_code }, "_dta_index_sk_price_12_126779659__K4_K1")
                    .HasFillFactor(70);

                entity.Property(e => e.high)
                    .HasColumnType("money")
                    .HasComment("最高價格");

                entity.Property(e => e.low)
                    .HasColumnType("money")
                    .HasComment("最低價格");

                entity.Property(e => e.nav)
                    .HasColumnType("money")
                    .HasComment("淨值");

                entity.Property(e => e.price)
                    .HasColumnType("money")
                    .HasComment("股票收盤價");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasComment("股票代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("((0))")
                    .HasComment("收盤價日期");

                entity.Property(e => e.updown)
                    .HasColumnType("money")
                    .HasComment("漲跌");
            });

            modelBuilder.Entity<sk_projectdividinfo>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Beg_Date).HasColumnType("smalldatetime");

                entity.Property(e => e.Cash_dividend).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.End_Date).HasColumnType("smalldatetime");

                entity.Property(e => e.Surplus_dividend)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.fund_volumn).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.meeting_date).HasColumnType("smalldatetime");

                entity.Property(e => e.notice_date).HasColumnType("smalldatetime");

                entity.Property(e => e.piny_date).HasColumnType("datetime");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_name)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.special_volumn).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.stock_volumn).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<sk_report>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('NA')")
                    .HasComment("會計分類")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.beg_avgcost)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("均價(期初)");

                entity.Property(e => e.beg_net)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("成本(期初)");

                entity.Property(e => e.beg_volumn)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("持有股數(期初)");

                entity.Property(e => e.broker_comm)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("手續費");

                entity.Property(e => e.capital_amt)
                    .HasColumnType("money")
                    .HasComment("資金比例");

                entity.Property(e => e.cash_dividend)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("現金股利");

                entity.Property(e => e.end_avgcost)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("均價(期末)");

                entity.Property(e => e.end_net)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("成本(期末)");

                entity.Property(e => e.end_volumn)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("持有股數(期末)");

                entity.Property(e => e.gain_loss)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("已實現損益");

                entity.Property(e => e.gain_loss_2BE)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("出售損益(含調整數)");

                entity.Property(e => e.in_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("買進金額");

                entity.Property(e => e.in_avgprice)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("買進均價");

                entity.Property(e => e.in_cost)
                    .HasColumnType("money")
                    .HasComment("買進成本");

                entity.Property(e => e.in_volumn)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("買進股數");

                entity.Property(e => e.market_net)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("總市值");

                entity.Property(e => e.market_price)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("收盤市價");

                entity.Property(e => e.non_gain_loss)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("未實現損益");

                entity.Property(e => e.otherin_volumn)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("其它成交股數(買進)");

                entity.Property(e => e.otherout_volumn)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("其它成交股數(賣出)");

                entity.Property(e => e.out_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("賣出金額");

                entity.Property(e => e.out_avgprice)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("賣出均價");

                entity.Property(e => e.out_cost)
                    .HasColumnType("money")
                    .HasComment("賣出總成本(含調整數)");

                entity.Property(e => e.out_volumn)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("賣出股數");

                entity.Property(e => e.remark)
                    .HasMaxLength(20)
                    .HasComment("備註(交易別)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasComment("股票代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("代號中文說明")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_type)
                    .HasMaxLength(20)
                    .HasComment("股票類別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sn)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("((0))")
                    .HasComment("編號");

                entity.Property(e => e.total_share)
                    .HasColumnType("money")
                    .HasComment("持股比例");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("交易日期");

                entity.Property(e => e.volumn)
                    .HasColumnType("money")
                    .HasComment("發行股數(仟股)");
            });

            modelBuilder.Entity<sk_skr009>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate01A).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.acccate01B).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.acccate01C).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.acccate02A).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.acccate02B).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.acccate02C).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.fundA).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.fundB).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.fundC).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.lkA).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.lkB).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.lkC).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.pointA).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.pointB).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.pointC).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.unlistedA)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("未上市A");

                entity.Property(e => e.unlistedB)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("未上市B");

                entity.Property(e => e.unlistedC)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("未上市C");
            });

            modelBuilder.Entity<sk_skr009b>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate01A).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.acccate01B).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.acccate01C).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.acccate02A).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.acccate02B).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.acccate02C).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.fundA).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.fundB).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.fundC).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.lkA).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.lkB).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.lkC).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.pointA).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.pointB).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.pointC).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.unlistedA).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.unlistedB).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.unlistedC).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<sk_taxfree>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.action)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.benfit_86).HasColumnType("money");

                entity.Property(e => e.benfit_87).HasColumnType("money");

                entity.Property(e => e.c_amt)
                    .HasColumnType("money")
                    .HasComment("除息金額");

                entity.Property(e => e.c_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("除息日");

                entity.Property(e => e.c_percent)
                    .HasColumnType("money")
                    .HasComment("除息可扣抵比率");

                entity.Property(e => e.cash_taxfree)
                    .HasColumnType("money")
                    .HasComment("除息可扣抵金額");

                entity.Property(e => e.d_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("除權日");

                entity.Property(e => e.f_amt)
                    .HasColumnType("money")
                    .HasComment("公配金額");

                entity.Property(e => e.f_percent)
                    .HasColumnType("money")
                    .HasComment("公配可扣底比率");

                entity.Property(e => e.fund_taxfree)
                    .HasColumnType("money")
                    .HasComment("公配可扣底稅額");

                entity.Property(e => e.s_amt)
                    .HasColumnType("money")
                    .HasComment("盈配金額");

                entity.Property(e => e.s_percent)
                    .HasColumnType("money")
                    .HasComment("盈配可扣底比率");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasComment("股票代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.stock_taxfree)
                    .HasColumnType("money")
                    .HasComment("盈配可扣底稅額");

                entity.Property(e => e.surplus_amt).HasColumnType("money");

                entity.Property(e => e.surplus_percent).HasColumnType("money");

                entity.Property(e => e.surplus_taxfree).HasColumnType("money");

                entity.Property(e => e.sys_type)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("(N'SK')")
                    .HasComment("持有股數類別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("交易日");
            });

            modelBuilder.Entity<sk_total>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.sk_code, e.tran_date, e.sk_type, e.acccate });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasComment("帳戶別(fund_file.fund_no)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .HasMaxLength(6)
                    .HasComment("股票代號(sk_base.sk_code)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("交易日期");

                entity.Property(e => e.sk_type)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost)
                    .HasColumnType("money")
                    .HasComment("平均成本");

                entity.Property(e => e.net)
                    .HasColumnType("money")
                    .HasComment("總成本");

                entity.Property(e => e.volumn)
                    .HasColumnType("money")
                    .HasComment("現存股數");
            });

            modelBuilder.Entity<sk_total_chg_d>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.sk_code, e.tran_date, e.sk_type, e.acccate, e.d_code });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .HasMaxLength(6)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sk_type)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.d_code)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost).HasColumnType("money");

                entity.Property(e => e.net).HasColumnType("money");

                entity.Property(e => e.volumn).HasColumnType("money");
            });

            modelBuilder.Entity<sk_total_chg_p>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.sk_code, e.tran_date, e.sk_type, e.acccate, e.p_code });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .HasMaxLength(6)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sk_type)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.p_code)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost).HasColumnType("money");

                entity.Property(e => e.net).HasColumnType("money");

                entity.Property(e => e.volumn).HasColumnType("money");
            });

            modelBuilder.Entity<sk_total_chg_t>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.sk_code, e.tran_date, e.sk_type, e.acccate, e.t_code });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .HasMaxLength(6)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sk_type)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.t_code)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost).HasColumnType("money");

                entity.Property(e => e.net).HasColumnType("money");

                entity.Property(e => e.volumn).HasColumnType("money");
            });

            modelBuilder.Entity<sk_total_d>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.sk_code, e.tran_date, e.sk_type, e.acccate, e.d_code });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .HasMaxLength(6)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sk_type)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.d_code)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost).HasColumnType("money");

                entity.Property(e => e.net).HasColumnType("money");

                entity.Property(e => e.volumn).HasColumnType("money");
            });

            modelBuilder.Entity<sk_total_hist>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.sk_code, e.tran_date, e.sk_type, e.acccate });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasComment("帳戶別(fund_file.fund_no)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .HasMaxLength(6)
                    .HasComment("股票代號(sk_base.sk_code)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("庫存日期");

                entity.Property(e => e.sk_type)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost)
                    .HasColumnType("money")
                    .HasComment("平均成本");

                entity.Property(e => e.net)
                    .HasColumnType("money")
                    .HasComment("總成本");

                entity.Property(e => e.volumn)
                    .HasColumnType("money")
                    .HasComment("現存股數");
            });

            modelBuilder.Entity<sk_total_hist_d>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.sk_code, e.tran_date, e.sk_type, e.acccate, e.d_code });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .HasMaxLength(6)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sk_type)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.d_code)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost).HasColumnType("money");

                entity.Property(e => e.net).HasColumnType("money");

                entity.Property(e => e.volumn).HasColumnType("money");
            });

            modelBuilder.Entity<sk_total_hist_p>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.sk_code, e.tran_date, e.sk_type, e.acccate, e.p_code });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .HasMaxLength(6)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sk_type)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.p_code)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost).HasColumnType("money");

                entity.Property(e => e.net).HasColumnType("money");

                entity.Property(e => e.volumn).HasColumnType("money");
            });

            modelBuilder.Entity<sk_total_hist_t>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.sk_code, e.tran_date, e.sk_type, e.acccate, e.t_code });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .HasMaxLength(6)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sk_type)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.t_code)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost).HasColumnType("money");

                entity.Property(e => e.net).HasColumnType("money");

                entity.Property(e => e.volumn).HasColumnType("money");
            });

            modelBuilder.Entity<sk_total_ifrs9>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .HasMaxLength(255)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .HasMaxLength(255)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .HasMaxLength(255)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<sk_total_p>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.sk_code, e.tran_date, e.sk_type, e.acccate, e.p_code });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .HasMaxLength(6)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sk_type)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.p_code)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost).HasColumnType("money");

                entity.Property(e => e.net).HasColumnType("money");

                entity.Property(e => e.volumn).HasColumnType("money");
            });

            modelBuilder.Entity<sk_total_t>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.sk_code, e.tran_date, e.sk_type, e.acccate, e.t_code });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .HasMaxLength(6)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sk_type)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.t_code)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost).HasColumnType("money");

                entity.Property(e => e.net).HasColumnType("money");

                entity.Property(e => e.volumn).HasColumnType("money");
            });

            modelBuilder.Entity<sk_tranerr>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("交易別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.adj_date)
                    .HasColumnType("datetime")
                    .HasComment("錯帳日期");

                entity.Property(e => e.adj_times).HasDefaultValueSql("(1)");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasComment("券商代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_comm)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)")
                    .HasComment("券商手續費");

                entity.Property(e => e.broker_ref)
                    .HasMaxLength(50)
                    .HasComment("參考券商")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.co_cost).HasColumnType("money");

                entity.Property(e => e.d_volumn)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.fund_cost)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)")
                    .HasComment("交易成本");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("帳戶別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.group_code)
                    .HasMaxLength(8)
                    .HasComment("分組別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.group_cost)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)")
                    .HasComment("分組成本");

                entity.Property(e => e.insurance_rate).HasDefaultValueSql("(0)");

                entity.Property(e => e.lcm_amt).HasColumnType("money");

                entity.Property(e => e.net)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)")
                    .HasComment("交易淨額");

                entity.Property(e => e.price)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)")
                    .HasComment("價格");

                entity.Property(e => e.pricea).HasDefaultValueSql("(0)");

                entity.Property(e => e.real_rate)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.rec_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasComment("交易狀態")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ref_no)
                    .HasMaxLength(20)
                    .HasComment("參考編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settle_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("交割日");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasComment("股票代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_type)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.term)
                    .HasMaxLength(2)
                    .HasComment("長短投")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.total_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)")
                    .HasComment("今交金額");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("交易日期");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasComment("交易編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_out)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.trans_tax)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)")
                    .HasComment("證交稅");

                entity.Property(e => e.volumn)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)")
                    .HasComment("股數");
            });

            modelBuilder.Entity<sk_tranerr_memo>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo)
                    .HasMaxLength(250)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<sk_tranerr_p>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.adj_date).HasColumnType("datetime");

                entity.Property(e => e.adj_times).HasDefaultValueSql("((1))");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_comm)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.broker_ref)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.chk_date).HasColumnType("datetime");

                entity.Property(e => e.chk_sales_id)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.co_cost)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.d_volumn)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.fund_cost)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.group_code)
                    .HasMaxLength(8)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.group_cost)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.insurance_rate).HasDefaultValueSql("((0))");

                entity.Property(e => e.lcm_amt).HasColumnType("money");

                entity.Property(e => e.net)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.p_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.price)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.pricea).HasDefaultValueSql("((0))");

                entity.Property(e => e.real_rate)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.rec_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ref_no)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_type)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.term)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.total_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_out)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.trans_tax)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.volumn)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<sk_trans>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("交易別(1:買,2:賣;3:除息;4:除權I:溢少配)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasComment("券商代號(sb_broker)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_comm)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("券商手續費");

                entity.Property(e => e.broker_ref)
                    .HasMaxLength(50)
                    .HasComment("參考券商")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasComment("交易入出帳庫存代號(1:現股,2:在途股)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_no).HasMaxLength(20);

                entity.Property(e => e.co_cost).HasColumnType("money");

                entity.Property(e => e.d_cost)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.fund_cost)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("沖銷股票成本(交易成本)");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("帳戶別(fund_file.fund_no)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.net)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("淨收付金額(交易淨額)");

                entity.Property(e => e.p_code)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.p_cost)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.postal_tax).HasColumnType("money");

                entity.Property(e => e.price)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("交易單價");

                entity.Property(e => e.rec_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasComment("交易狀態")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ref_no)
                    .HasMaxLength(20)
                    .HasComment("參考編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settle_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("交割日");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasComment("股票代號(sk_base.sk_code)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_type)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.t_cost)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.total_amt)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("交易總金額");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("交易日期");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasComment("交易編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.trans_tax)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("交易證交稅");

                entity.Property(e => e.volumn)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("交易股數");
            });

            modelBuilder.Entity<sk_trans_log>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_comm).HasColumnType("money");

                entity.Property(e => e.broker_ref)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_no).HasMaxLength(20);

                entity.Property(e => e.co_cost).HasColumnType("money");

                entity.Property(e => e.d_volumn).HasColumnType("money");

                entity.Property(e => e.fund_cost).HasColumnType("money");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.group_code)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.group_cost).HasColumnType("money");

                entity.Property(e => e.insert_date).HasColumnType("datetime");

                entity.Property(e => e.lcm_amt).HasColumnType("money");

                entity.Property(e => e.net).HasColumnType("money");

                entity.Property(e => e.postal_tax).HasColumnType("money");

                entity.Property(e => e.price).HasColumnType("money");

                entity.Property(e => e.real_rate).HasColumnType("money");

                entity.Property(e => e.rec_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ref_no)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_type)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.term)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.total_amt).HasColumnType("money");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_out)
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.trans_tax).HasColumnType("money");

                entity.Property(e => e.volumn).HasColumnType("money");
            });

            modelBuilder.Entity<skr055_hist>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("交易別(1:買,2:賣;3:除息;4:除權I:溢少配)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_comm)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("券商手續費");

                entity.Property(e => e.co_cost).HasColumnType("money");

                entity.Property(e => e.fund_cost)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("沖銷股票成本(交易成本)");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("帳戶別(fund_file.fund_no)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.net)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("淨收付金額(交易淨額)");

                entity.Property(e => e.price)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("交易單價");

                entity.Property(e => e.ref_no)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasComment("股票代號(sk_base.sk_code)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("交易日期");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasComment("交易編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.volumn)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("交易股數");
            });

            modelBuilder.Entity<skr055_total>(entity =>
            {
                entity.HasKey(e => new { e.fund_no, e.sk_code, e.acccate, e.stock_date, e.tran_date });

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasComment("帳戶別(fund_file.fund_no)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .HasMaxLength(6)
                    .HasComment("股票代號(sk_base.sk_code)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.stock_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("庫存日期");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("交易日期");

                entity.Property(e => e.sell_volumn).HasColumnType("money");

                entity.Property(e => e.volumn)
                    .HasColumnType("money")
                    .HasComment("現存股數");
            });

            modelBuilder.Entity<skr055_total_hist>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("帳戶別(fund_file.fund_no)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sell_volumn)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasComment("股票代號(sk_base.sk_code)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.stock_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("庫存日期");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("交易日期");

                entity.Property(e => e.volumn)
                    .HasColumnType("money")
                    .HasComment("現存股數");
            });

            modelBuilder.Entity<skr055_trans>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("交易別(1:買,2:賣;3:除息;4:除權I:溢少配)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_comm)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("券商手續費");

                entity.Property(e => e.co_cost).HasColumnType("money");

                entity.Property(e => e.fund_cost)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("沖銷股票成本(交易成本)");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasComment("帳戶別(fund_file.fund_no)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.net)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("淨收付金額(交易淨額)");

                entity.Property(e => e.price)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("交易單價");

                entity.Property(e => e.ref_no)
                    .HasMaxLength(20)
                    .HasComment("參考編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .HasComment("股票代號(sk_base.sk_code)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("交易日期");

                entity.Property(e => e.tran_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasComment("交易編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.volumn)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))")
                    .HasComment("交易股數");
            });

            modelBuilder.Entity<sys_base>(entity =>
            {
                entity.HasKey(e => e.sys_no)
                    .IsClustered(false);

                entity.Property(e => e.sys_no)
                    .HasMaxLength(4)
                    .HasComment("系統編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_cmd)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("系統按鍵名稱")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_desc)
                    .HasMaxLength(30)
                    .HasComment("系統描述")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasComment("系統中文名稱")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<sys_baseBK>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.sys_cmd)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.sys_desc).HasMaxLength(30);

                entity.Property(e => e.sys_name)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<sys_calendar>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.work_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<sys_demand>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.demand_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("序號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.department)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasComment("單位")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.finish_date)
                    .HasColumnType("datetime")
                    .HasComment("需求完成日");

                entity.Property(e => e.finish_date2)
                    .HasColumnType("datetime")
                    .HasComment("評估需求完成日");

                entity.Property(e => e.item_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("異動項目")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.item_no2)
                    .HasMaxLength(20)
                    .HasComment("評估異動項目")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.keyin_date)
                    .HasColumnType("datetime")
                    .HasComment("新增日期");

                entity.Property(e => e.keyin_time)
                    .HasMaxLength(20)
                    .HasComment("新增時間")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasComment("需求說明")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo2)
                    .HasMaxLength(1000)
                    .HasComment("補充說明")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.modi_date)
                    .HasColumnType("datetime")
                    .HasComment("修改日期");

                entity.Property(e => e.modi_time)
                    .HasMaxLength(20)
                    .HasComment("修改時間")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pro_no)
                    .HasMaxLength(20)
                    .HasComment("修改項目")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.setup)
                    .HasMaxLength(2)
                    .HasComment("處理狀況")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasComment("系統別")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date)
                    .HasColumnType("datetime")
                    .HasComment("需求提案日");

                entity.Property(e => e.tran_date2)
                    .HasColumnType("datetime")
                    .HasComment("需求收件日");

                entity.Property(e => e.user_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("需求提案人")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.user_no2)
                    .HasMaxLength(20)
                    .HasComment("需求收件人")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<sys_ftpconnect>(entity =>
            {
                entity.HasKey(e => e.name);

                entity.Property(e => e.name)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.account)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ip)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.logtime).HasColumnType("smalldatetime");

                entity.Property(e => e.loguser)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pwd)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<sys_proxy>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Agent_id)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsFixedLength();

                entity.Property(e => e.EndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

                entity.Property(e => e.ModifiedUser)
                    .HasMaxLength(40)
                    .IsFixedLength();

                entity.Property(e => e.Sales_id)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsFixedLength();

                entity.Property(e => e.SeqID).ValueGeneratedOnAdd();

                entity.Property(e => e.SetDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<sys_relationship>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.company_group)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rbc).HasMaxLength(1);

                entity.Property(e => e.relation).HasMaxLength(1);

                entity.Property(e => e.relation_behavior)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.relation_no)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.unityid)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.unityname)
                    .IsRequired()
                    .HasMaxLength(30)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<system_File_fx>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.af_next_date).HasColumnType("smalldatetime");

                entity.Property(e => e.last_date).HasColumnType("smalldatetime");

                entity.Property(e => e.next_date).HasColumnType("smalldatetime");

                entity.Property(e => e.recno)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_char)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sys_name)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<system_caw_transfer>(entity =>
            {
                entity.HasKey(e => new { e.item_type, e.status, e.sys_date });

                entity.Property(e => e.item_type)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.status)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<system_file>(entity =>
            {
                entity.HasKey(e => new { e.recno, e.sys_name });

                entity.Property(e => e.recno)
                    .HasMaxLength(2)
                    .HasComment("基金代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_name)
                    .HasMaxLength(4)
                    .HasComment("系統代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.af_next_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("系統下二營業日");

                entity.Property(e => e.last_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("系統上一營業日");

                entity.Property(e => e.next_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("系統下一營業日");

                entity.Property(e => e.prtserial).HasDefaultValueSql("((1))");

                entity.Property(e => e.sys_char)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasComment("系統目前作帳時程")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("系統目前作帳日期");
            });

            modelBuilder.Entity<system_file2>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasComment("帳務代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_char)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasComment("作帳時程")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_memo)
                    .HasMaxLength(100)
                    .HasComment("備註")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasComment("系統代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date)
                    .HasColumnType("datetime")
                    .HasComment("執行日期");

                entity.Property(e => e.tran_time)
                    .HasMaxLength(20)
                    .HasComment("執行時間")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<system_file_backup>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.af_next_date).HasColumnType("smalldatetime");

                entity.Property(e => e.last_date).HasColumnType("smalldatetime");

                entity.Property(e => e.next_date).HasColumnType("smalldatetime");

                entity.Property(e => e.recno)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_char)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sys_name)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<system_file_log>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CRTDT).HasColumnType("datetime");

                entity.Property(e => e.af_next_date).HasColumnType("smalldatetime");

                entity.Property(e => e.cmd)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsFixedLength();

                entity.Property(e => e.hostname)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsFixedLength();

                entity.Property(e => e.hostprocess)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsFixedLength();

                entity.Property(e => e.last_date).HasColumnType("smalldatetime");

                entity.Property(e => e.net_address)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsFixedLength();

                entity.Property(e => e.next_date).HasColumnType("smalldatetime");

                entity.Property(e => e.program_name)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsFixedLength();

                entity.Property(e => e.prtserial).HasDefaultValueSql("(1)");

                entity.Property(e => e.recno)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_char)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sys_name)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<system_log>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.memo)
                    .HasMaxLength(200)
                    .IsFixedLength();

                entity.Property(e => e.system_time).HasColumnType("datetime");
            });

            modelBuilder.Entity<system_request>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.excute_time).HasColumnType("smalldatetime");

                entity.Property(e => e.get_date).HasColumnType("smalldatetime");

                entity.Property(e => e.prog_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.request_time).HasColumnType("smalldatetime");

                entity.Property(e => e.request_user)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<tables_define>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.table_desc)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.table_name)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.table_name_ch)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.table_sys)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.table_type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");
            });

            modelBuilder.Entity<tas_lk_total_hist>(entity =>
            {
                entity.HasKey(e => new { e.trade_no, e.trade_dt });

                entity.Property(e => e.trade_no)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.trade_dt).HasColumnType("date");

                entity.Property(e => e._int)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("int");

                entity.Property(e => e.avg_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.beg_dt).HasColumnType("date");

                entity.Property(e => e.broker)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.end_dt).HasColumnType("date");

                entity.Property(e => e.fno)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.interest).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.last_beg_dt).HasColumnType("date");

                entity.Property(e => e.price_tp)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.qty).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.rate).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.service_fee).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.trans_fee).HasColumnType("numeric(20, 5)");
            });

            modelBuilder.Entity<tas_lk_trans>(entity =>
            {
                entity.HasKey(e => e.trade_no);

                entity.Property(e => e.trade_no)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TAS_org_trade_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TAS_tran_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.avg_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.bank_accno)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.beg_dt).HasColumnType("date");

                entity.Property(e => e.broker)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.end_dt).HasColumnType("date");

                entity.Property(e => e.fno)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.interest).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.price_tp)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.qty).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.rate).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.service_fee).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.trade_dt).HasColumnType("date");

                entity.Property(e => e.tran_tax).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.trans_fee).HasColumnType("numeric(20, 5)");
            });

            modelBuilder.Entity<td_bkamt>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.act_type)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('A')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.amount).HasColumnType("money");

                entity.Property(e => e.bank_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.branch_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('00')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<td_brokerpay>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bank_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.branch_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pay_account)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pay_net)
                    .HasColumnType("decimal(18, 0)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.pay_title)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pay_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("datetime");
            });

            modelBuilder.Entity<td_dtl>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.fund_no, e.deal_no, e.dtl_no }, "TdDtlKey1")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.capital).HasColumnType("money");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dtl_no)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.loan_dept)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.loan_memo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<td_int_file>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.deal_no, "ind_dealno")
                    .HasFillFactor(70);

                entity.HasIndex(e => e.end_date, "ind_enddate")
                    .HasFillFactor(70);

                entity.HasIndex(e => e.rec_date, "ind_recdate")
                    .HasFillFactor(70);

                entity.Property(e => e.beg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.capital).HasColumnType("money");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.int_date).HasColumnType("smalldatetime");

                entity.Property(e => e.int_rate).HasColumnType("money");

                entity.Property(e => e.int_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.interest).HasColumnType("decimal(19, 0)");

                entity.Property(e => e.net).HasColumnType("decimal(19, 0)");

                entity.Property(e => e.period_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.rec_date).HasColumnType("smalldatetime");

                entity.Property(e => e.recv_int)
                    .HasColumnType("decimal(19, 0)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.recv_net)
                    .HasColumnType("decimal(19, 0)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.recv_tax)
                    .HasColumnType("decimal(19, 0)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.tax).HasColumnType("decimal(19, 0)");
            });

            modelBuilder.Entity<td_mast>(entity =>
            {
                entity.HasKey(e => e.deal_no)
                    .IsClustered(false);

                entity.HasIndex(e => e.cancel_date, "ind_cancelDate")
                    .HasFillFactor(70);

                entity.Property(e => e.deal_no)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acccate).HasMaxLength(2);

                entity.Property(e => e.bank_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.beg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.branch_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cancel_date).HasColumnType("smalldatetime");

                entity.Property(e => e.cancel_int)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.cancel_net)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.cancel_rate)
                    .HasColumnType("smallmoney")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.cancel_tax)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.capital).HasColumnType("money");

                entity.Property(e => e.deposit_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("(1)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dtl_status).HasDefaultValueSql("('0')");

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.int_cont)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("(1)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.int_rate).HasColumnType("smallmoney");

                entity.Property(e => e.int_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("(1)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.loguser)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.period_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("(1)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.roll_in_date).HasColumnType("smalldatetime");

                entity.Property(e => e.source_deal_no)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.td_no)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<td_register>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bank_id)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pay_amt).HasColumnType("money");

                entity.Property(e => e.pay_net).HasColumnType("money");

                entity.Property(e => e.pay_tax).HasColumnType("money");

                entity.Property(e => e.seqno).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<td_report>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate).HasMaxLength(20);

                entity.Property(e => e.act_type).HasMaxLength(10);

                entity.Property(e => e.amts).HasColumnType("money");

                entity.Property(e => e.beg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.broker_name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.buy_capital).HasColumnType("money");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.description).HasMaxLength(50);

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.int_cont)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.int_rate)
                    .HasColumnType("smallmoney")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.interest).HasColumnType("decimal(19, 0)");

                entity.Property(e => e.loan_dept)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.net).HasColumnType("decimal(19, 0)");

                entity.Property(e => e.num)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.period_day).HasDefaultValueSql("((0))");

                entity.Property(e => e.rec_date).HasColumnType("smalldatetime");

                entity.Property(e => e.relation)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.sn)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.sold_capital).HasColumnType("money");

                entity.Property(e => e.tax).HasColumnType("decimal(19, 0)");

                entity.Property(e => e.td_no)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<tmpCNY>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate).HasMaxLength(2);

                entity.Property(e => e.account).HasMaxLength(20);

                entity.Property(e => e.accrued_income_curr_code).HasMaxLength(10);

                entity.Property(e => e.attitude).HasMaxLength(1);

                entity.Property(e => e.base_curr).HasMaxLength(50);

                entity.Property(e => e.bond_kind).HasMaxLength(10);

                entity.Property(e => e.curr_code).HasMaxLength(10);

                entity.Property(e => e.different_amt).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_base_total).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_local_total).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_cost_ntd_total).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.fund_no).HasMaxLength(2);

                entity.Property(e => e.fx_type).HasMaxLength(10);

                entity.Property(e => e.int_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.int_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.int_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.market_value_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.market_value_cost).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.market_value_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.market_value_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_accrued_income_base).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_accrued_income_local).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.net_accrued_income_ntd).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.security_id).HasMaxLength(20);

                entity.Property(e => e.shares_units).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.shares_units_total).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.tran_date).HasColumnType("datetime");
            });

            modelBuilder.Entity<tmp_FundData>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CMoneyID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.CNTRY_OF_RISK)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.CName)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.COUNTRY)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.CSName)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.CertType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.CreateDT).HasColumnType("datetime");

                entity.Property(e => e.CreateUser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.Currency)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.DepartmentID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.DisableDT).HasColumnType("datetime");

                entity.Property(e => e.EName)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.ESName)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.FATCAStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.FundType_LV1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.FundType_LV2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.GIIN)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.ISIN)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.IssuerName)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.IssuerTicker)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.ModifyDT).HasColumnType("datetime");

                entity.Property(e => e.ModifyUser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.OTC)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.OfferingDate).HasColumnType("datetime");

                entity.Property(e => e.OperateType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.Product)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.RaisingType)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.SecurityID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.SevenRegions)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.StkFAName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.Ticker)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.VATNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(54)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tmp_FundIssuer>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CMoneyID)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.CreateDT).HasColumnType("datetime");

                entity.Property(e => e.CreateUser)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DepID)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FatcaCode)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.FileGroupID)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ID_BB_Company)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.IssuerArea)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ModifyDT).HasColumnType("datetime");

                entity.Property(e => e.ModifyUser)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Name_Chinese).HasMaxLength(100);

                entity.Property(e => e.Ticker)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.UID).ValueGeneratedOnAdd();

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(54)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tmp_FundIssuerRating>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.IssuerID)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdate).HasColumnType("datetime");

                entity.Property(e => e.RTG_FITCH_LT_FC_ISSUER_DEFAULT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RTG_FITCH_LT_ISSUER_DEFAULT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RTG_FITCH_NATIONAL_LT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RTG_MDY_FC_CURR_ISSUER_RATING)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RTG_MDY_ISSUER)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RTG_MDY_SEN_UNSECURED_DEBT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RTG_MOODY_LONG_TERM)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RTG_SP_LT_FC_ISSUER_CREDIT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RTG_SP_LT_LC_ISSUER_CREDIT)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RTG_TRC_LONG_TERM)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ddate).HasColumnType("datetime");

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(54)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tmp_FundUnitsData>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CreateDT).HasColumnType("datetime");

                entity.Property(e => e.CreateUser)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DataDate).HasColumnType("datetime");

                entity.Property(e => e.FundSeq)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ModifyDT).HasColumnType("datetime");

                entity.Property(e => e.ModifyUser)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Scale).HasColumnType("decimal(16, 0)");

                entity.Property(e => e.ScaleCurrency)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Seq).ValueGeneratedOnAdd();

                entity.Property(e => e.Units).HasColumnType("decimal(16, 0)");
            });

            modelBuilder.Entity<tmp_Portfolio>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AccountType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AssetClass)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AssetStra)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.BondType_Lv1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.CreateUser)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Custodian)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DepID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DepTeamID)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FundCategory)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FundCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FundID)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FundLevel)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.FundName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FundSName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GTIAccount)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.InvestArea)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LendingAcc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OPTMargin).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PAccount)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.PolicyClass)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PortiaSymbol)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SellingRule)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SettleGroup)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SettleType)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdateTime).HasColumnType("datetime");

                entity.Property(e => e.UpdateUser)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(54)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tmp_acdesc>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e._new)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("new")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acdesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.gl)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<tmp_check_000>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acct_date).HasColumnType("smalldatetime");

                entity.Property(e => e.add_date).HasColumnType("smalldatetime");

                entity.Property(e => e.amt).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(16)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.block)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.change_date).HasColumnType("smalldatetime");

                entity.Property(e => e.change_memo)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_date).HasColumnType("smalldatetime");

                entity.Property(e => e.check_memo)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dept_no).HasMaxLength(50);

                entity.Property(e => e.new_check)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.pay_date).HasColumnType("smalldatetime");

                entity.Property(e => e.pay_memo)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.recno).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.sys_date).HasColumnType("smalldatetime");

                entity.Property(e => e.title)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.user_id)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.vouno)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<tmp_cm_fund_dividend>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Currency)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Distribution_BaseDate).HasColumnType("datetime");

                entity.Property(e => e.Distribution_IssueDate).HasColumnType("datetime");

                entity.Property(e => e.DividendDate).HasColumnType("datetime");

                entity.Property(e => e.DividendPeriod).HasMaxLength(10);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.No)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PUnitAmt).HasColumnType("decimal(12, 8)");

                entity.Property(e => e.StopTran_Edate).HasColumnType("datetime");

                entity.Property(e => e.StopTran_Sdate).HasColumnType("datetime");

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(54)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tmp_cm_fund_nav>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Name).HasMaxLength(60);

                entity.Property(e => e.Nav).HasColumnType("decimal(20, 6)");

                entity.Property(e => e.No)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ddate).HasColumnType("datetime");

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(54)
                    .IsUnicode(false);

                entity.Property(e => e.modifydate).HasColumnType("datetime");
            });

            modelBuilder.Entity<tmp_cm_fund_scalemper>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Buy).HasColumnType("decimal(16, 4)");

                entity.Property(e => e.Buy_Orig).HasColumnType("decimal(16, 0)");

                entity.Property(e => e.Currency)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FundType)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.LegalNum).HasColumnType("decimal(8, 0)");

                entity.Property(e => e.MarketShare).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Name).HasMaxLength(60);

                entity.Property(e => e.NaturalNum).HasColumnType("decimal(8, 0)");

                entity.Property(e => e.No)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PNav_Orig).HasColumnType("decimal(16, 0)");

                entity.Property(e => e.Pnav).HasColumnType("decimal(16, 4)");

                entity.Property(e => e.Scale).HasColumnType("decimal(16, 4)");

                entity.Property(e => e.Scale_Change).HasColumnType("decimal(16, 4)");

                entity.Property(e => e.Scale_Change_Orig).HasColumnType("decimal(16, 0)");

                entity.Property(e => e.Scale_Orig).HasColumnType("decimal(16, 0)");

                entity.Property(e => e.Sell).HasColumnType("decimal(16, 4)");

                entity.Property(e => e.Sell_Orig).HasColumnType("decimal(16, 0)");

                entity.Property(e => e.Stsq_Amt).HasColumnType("decimal(8, 0)");

                entity.Property(e => e.Stsq_Amt_Orig).HasColumnType("decimal(16, 0)");

                entity.Property(e => e.Stsq_Num).HasColumnType("decimal(8, 0)");

                entity.Property(e => e.Stsq_Person_Num).HasColumnType("decimal(8, 0)");

                entity.Property(e => e.TotalNum).HasColumnType("decimal(8, 0)");

                entity.Property(e => e.TotalUnit).HasColumnType("decimal(16, 0)");

                entity.Property(e => e.TotalUnit_Million).HasColumnType("decimal(16, 4)");

                entity.Property(e => e.YYYYMM)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tmp_div1>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.back_dealno).HasMaxLength(13);

                entity.Property(e => e.bank_fee).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.broker_fee).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.co_cost).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.confirm_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(13);

                entity.Property(e => e.fn_co)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.fund_cost).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.lcm_amt).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.net).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.newconfirm_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.rec_status)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.tot_amt).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.tot_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.trade_date).HasColumnType("datetime");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.trust_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.unit_nav).HasColumnType("decimal(20, 8)");
            });

            modelBuilder.Entity<tmp_ets_fnd_trade>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.SecID)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.SecName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.act_trade_dt).HasColumnType("date");

                entity.Property(e => e.act_value_dt).HasColumnType("date");

                entity.Property(e => e.amt)
                    .HasColumnType("decimal(20, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.approve)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.approve_dep)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.approve_dep_dt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.approve_dt).HasColumnType("datetime");

                entity.Property(e => e.bank_accno_name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.bank_accno_opp)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.bank_branch)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.bank_opp)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.broker)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.cash_value_dt).HasColumnType("date");

                entity.Property(e => e.ccy)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.commission)
                    .HasColumnType("decimal(20, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.decision_deal_dt).HasColumnType("datetime");

                entity.Property(e => e.decision_dt).HasColumnType("datetime");

                entity.Property(e => e.etl_trade_no)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.exchange_fee)
                    .HasColumnType("decimal(20, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.fno)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fundcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.hf_settle_amt)
                    .HasColumnType("numeric(20, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.isincode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.locktime).HasColumnType("datetime");

                entity.Property(e => e.locktime2).HasColumnType("datetime");

                entity.Property(e => e.lockuser)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.lockuser2)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.manager)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.nav)
                    .HasColumnType("decimal(20, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.nav_dt).HasColumnType("date");

                entity.Property(e => e.other_fee)
                    .HasColumnType("decimal(20, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.qty)
                    .HasColumnType("decimal(20, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.return_amt)
                    .HasColumnType("decimal(20, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.settle_amt)
                    .HasColumnType("decimal(20, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.subtype)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.trade_dt).HasColumnType("date");

                entity.Property(e => e.trader)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.tran_fee)
                    .HasColumnType("decimal(20, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.tran_tax)
                    .HasColumnType("decimal(20, 5)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<tmp_ets_stk_trade>(entity =>
            {
                entity.HasKey(e => new { e.ddate_w, e.ifund, e.RefNo });

                entity.Property(e => e.ddate_w).HasColumnType("datetime");

                entity.Property(e => e.ifund)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.RefNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Charges).HasColumnType("decimal(22, 10)");

                entity.Property(e => e.Commission).HasColumnType("decimal(22, 10)");

                entity.Property(e => e.DecAuditDT).HasColumnType("datetime");

                entity.Property(e => e.DecAuditName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DecManegeName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderTraderName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.dsato_w).HasColumnType("datetime");

                entity.Property(e => e.fsource)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ftype)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.iagtid)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.icurid)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.istkid)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.mfee).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.msum).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.mtax).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.mtotal).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.price).HasColumnType("numeric(18, 8)");

                entity.Property(e => e.qstks).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.stktype)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<tmp_fn_price>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.price).HasColumnType("decimal(19, 8)");

                entity.Property(e => e.tot_units).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<tmp_fn_total_hist>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.avg_cost).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.chg_cost).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.chg_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.confirm_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.day_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.day_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.day_loss).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.fn_co)
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.lcm_amt).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.market_price).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.month_loss).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.net).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.tot_units).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trust_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.unit_nav).HasColumnType("decimal(20, 8)");

                entity.Property(e => e.year_dividend).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.year_gain).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.year_loss).HasColumnType("decimal(20, 0)");
            });

            modelBuilder.Entity<tmp_fn_trans>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.back_dealno)
                    .HasMaxLength(13)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_account).HasMaxLength(50);

                entity.Property(e => e.bank_fee).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_fee).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.co_cost).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.confirm_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(13)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_co)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_cost).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ipo_amt).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ipo_chk)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ipo_deal_no).HasMaxLength(13);

                entity.Property(e => e.lcm_amt).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.net).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.newconfirm_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.settle_date).HasColumnType("smalldatetime");

                entity.Property(e => e.settledate_bill).HasColumnType("smalldatetime");

                entity.Property(e => e.tot_amt).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.tot_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.trade_date).HasColumnType("smalldatetime");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.trust_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.unit_nav).HasColumnType("decimal(20, 8)");
            });

            modelBuilder.Entity<tmp_fx_base>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.cupon).HasColumnType("decimal(27, 9)");

                entity.Property(e => e.isin).HasMaxLength(50);

                entity.Property(e => e.maturity).HasColumnType("datetime");

                entity.Property(e => e.secu_desc1).HasMaxLength(150);

                entity.Property(e => e.security_id)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.security_type).HasMaxLength(100);
            });

            modelBuilder.Entity<tmp_lend_portia>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DATE).HasColumnType("datetime");

                entity.Property(e => e.PORTFOLIO).HasMaxLength(255);

                entity.Property(e => e.SECURITY).HasMaxLength(255);

                entity.Property(e => e.Settle_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Settle Date");

                entity.Property(e => e.TIME).HasMaxLength(255);

                entity.Property(e => e.Trade_Date)
                    .HasColumnType("datetime")
                    .HasColumnName("Trade Date");

                entity.Property(e => e.TranType).HasMaxLength(255);

                entity.Property(e => e.Under_Portfolio)
                    .HasMaxLength(255)
                    .HasColumnName("Under Portfolio");

                entity.Property(e => e.__BROKER)
                    .HasMaxLength(255)
                    .HasColumnName("  BROKER");
            });

            modelBuilder.Entity<tmp_r11>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.beg_volumn).HasColumnType("money");

                entity.Property(e => e.end_volumn).HasColumnType("money");

                entity.Property(e => e.holding_rate).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.in_volumn).HasColumnType("money");

                entity.Property(e => e.mkt_value).HasColumnType("money");

                entity.Property(e => e.net).HasColumnType("money");

                entity.Property(e => e.out_volumn).HasColumnType("money");

                entity.Property(e => e.price).HasColumnType("money");

                entity.Property(e => e.sk_code)
                    .HasMaxLength(6)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_name)
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_type)
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.total_share).HasColumnType("numeric(31, 11)");
            });

            modelBuilder.Entity<tmp_tb>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.capital_amt).HasColumnType("money");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.market_price).HasColumnType("money");

                entity.Property(e => e.sk_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sk_type)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");

                entity.Property(e => e.volumn).HasColumnType("money");
            });

            modelBuilder.Entity<tmp_test_id>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.test).ValueGeneratedOnAdd();

                entity.Property(e => e.val)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<tmpfn_tran_0301>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.back_dealno).HasMaxLength(13);

                entity.Property(e => e.bank_fee).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.broker_fee).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.co_cost).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.confirm_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(13);

                entity.Property(e => e.fn_co)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.fn_no)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.fund_cost).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.lcm_amt).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.net).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.newconfirm_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.settle_bill).HasColumnType("datetime");

                entity.Property(e => e.settle_date).HasColumnType("datetime");

                entity.Property(e => e.tot_amt).HasColumnType("decimal(20, 0)");

                entity.Property(e => e.tot_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.trade_date).HasColumnType("datetime");

                entity.Property(e => e.tran_date).HasColumnType("datetime");

                entity.Property(e => e.trust_unit).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.unit_nav).HasColumnType("decimal(20, 8)");
            });

            modelBuilder.Entity<tmpg1>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.acdesc).HasMaxLength(50);

                entity.Property(e => e.drcr)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.gl)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.invest_type)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.sl1)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.vlife_gl).HasMaxLength(8);

                entity.Property(e => e.vou_type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<tmph1>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.acdesc).HasMaxLength(50);

                entity.Property(e => e.drcr)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.gl)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.invest_type)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.sl1)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.vlife_gl).HasMaxLength(8);

                entity.Property(e => e.vou_type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<tra_bnd_baladj>(entity =>
            {
                entity.HasKey(e => e.trade_no);

                entity.Property(e => e.trade_no)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e._lock).HasColumnName("lock");

                entity.Property(e => e.acc_cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_rl_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.cost).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.crttime).HasColumnType("datetime");

                entity.Property(e => e.crtuser)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.fno)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.locktime).HasColumnType("datetime");

                entity.Property(e => e.lockuser)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.logtime).HasColumnType("datetime");

                entity.Property(e => e.loguser)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.par_value).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.rl_cost_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.trade_dt).HasColumnType("date");
            });

            modelBuilder.Entity<tra_bnd_deal_rating>(entity =>
            {
                entity.HasKey(e => e.etl_trade_no);

                entity.Property(e => e.etl_trade_no)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BondFitchRating)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BondGetRatingDate).HasColumnType("datetime");

                entity.Property(e => e.BondMoodysRating)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BondRating)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BondRatingType)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BondSPRating)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BondTwnFitchRating)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BondTwnRating)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.GuaranteeFitchRating)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.GuaranteeGetRatingDate).HasColumnType("datetime");

                entity.Property(e => e.GuaranteeMoodysRating)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.GuaranteeRating)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.GuaranteeRatingType)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.GuaranteeSPRating)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.GuaranteeTwnFitchRating)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.GuaranteeTwnRating)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IssuedFitchRating)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IssuedGetRatingDate).HasColumnType("datetime");

                entity.Property(e => e.IssuedMoodysRating)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IssuedRating)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IssuedRatingType)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IssuedSPRating)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IssuedTwnFitchRating)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IssuedTwnRating)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.fas_trade_no)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.import_dt)
                    .HasColumnType("date")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<tra_fx_deal_acc>(entity =>
            {
                entity.HasKey(e => e.trade_no);

                entity.Property(e => e.trade_no)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.acc_amt).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_ex_notional_amt).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_ex_notional_amt_long).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_ex_notional_amt_short).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_inc_settle_amt).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_notional_amt).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_notional_amt_long).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.acc_notional_amt_short).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.cash_cost_amt).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.cash_exch_diff).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.ex_bank_accno_opp)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ex_bank_opp)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ex_broker)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ex_notional_amt).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.ex_notional_amt_long).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.ex_notional_amt_short).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.exchrate).HasColumnType("numeric(20, 10)");

                entity.Property(e => e.exchrate_cash).HasColumnType("numeric(20, 10)");

                entity.Property(e => e.exchrate_inc_settle).HasColumnType("numeric(20, 10)");

                entity.Property(e => e.exchrate_long).HasColumnType("numeric(20, 10)");

                entity.Property(e => e.exchrate_notional).HasColumnType("numeric(20, 10)");

                entity.Property(e => e.exchrate_short).HasColumnType("numeric(20, 10)");

                entity.Property(e => e.inc_settle_bank)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.inc_settle_bank_accno)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.logtime).HasColumnType("datetime");

                entity.Property(e => e.loguser)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.notional_amt).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.notional_amt_long).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.notional_amt_short).HasColumnType("numeric(20, 5)");

                entity.Property(e => e.notional_bank)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.notional_bank_accno)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.notional_ccy)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<user_act_log>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.id_no, e.sys_no, e.prog_no, e.login_date }, "IX_user_act_log")
                    .IsClustered()
                    .HasFillFactor(70);

                entity.Property(e => e.fund_no)
                    .HasMaxLength(10)
                    .HasComment("執行的基金代號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.id_no)
                    .HasMaxLength(30)
                    .HasComment("使用者帳號(emp_base.sales_id)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.login_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("執行日期");

                entity.Property(e => e.login_time)
                    .HasMaxLength(20)
                    .HasComment("執行時間")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.prog_no)
                    .HasMaxLength(10)
                    .HasComment("程式編號")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.restore_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("回帳至那個時間");

                entity.Property(e => e.sys_no)
                    .HasMaxLength(10)
                    .HasComment("系統編號(sys_base.sys_no)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.system_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("目前做程時間");
            });

            modelBuilder.Entity<user_prog>(entity =>
            {
                entity.HasKey(e => new { e.id_no, e.sys_no, e.prog_no })
                    .IsClustered(false);

                entity.Property(e => e.id_no)
                    .HasMaxLength(20)
                    .HasComment("使用者帳號(emp_base.sales_id)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_no)
                    .HasMaxLength(4)
                    .HasComment("系統編號(sys_base.sys_no)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.prog_no)
                    .HasMaxLength(8)
                    .HasComment("程式編號(prog_base.prog_no)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.del).HasComment("刪除權限(1:yes 0:no)");

                entity.Property(e => e.ins).HasComment("新增權限(1:yes 0:no)");

                entity.Property(e => e.mdf).HasComment("修改權限(1:yes 0:no)");

                entity.Property(e => e.qry).HasComment("查詢權限(1:yes 0:no)");

                entity.Property(e => e.rpt).HasComment("報表權限(1:yes 0:no)");
            });

            modelBuilder.Entity<user_prog_log>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.id_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("使用者帳號(emp_base.sales_id)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.login_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("登入日期");

                entity.Property(e => e.login_time)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("登入時間")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.prog_no)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasComment("程式編號(prog_base.prog_no)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasComment("系統編號(sys_base.sys_no)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<user_pwd_log>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.chg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sales_id)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<user_sys>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.id_no, e.sys_no }, "UserSysIdx1")
                    .IsUnique()
                    .HasFillFactor(70);

                entity.Property(e => e.id_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("使用者帳號(emp_base.sales_id)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.manage).HasComment("所有基金使用權限(1:yes 0:no)");

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasComment("系統編號(sys_base.sys_no)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<user_sys_log>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.id_no)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("使用者帳號(emp_base.sales_id)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.login_date)
                    .HasColumnType("smalldatetime")
                    .HasComment("登入日期");

                entity.Property(e => e.login_time)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasComment("登入時間")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasComment("系統編號(sys_base.sys_no)")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<vl_bankacct_sl2>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.bank_acct)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sl2)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sl2_memo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<vl_fee_base>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.dept_name)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.f_code)
                    .HasMaxLength(15)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fee_gl)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<vl_gl_group>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.dept_name)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.flag)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.group_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.group_seq)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.serial).ValueGeneratedOnAdd();

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.vlife_code)
                    .HasMaxLength(3)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.vou_type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<vl_gl_setup>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acdesc).HasMaxLength(200);

                entity.Property(e => e.drcr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.gl)
                    .IsRequired()
                    .HasMaxLength(5)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.invest_type)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.serial).ValueGeneratedOnAdd();

                entity.Property(e => e.sl1)
                    .IsRequired()
                    .HasMaxLength(5)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.vlife_gl)
                    .HasMaxLength(15)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.vou_type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<vl_gl_trans>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.acct_seq).HasDefaultValueSql("((1))");

                entity.Property(e => e.amt1)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.amt10)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.amt2)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.amt3)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.amt4)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.amt5)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.amt6)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.amt7)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.amt8)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.amt9)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.bank_acct)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_type)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dept_name)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.emp)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.invest_type)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo1)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo10)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo2)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo3)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo4)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo5)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo6)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo7)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo8)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo9)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.order_no)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.r_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sys_date).HasColumnType("smalldatetime");

                entity.Property(e => e.sys_no)
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('NA')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.vou_date).HasColumnType("smalldatetime");

                entity.Property(e => e.vou_type)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<vl_maf01>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acdesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.gl)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.type)
                    .HasMaxLength(110)
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<vl_maf01_ifrs9>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acdesc_ias39).HasMaxLength(255);

                entity.Property(e => e.acdesc_ifrs9).HasMaxLength(255);

                entity.Property(e => e.gl_ias39)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.gl_ifrs9)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo).HasMaxLength(255);
            });

            modelBuilder.Entity<vl_maf01_len8>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acdesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.gl)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.type)
                    .HasMaxLength(110)
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<vl_maf10>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.amt).HasColumnType("money");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dept_name)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.drcr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.emp)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.f_code)
                    .HasMaxLength(15)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fx_vounoB)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.gl)
                    .IsRequired()
                    .HasMaxLength(15)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.group_name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.group_seq)
                    .IsRequired()
                    .HasMaxLength(1)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ins_date).HasColumnType("smalldatetime");

                entity.Property(e => e.memo)
                    .HasMaxLength(200)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.r_code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.sl1)
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sl2)
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.vlife_code)
                    .IsRequired()
                    .HasMaxLength(3)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.vou_date).HasColumnType("smalldatetime");

                entity.Property(e => e.vou_source)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.vounoA)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.vounoB)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<vl_maf10_fxbackup>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.amt).HasColumnType("money");

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.dept_name)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.drcr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.emp)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.f_code)
                    .HasMaxLength(15)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.fx_vounoB).HasMaxLength(50);

                entity.Property(e => e.gl)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.group_name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.group_seq)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.ins_date).HasColumnType("smalldatetime");

                entity.Property(e => e.memo).HasMaxLength(100);

                entity.Property(e => e.oiu).HasDefaultValueSql("((0))");

                entity.Property(e => e.r_code)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.sl1).HasMaxLength(10);

                entity.Property(e => e.sl2).HasMaxLength(20);

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.vlife_code)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.vou_date).HasColumnType("smalldatetime");

                entity.Property(e => e.vou_source)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.vounoA)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.vounoB)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<vl_maf10_upload>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acccate_rule)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.amt).HasColumnType("money");

                entity.Property(e => e.batch_no)
                    .IsRequired()
                    .HasMaxLength(11);

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.co_fund_no)
                    .IsRequired()
                    .HasMaxLength(3)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cost_unit)
                    .IsRequired()
                    .HasMaxLength(6)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.crtuser)
                    .IsRequired()
                    .HasMaxLength(40);

                entity.Property(e => e.f_code)
                    .IsRequired()
                    .HasMaxLength(6)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(3)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.gl)
                    .IsRequired()
                    .HasMaxLength(11)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ifrs17_group)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(80)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.path)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.r_code)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.relate_role)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.relate_tp)
                    .IsRequired()
                    .HasMaxLength(4);

                entity.Property(e => e.sl)
                    .IsRequired()
                    .HasMaxLength(5)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.system_tp)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.vou_date).HasColumnType("smalldatetime");

                entity.Property(e => e.vouno)
                    .IsRequired()
                    .HasMaxLength(12)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<vl_mafAR>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.amt1).HasColumnType("money");

                entity.Property(e => e.amt2).HasColumnType("money");

                entity.Property(e => e.bank_acct)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.batch_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cash_item)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_type2)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('NTD')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_entry)
                    .IsRequired()
                    .HasMaxLength(3)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.check_no)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.drcr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.emp)
                    .IsRequired()
                    .HasMaxLength(20)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.entry_memo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo).HasMaxLength(200);

                entity.Property(e => e.r_code).HasMaxLength(50);

                entity.Property(e => e.sys_no).HasMaxLength(50);

                entity.Property(e => e.vlife_code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.vou_date).HasColumnType("smalldatetime");

                entity.Property(e => e.vou_type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<vl_mafAR_Fx>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.amt).HasColumnType("money");

                entity.Property(e => e.amt2).HasColumnType("money");

                entity.Property(e => e.bank_acct_in)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bank_acct_out)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.batch_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cash_item)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('NTD')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.ccy_type2)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('NTD')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.drcr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('00')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_no).HasMaxLength(4);

                entity.Property(e => e.vou_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<vl_mafAR_Fx_tmp>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.amt).HasColumnType("money");

                entity.Property(e => e.amt2).HasColumnType("money");

                entity.Property(e => e.bank_acct_in)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.bank_acct_out)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.batch_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.cash_item)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ccy_type)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('NTD')");

                entity.Property(e => e.ccy_type2)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('NTD')");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.drcr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.emp)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('00')");

                entity.Property(e => e.memo)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.sys_no).HasMaxLength(4);

                entity.Property(e => e.vou_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<vl_mafAR_detail>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.amt1).HasColumnType("money");

                entity.Property(e => e.amt2).HasColumnType("money");

                entity.Property(e => e.bank_acct)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.batch_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cash_item).HasMaxLength(50);

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.drcr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dtl_status).HasMaxLength(2);

                entity.Property(e => e.memo)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.r_code)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_no)
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.vou_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<vl_mafAR_detail_2016>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.amt1).HasColumnType("money");

                entity.Property(e => e.amt2).HasColumnType("money");

                entity.Property(e => e.bank_acct)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.batch_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cash_item).HasMaxLength(50);

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.drcr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dtl_status).HasMaxLength(2);

                entity.Property(e => e.memo)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.r_code)
                    .HasMaxLength(50)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.sys_no)
                    .HasMaxLength(3)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.vou_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<vl_總帳科目停用清單>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acdesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.gl)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<vl_總帳調整科目對照>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.acdesc_new)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.acdesc_old)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.gl_new)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.gl_old)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            modelBuilder.Entity<wk_FundData>(entity =>
            {
                entity.HasKey(e => e.Seq);

                entity.Property(e => e.Seq).ValueGeneratedNever();

                entity.Property(e => e.CMoneyID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.CNTRY_OF_RISK)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.CName)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.COUNTRY)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.CSName)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.CertType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.CreateDT).HasColumnType("datetime");

                entity.Property(e => e.CreateUser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.Currency)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.DepartmentID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.DisableDT).HasColumnType("datetime");

                entity.Property(e => e.EName)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.ESName)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.FATCAStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.FundType_LV1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.FundType_LV2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.GIIN)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.ISIN)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.IssuerName)
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.IssuerTicker)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.ModifyDT).HasColumnType("datetime");

                entity.Property(e => e.ModifyUser)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.OTC)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.OfferingDate).HasColumnType("datetime");

                entity.Property(e => e.OperateType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.Product)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.RaisingType)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.SecurityID)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.SevenRegions)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.StkFAName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.Ticker)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.VATNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");
            });

            modelBuilder.Entity<wk_Portfolio>(entity =>
            {
                entity.HasKey(e => e.FundID)
                    .HasName("PK_wk_Portfolio_FundID");

                entity.Property(e => e.FundID)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("投組代號")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("會計類別 (AFS：備供出售、TRD：交易目的、HTM：持有到期、NAM：無活絡)")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.AssetClass)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("投組資產分類")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.AssetStra)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("資產策略")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.BondType_Lv1)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComment("債券類別-大類別")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasComment("建立時間");

                entity.Property(e => e.CreateUser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("建立人員")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasComment("幣別")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.Custodian)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("保管機構")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.DepID)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("所屬部門")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.DepTeamID)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("課/組別")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasComment("終止日期");

                entity.Property(e => e.FundCategory)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("一般:1, 委外:2, OIU:3")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.FundCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Code")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.FundLevel)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("投組層級")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.FundName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("投組名稱")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.FundSName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("投組簡稱")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.GTIAccount)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("GTI Account")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.InvestArea)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("投組投資地區")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.IsProfessional).HasComment("專案/信託(專案=1；信託=0)");

                entity.Property(e => e.LendingAcc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("借券代號")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.OPTMargin)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("期權保證金");

                entity.Property(e => e.PAccount)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("P Account")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.PolicyClass)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("帳冊別 (Distribution:分紅, IndustryA:傳統A, IntSensitive:利變, IntSensitive B:利變B, Normal:不分紅)")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.PortiaSymbol)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Symbol")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.SellingRule)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasComment("沖銷方法(0：Specific(指定法)、1：FIFO、2：LIFO、9：Pro Rata-Qty(平均法))")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.SettleGroup)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("結帳組別")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.SettleType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("交割方式 (Bond：國內交割、GlBond：國外交割)")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasComment("起始日期");

                entity.Property(e => e.UpdateTime)
                    .HasColumnType("datetime")
                    .HasComment("修改日期");

                entity.Property(e => e.UpdateUser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("修改人員")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");
            });

            modelBuilder.Entity<wk_ets_fnd_trade>(entity =>
            {
                entity.HasKey(e => new { e.etl_trade_no, e.trade_dt, e.fno, e.stage });

                entity.Property(e => e.etl_trade_no)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.trade_dt).HasColumnType("date");

                entity.Property(e => e.fno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.SecID)
                    .IsRequired()
                    .HasMaxLength(100)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.SecName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.act_trade_dt).HasColumnType("date");

                entity.Property(e => e.act_value_dt).HasColumnType("date");

                entity.Property(e => e.amt)
                    .HasColumnType("decimal(20, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.approve)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.approve_dep)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.approve_dep_dt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.approve_dt).HasColumnType("datetime");

                entity.Property(e => e.bank_accno_name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.bank_accno_opp)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.bank_branch)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.bank_opp)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.broker)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.cash_value_dt).HasColumnType("date");

                entity.Property(e => e.ccy)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.commission)
                    .HasColumnType("decimal(20, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.decision_deal_dt).HasColumnType("datetime");

                entity.Property(e => e.decision_dt).HasColumnType("datetime");

                entity.Property(e => e.exchange_fee)
                    .HasColumnType("decimal(20, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.fundcode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.hf_settle_amt)
                    .HasColumnType("numeric(20, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.isincode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.locktime).HasColumnType("datetime");

                entity.Property(e => e.locktime2).HasColumnType("datetime");

                entity.Property(e => e.lockuser)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.lockuser2)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.manager)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.nav)
                    .HasColumnType("decimal(20, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.nav_dt).HasColumnType("date");

                entity.Property(e => e.other_fee)
                    .HasColumnType("decimal(20, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.qty)
                    .HasColumnType("decimal(20, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.return_amt)
                    .HasColumnType("decimal(20, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.settle_amt)
                    .HasColumnType("decimal(20, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.subtype)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.trader)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .UseCollation("Chinese_Taiwan_Stroke_BIN");

                entity.Property(e => e.tran_fee)
                    .HasColumnType("decimal(20, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.tran_tax)
                    .HasColumnType("decimal(20, 5)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<wk_ets_stk_trade>(entity =>
            {
                entity.HasKey(e => new { e.ddate_w, e.ifund, e.RefNo })
                    .HasName("PK_ets_stk_trade");

                entity.Property(e => e.ddate_w).HasColumnType("datetime");

                entity.Property(e => e.ifund)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.RefNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Charges).HasColumnType("decimal(22, 10)");

                entity.Property(e => e.Commission).HasColumnType("decimal(22, 10)");

                entity.Property(e => e.DecAuditDT).HasColumnType("datetime");

                entity.Property(e => e.DecAuditName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DecManegeName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderTraderName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.dsato_w).HasColumnType("datetime");

                entity.Property(e => e.fsource)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ftype)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.iagtid)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.icurid)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.istkid)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.mfee).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.msum).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.mtax).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.mtotal).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.price).HasColumnType("numeric(18, 8)");

                entity.Property(e => e.qstks).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.stktype)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<wk_sb_trans>(entity =>
            {
                entity.HasKey(e => new { e.action, e.source_deal_no });

                entity.Property(e => e.action)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.source_deal_no)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.Acount).HasMaxLength(20);

                entity.Property(e => e.AcountName).HasMaxLength(20);

                entity.Property(e => e.acccate)
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.act_days).HasDefaultValueSql("((0))");

                entity.Property(e => e.act_int)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.act_price)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.act_rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.act_tax)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.app_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.beg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.bill_no)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength()
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.bill_type)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.broker_code)
                    .IsRequired()
                    .HasMaxLength(4)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.buy_cut).HasDefaultValueSql("((0))");

                entity.Property(e => e.buy_int).HasColumnType("money");

                entity.Property(e => e.buy_price).HasColumnType("money");

                entity.Property(e => e.buy_rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.buy_tax).HasColumnType("money");

                entity.Property(e => e.buydate).HasDefaultValueSql("((0))");

                entity.Property(e => e.buymonth).HasDefaultValueSql("((0))");

                entity.Property(e => e.cancel_date).HasColumnType("smalldatetime");

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.org_app_no)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.par_value).HasColumnType("money");

                entity.Property(e => e.relation).HasDefaultValueSql("((0))");

                entity.Property(e => e.roll_in_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.sold_price).HasColumnType("money");

                entity.Property(e => e.sys_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.tran_date).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<wk_td_mast>(entity =>
            {
                entity.HasKey(e => new { e.rec_status, e.source_deal_no });

                entity.Property(e => e.source_deal_no)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.Acount).HasMaxLength(20);

                entity.Property(e => e.AcountName).HasMaxLength(20);

                entity.Property(e => e.acccate).HasMaxLength(2);

                entity.Property(e => e.bank_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.beg_date).HasColumnType("smalldatetime");

                entity.Property(e => e.branch_no)
                    .IsRequired()
                    .HasMaxLength(4)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.cancel_date).HasColumnType("smalldatetime");

                entity.Property(e => e.cancel_int)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.cancel_net)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.cancel_rate)
                    .HasColumnType("smallmoney")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.cancel_tax)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.capital).HasColumnType("money");

                entity.Property(e => e.deal_no)
                    .IsRequired()
                    .HasMaxLength(10)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.deposit_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("((1))")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.dtl_status).HasDefaultValueSql("('0')");

                entity.Property(e => e.end_date).HasColumnType("smalldatetime");

                entity.Property(e => e.fund_no)
                    .IsRequired()
                    .HasMaxLength(2)
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.int_cont)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("((1))")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.int_rate).HasColumnType("smallmoney");

                entity.Property(e => e.int_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("((1))")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.period_type)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasDefaultValueSql("((1))")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");

                entity.Property(e => e.roll_in_date)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.td_no)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(' ')")
                    .UseCollation("Chinese_Taiwan_Stroke_CS_AS");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}